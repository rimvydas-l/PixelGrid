
F103ZET6_NEO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004c50  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b8  08004e34  08004e34  00014e34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004eec  08004eec  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08004eec  08004eec  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004eec  08004eec  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004eec  08004eec  00014eec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004ef0  08004ef0  00014ef0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004ef4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000086c4  2000000c  08004f00  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200086d0  08004f00  000286d0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000bd7a  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002493  00000000  00000000  0002bdf2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c88  00000000  00000000  0002e288  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000992  00000000  00000000  0002ef10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00019ed8  00000000  00000000  0002f8a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000f511  00000000  00000000  0004977a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000965b9  00000000  00000000  00058c8b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003264  00000000  00000000  000ef244  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000051  00000000  00000000  000f24a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	2000000c 	.word	0x2000000c
 8000200:	00000000 	.word	0x00000000
 8000204:	08004e1c 	.word	0x08004e1c

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000010 	.word	0x20000010
 8000220:	08004e1c 	.word	0x08004e1c

08000224 <SetModuleColor>:

uint32_t *pBuff;


void SetModuleColor(Module_t *module, uint8_t r, uint8_t g, uint8_t b)
{
 8000224:	b580      	push	{r7, lr}
 8000226:	b084      	sub	sp, #16
 8000228:	af00      	add	r7, sp, #0
 800022a:	6078      	str	r0, [r7, #4]
 800022c:	4608      	mov	r0, r1
 800022e:	4611      	mov	r1, r2
 8000230:	461a      	mov	r2, r3
 8000232:	4603      	mov	r3, r0
 8000234:	70fb      	strb	r3, [r7, #3]
 8000236:	460b      	mov	r3, r1
 8000238:	70bb      	strb	r3, [r7, #2]
 800023a:	4613      	mov	r3, r2
 800023c:	707b      	strb	r3, [r7, #1]
	for(uint8_t i=0; i < PIXEL_NUM_MODULE; i++)
 800023e:	2300      	movs	r3, #0
 8000240:	73fb      	strb	r3, [r7, #15]
 8000242:	e00b      	b.n	800025c <SetModuleColor+0x38>
	{
		SetPixelColor(&module->pixels[i], r, g ,b);
 8000244:	7bfb      	ldrb	r3, [r7, #15]
 8000246:	015b      	lsls	r3, r3, #5
 8000248:	687a      	ldr	r2, [r7, #4]
 800024a:	18d0      	adds	r0, r2, r3
 800024c:	787b      	ldrb	r3, [r7, #1]
 800024e:	78ba      	ldrb	r2, [r7, #2]
 8000250:	78f9      	ldrb	r1, [r7, #3]
 8000252:	f000 f80b 	bl	800026c <SetPixelColor>
	for(uint8_t i=0; i < PIXEL_NUM_MODULE; i++)
 8000256:	7bfb      	ldrb	r3, [r7, #15]
 8000258:	3301      	adds	r3, #1
 800025a:	73fb      	strb	r3, [r7, #15]
 800025c:	7bfb      	ldrb	r3, [r7, #15]
 800025e:	2b03      	cmp	r3, #3
 8000260:	d9f0      	bls.n	8000244 <SetModuleColor+0x20>
	}
}
 8000262:	bf00      	nop
 8000264:	bf00      	nop
 8000266:	3710      	adds	r7, #16
 8000268:	46bd      	mov	sp, r7
 800026a:	bd80      	pop	{r7, pc}

0800026c <SetPixelColor>:
		SetPixelColorP(&module->pixels[i], c);
	}
}

void SetPixelColor(Pixel_t *pixel, uint8_t r, uint8_t g, uint8_t b)
{
 800026c:	b580      	push	{r7, lr}
 800026e:	b084      	sub	sp, #16
 8000270:	af00      	add	r7, sp, #0
 8000272:	6078      	str	r0, [r7, #4]
 8000274:	4608      	mov	r0, r1
 8000276:	4611      	mov	r1, r2
 8000278:	461a      	mov	r2, r3
 800027a:	4603      	mov	r3, r0
 800027c:	70fb      	strb	r3, [r7, #3]
 800027e:	460b      	mov	r3, r1
 8000280:	70bb      	strb	r3, [r7, #2]
 8000282:	4613      	mov	r3, r2
 8000284:	707b      	strb	r3, [r7, #1]
	for(uint8_t i=0; i < LED_NUM_PIXEL; i++)
 8000286:	2300      	movs	r3, #0
 8000288:	73fb      	strb	r3, [r7, #15]
 800028a:	e00b      	b.n	80002a4 <SetPixelColor+0x38>
	{
		SetLedColor(&pixel->leds[i], r, g ,b);
 800028c:	7bfb      	ldrb	r3, [r7, #15]
 800028e:	009b      	lsls	r3, r3, #2
 8000290:	687a      	ldr	r2, [r7, #4]
 8000292:	18d0      	adds	r0, r2, r3
 8000294:	787b      	ldrb	r3, [r7, #1]
 8000296:	78ba      	ldrb	r2, [r7, #2]
 8000298:	78f9      	ldrb	r1, [r7, #3]
 800029a:	f000 f83d 	bl	8000318 <SetLedColor>
	for(uint8_t i=0; i < LED_NUM_PIXEL; i++)
 800029e:	7bfb      	ldrb	r3, [r7, #15]
 80002a0:	3301      	adds	r3, #1
 80002a2:	73fb      	strb	r3, [r7, #15]
 80002a4:	7bfb      	ldrb	r3, [r7, #15]
 80002a6:	2b07      	cmp	r3, #7
 80002a8:	d9f0      	bls.n	800028c <SetPixelColor+0x20>
	}
}
 80002aa:	bf00      	nop
 80002ac:	bf00      	nop
 80002ae:	3710      	adds	r7, #16
 80002b0:	46bd      	mov	sp, r7
 80002b2:	bd80      	pop	{r7, pc}

080002b4 <SetPixelColorP>:

void SetPixelColorP(Pixel_t *pixel, uint8_t c)
{
 80002b4:	b580      	push	{r7, lr}
 80002b6:	b084      	sub	sp, #16
 80002b8:	af00      	add	r7, sp, #0
 80002ba:	6078      	str	r0, [r7, #4]
 80002bc:	460b      	mov	r3, r1
 80002be:	70fb      	strb	r3, [r7, #3]
	for(uint8_t i=0; i < LED_NUM_PIXEL; i++)
 80002c0:	2300      	movs	r3, #0
 80002c2:	73fb      	strb	r3, [r7, #15]
 80002c4:	e00b      	b.n	80002de <SetPixelColorP+0x2a>
	{
		SetLedColorP(&pixel->leds[i], c);
 80002c6:	7bfb      	ldrb	r3, [r7, #15]
 80002c8:	009b      	lsls	r3, r3, #2
 80002ca:	687a      	ldr	r2, [r7, #4]
 80002cc:	4413      	add	r3, r2
 80002ce:	78fa      	ldrb	r2, [r7, #3]
 80002d0:	4611      	mov	r1, r2
 80002d2:	4618      	mov	r0, r3
 80002d4:	f000 f80c 	bl	80002f0 <SetLedColorP>
	for(uint8_t i=0; i < LED_NUM_PIXEL; i++)
 80002d8:	7bfb      	ldrb	r3, [r7, #15]
 80002da:	3301      	adds	r3, #1
 80002dc:	73fb      	strb	r3, [r7, #15]
 80002de:	7bfb      	ldrb	r3, [r7, #15]
 80002e0:	2b07      	cmp	r3, #7
 80002e2:	d9f0      	bls.n	80002c6 <SetPixelColorP+0x12>
	}
}
 80002e4:	bf00      	nop
 80002e6:	bf00      	nop
 80002e8:	3710      	adds	r7, #16
 80002ea:	46bd      	mov	sp, r7
 80002ec:	bd80      	pop	{r7, pc}
	...

080002f0 <SetLedColorP>:

void SetLedColorP(LedRGB_t *led, uint8_t c)
{
 80002f0:	b480      	push	{r7}
 80002f2:	b083      	sub	sp, #12
 80002f4:	af00      	add	r7, sp, #0
 80002f6:	6078      	str	r0, [r7, #4]
 80002f8:	460b      	mov	r3, r1
 80002fa:	70fb      	strb	r3, [r7, #3]
	led->data = colors[c];
 80002fc:	78fb      	ldrb	r3, [r7, #3]
 80002fe:	4a05      	ldr	r2, [pc, #20]	; (8000314 <SetLedColorP+0x24>)
 8000300:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000304:	687b      	ldr	r3, [r7, #4]
 8000306:	601a      	str	r2, [r3, #0]
	led->color.r >>= 1;
	led->color.g >>= 1;
	led->color.b >>= 1;

#endif
}
 8000308:	bf00      	nop
 800030a:	370c      	adds	r7, #12
 800030c:	46bd      	mov	sp, r7
 800030e:	bc80      	pop	{r7}
 8000310:	4770      	bx	lr
 8000312:	bf00      	nop
 8000314:	08004e34 	.word	0x08004e34

08000318 <SetLedColor>:

void SetLedColor(LedRGB_t *led, uint8_t r, uint8_t g, uint8_t b)
{
 8000318:	b480      	push	{r7}
 800031a:	b083      	sub	sp, #12
 800031c:	af00      	add	r7, sp, #0
 800031e:	6078      	str	r0, [r7, #4]
 8000320:	4608      	mov	r0, r1
 8000322:	4611      	mov	r1, r2
 8000324:	461a      	mov	r2, r3
 8000326:	4603      	mov	r3, r0
 8000328:	70fb      	strb	r3, [r7, #3]
 800032a:	460b      	mov	r3, r1
 800032c:	70bb      	strb	r3, [r7, #2]
 800032e:	4613      	mov	r3, r2
 8000330:	707b      	strb	r3, [r7, #1]
	led->color.r = r;
 8000332:	687b      	ldr	r3, [r7, #4]
 8000334:	78fa      	ldrb	r2, [r7, #3]
 8000336:	705a      	strb	r2, [r3, #1]
	led->color.g = g;
 8000338:	687b      	ldr	r3, [r7, #4]
 800033a:	78ba      	ldrb	r2, [r7, #2]
 800033c:	709a      	strb	r2, [r3, #2]
	led->color.b = b;
 800033e:	687b      	ldr	r3, [r7, #4]
 8000340:	787a      	ldrb	r2, [r7, #1]
 8000342:	701a      	strb	r2, [r3, #0]
	led->color.r >>= 1;
	led->color.g >>= 1;
	led->color.b >>= 1;

#endif
}
 8000344:	bf00      	nop
 8000346:	370c      	adds	r7, #12
 8000348:	46bd      	mov	sp, r7
 800034a:	bc80      	pop	{r7}
 800034c:	4770      	bx	lr

0800034e <InitModule>:

void InitModule(Module_t *module, TIM_HandleTypeDef *htim, uint32_t channel)
{
 800034e:	b580      	push	{r7, lr}
 8000350:	b084      	sub	sp, #16
 8000352:	af00      	add	r7, sp, #0
 8000354:	60f8      	str	r0, [r7, #12]
 8000356:	60b9      	str	r1, [r7, #8]
 8000358:	607a      	str	r2, [r7, #4]
	/*for(uint8_t i = 0; i < LED_DMA_BUFF_SIZE; i++)
	{
		module->dmaBuffer[0] = 0;
	}*/
	module->htim = htim;
 800035a:	68fb      	ldr	r3, [r7, #12]
 800035c:	68ba      	ldr	r2, [r7, #8]
 800035e:	f8c3 2c84 	str.w	r2, [r3, #3204]	; 0xc84
	module->Channel = channel;
 8000362:	68fb      	ldr	r3, [r7, #12]
 8000364:	687a      	ldr	r2, [r7, #4]
 8000366:	f8c3 2c88 	str.w	r2, [r3, #3208]	; 0xc88
	module->status = MODULE_STATUS_OK;
 800036a:	68fb      	ldr	r3, [r7, #12]
 800036c:	2201      	movs	r2, #1
 800036e:	f883 2c8c 	strb.w	r2, [r3, #3212]	; 0xc8c
	SetModuleColor(module, 0, 0, 0);
 8000372:	2300      	movs	r3, #0
 8000374:	2200      	movs	r2, #0
 8000376:	2100      	movs	r1, #0
 8000378:	68f8      	ldr	r0, [r7, #12]
 800037a:	f7ff ff53 	bl	8000224 <SetModuleColor>
}
 800037e:	bf00      	nop
 8000380:	3710      	adds	r7, #16
 8000382:	46bd      	mov	sp, r7
 8000384:	bd80      	pop	{r7, pc}
	...

08000388 <UpdateModuleColor>:

void UpdateModuleColor(Module_t *module)
{
 8000388:	b580      	push	{r7, lr}
 800038a:	b084      	sub	sp, #16
 800038c:	af00      	add	r7, sp, #0
 800038e:	6078      	str	r0, [r7, #4]
	 module->status = MODULE_STATUS_UPDATING;
 8000390:	687b      	ldr	r3, [r7, #4]
 8000392:	2202      	movs	r2, #2
 8000394:	f883 2c8c 	strb.w	r2, [r3, #3212]	; 0xc8c
     pBuff = module->dmaBuffer;
 8000398:	687b      	ldr	r3, [r7, #4]
 800039a:	3380      	adds	r3, #128	; 0x80
 800039c:	4a26      	ldr	r2, [pc, #152]	; (8000438 <UpdateModuleColor+0xb0>)
 800039e:	6013      	str	r3, [r2, #0]
     for(uint8_t i = 0; i < PIXEL_NUM_MODULE; i++)
 80003a0:	2300      	movs	r3, #0
 80003a2:	73fb      	strb	r3, [r7, #15]
 80003a4:	e030      	b.n	8000408 <UpdateModuleColor+0x80>
     {
    	 for (uint8_t j = 0; j < LED_NUM_PIXEL; j++)
 80003a6:	2300      	movs	r3, #0
 80003a8:	73bb      	strb	r3, [r7, #14]
 80003aa:	e027      	b.n	80003fc <UpdateModuleColor+0x74>
    	 {
    		 for (int k = LED_BIT - 1; k >= 0; k--)
 80003ac:	2317      	movs	r3, #23
 80003ae:	60bb      	str	r3, [r7, #8]
 80003b0:	e01e      	b.n	80003f0 <UpdateModuleColor+0x68>
    		 {
    			 if ((module->pixels[i].leds[j].data >> k) & 0x01)
 80003b2:	7bf9      	ldrb	r1, [r7, #15]
 80003b4:	7bba      	ldrb	r2, [r7, #14]
 80003b6:	687b      	ldr	r3, [r7, #4]
 80003b8:	00c9      	lsls	r1, r1, #3
 80003ba:	440a      	add	r2, r1
 80003bc:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80003c0:	68bb      	ldr	r3, [r7, #8]
 80003c2:	fa22 f303 	lsr.w	r3, r2, r3
 80003c6:	f003 0301 	and.w	r3, r3, #1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d004      	beq.n	80003d8 <UpdateModuleColor+0x50>
    			 {
    				 *pBuff = LED_ONE;
 80003ce:	4b1a      	ldr	r3, [pc, #104]	; (8000438 <UpdateModuleColor+0xb0>)
 80003d0:	681b      	ldr	r3, [r3, #0]
 80003d2:	222b      	movs	r2, #43	; 0x2b
 80003d4:	601a      	str	r2, [r3, #0]
 80003d6:	e003      	b.n	80003e0 <UpdateModuleColor+0x58>
    			 }
    			 else
    			 {
    				 *pBuff = LED_ZERO;
 80003d8:	4b17      	ldr	r3, [pc, #92]	; (8000438 <UpdateModuleColor+0xb0>)
 80003da:	681b      	ldr	r3, [r3, #0]
 80003dc:	2216      	movs	r2, #22
 80003de:	601a      	str	r2, [r3, #0]
    			 }
    			 pBuff++;
 80003e0:	4b15      	ldr	r3, [pc, #84]	; (8000438 <UpdateModuleColor+0xb0>)
 80003e2:	681b      	ldr	r3, [r3, #0]
 80003e4:	3304      	adds	r3, #4
 80003e6:	4a14      	ldr	r2, [pc, #80]	; (8000438 <UpdateModuleColor+0xb0>)
 80003e8:	6013      	str	r3, [r2, #0]
    		 for (int k = LED_BIT - 1; k >= 0; k--)
 80003ea:	68bb      	ldr	r3, [r7, #8]
 80003ec:	3b01      	subs	r3, #1
 80003ee:	60bb      	str	r3, [r7, #8]
 80003f0:	68bb      	ldr	r3, [r7, #8]
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	dadd      	bge.n	80003b2 <UpdateModuleColor+0x2a>
    	 for (uint8_t j = 0; j < LED_NUM_PIXEL; j++)
 80003f6:	7bbb      	ldrb	r3, [r7, #14]
 80003f8:	3301      	adds	r3, #1
 80003fa:	73bb      	strb	r3, [r7, #14]
 80003fc:	7bbb      	ldrb	r3, [r7, #14]
 80003fe:	2b07      	cmp	r3, #7
 8000400:	d9d4      	bls.n	80003ac <UpdateModuleColor+0x24>
     for(uint8_t i = 0; i < PIXEL_NUM_MODULE; i++)
 8000402:	7bfb      	ldrb	r3, [r7, #15]
 8000404:	3301      	adds	r3, #1
 8000406:	73fb      	strb	r3, [r7, #15]
 8000408:	7bfb      	ldrb	r3, [r7, #15]
 800040a:	2b03      	cmp	r3, #3
 800040c:	d9cb      	bls.n	80003a6 <UpdateModuleColor+0x1e>
    		 }
    	 }
     }
     module->dmaBuffer[LED_DMA_BUFF_SIZE - 1] = 0; // last element must be 0!
 800040e:	687b      	ldr	r3, [r7, #4]
 8000410:	2200      	movs	r2, #0
 8000412:	f8c3 2c80 	str.w	r2, [r3, #3200]	; 0xc80

     HAL_TIM_PWM_Start_DMA(module->htim, module->Channel, module->dmaBuffer, LED_DMA_BUFF_SIZE);
 8000416:	687b      	ldr	r3, [r7, #4]
 8000418:	f8d3 0c84 	ldr.w	r0, [r3, #3204]	; 0xc84
 800041c:	687b      	ldr	r3, [r7, #4]
 800041e:	f8d3 1c88 	ldr.w	r1, [r3, #3208]	; 0xc88
 8000422:	687b      	ldr	r3, [r7, #4]
 8000424:	f103 0280 	add.w	r2, r3, #128	; 0x80
 8000428:	f240 3301 	movw	r3, #769	; 0x301
 800042c:	f003 fafe 	bl	8003a2c <HAL_TIM_PWM_Start_DMA>
}
 8000430:	bf00      	nop
 8000432:	3710      	adds	r7, #16
 8000434:	46bd      	mov	sp, r7
 8000436:	bd80      	pop	{r7, pc}
 8000438:	20000028 	.word	0x20000028

0800043c <UpdateModule>:


void UpdateModule(Module_t *module)
{
 800043c:	b480      	push	{r7}
 800043e:	b083      	sub	sp, #12
 8000440:	af00      	add	r7, sp, #0
 8000442:	6078      	str	r0, [r7, #4]
	if(module->status !=MODULE_STATUS_UPDATING){
 8000444:	687b      	ldr	r3, [r7, #4]
 8000446:	f893 3c8c 	ldrb.w	r3, [r3, #3212]	; 0xc8c
 800044a:	2b02      	cmp	r3, #2
 800044c:	d003      	beq.n	8000456 <UpdateModule+0x1a>
	module->status = MODULE_STATUS_NEEDS_UPDATE;
 800044e:	687b      	ldr	r3, [r7, #4]
 8000450:	2203      	movs	r2, #3
 8000452:	f883 2c8c 	strb.w	r2, [r3, #3212]	; 0xc8c
	}
}
 8000456:	bf00      	nop
 8000458:	370c      	adds	r7, #12
 800045a:	46bd      	mov	sp, r7
 800045c:	bc80      	pop	{r7}
 800045e:	4770      	bx	lr

08000460 <MX_CAN_Init>:

CAN_HandleTypeDef hcan;

/* CAN init function */
void MX_CAN_Init(void)
{
 8000460:	b580      	push	{r7, lr}
 8000462:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8000464:	4b17      	ldr	r3, [pc, #92]	; (80004c4 <MX_CAN_Init+0x64>)
 8000466:	4a18      	ldr	r2, [pc, #96]	; (80004c8 <MX_CAN_Init+0x68>)
 8000468:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 9;
 800046a:	4b16      	ldr	r3, [pc, #88]	; (80004c4 <MX_CAN_Init+0x64>)
 800046c:	2209      	movs	r2, #9
 800046e:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000470:	4b14      	ldr	r3, [pc, #80]	; (80004c4 <MX_CAN_Init+0x64>)
 8000472:	2200      	movs	r2, #0
 8000474:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000476:	4b13      	ldr	r3, [pc, #76]	; (80004c4 <MX_CAN_Init+0x64>)
 8000478:	2200      	movs	r2, #0
 800047a:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_3TQ;
 800047c:	4b11      	ldr	r3, [pc, #68]	; (80004c4 <MX_CAN_Init+0x64>)
 800047e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000482:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_4TQ;
 8000484:	4b0f      	ldr	r3, [pc, #60]	; (80004c4 <MX_CAN_Init+0x64>)
 8000486:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 800048a:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 800048c:	4b0d      	ldr	r3, [pc, #52]	; (80004c4 <MX_CAN_Init+0x64>)
 800048e:	2200      	movs	r2, #0
 8000490:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8000492:	4b0c      	ldr	r3, [pc, #48]	; (80004c4 <MX_CAN_Init+0x64>)
 8000494:	2200      	movs	r2, #0
 8000496:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000498:	4b0a      	ldr	r3, [pc, #40]	; (80004c4 <MX_CAN_Init+0x64>)
 800049a:	2200      	movs	r2, #0
 800049c:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 800049e:	4b09      	ldr	r3, [pc, #36]	; (80004c4 <MX_CAN_Init+0x64>)
 80004a0:	2200      	movs	r2, #0
 80004a2:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 80004a4:	4b07      	ldr	r3, [pc, #28]	; (80004c4 <MX_CAN_Init+0x64>)
 80004a6:	2200      	movs	r2, #0
 80004a8:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 80004aa:	4b06      	ldr	r3, [pc, #24]	; (80004c4 <MX_CAN_Init+0x64>)
 80004ac:	2200      	movs	r2, #0
 80004ae:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80004b0:	4804      	ldr	r0, [pc, #16]	; (80004c4 <MX_CAN_Init+0x64>)
 80004b2:	f001 fd6b 	bl	8001f8c <HAL_CAN_Init>
 80004b6:	4603      	mov	r3, r0
 80004b8:	2b00      	cmp	r3, #0
 80004ba:	d001      	beq.n	80004c0 <MX_CAN_Init+0x60>
  {
    Error_Handler();
 80004bc:	f000 fdce 	bl	800105c <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 80004c0:	bf00      	nop
 80004c2:	bd80      	pop	{r7, pc}
 80004c4:	2000002c 	.word	0x2000002c
 80004c8:	40006400 	.word	0x40006400

080004cc <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b08a      	sub	sp, #40	; 0x28
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004d4:	f107 0314 	add.w	r3, r7, #20
 80004d8:	2200      	movs	r2, #0
 80004da:	601a      	str	r2, [r3, #0]
 80004dc:	605a      	str	r2, [r3, #4]
 80004de:	609a      	str	r2, [r3, #8]
 80004e0:	60da      	str	r2, [r3, #12]
  if(canHandle->Instance==CAN1)
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	681b      	ldr	r3, [r3, #0]
 80004e6:	4a24      	ldr	r2, [pc, #144]	; (8000578 <HAL_CAN_MspInit+0xac>)
 80004e8:	4293      	cmp	r3, r2
 80004ea:	d141      	bne.n	8000570 <HAL_CAN_MspInit+0xa4>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80004ec:	4b23      	ldr	r3, [pc, #140]	; (800057c <HAL_CAN_MspInit+0xb0>)
 80004ee:	69db      	ldr	r3, [r3, #28]
 80004f0:	4a22      	ldr	r2, [pc, #136]	; (800057c <HAL_CAN_MspInit+0xb0>)
 80004f2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80004f6:	61d3      	str	r3, [r2, #28]
 80004f8:	4b20      	ldr	r3, [pc, #128]	; (800057c <HAL_CAN_MspInit+0xb0>)
 80004fa:	69db      	ldr	r3, [r3, #28]
 80004fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000500:	613b      	str	r3, [r7, #16]
 8000502:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000504:	4b1d      	ldr	r3, [pc, #116]	; (800057c <HAL_CAN_MspInit+0xb0>)
 8000506:	699b      	ldr	r3, [r3, #24]
 8000508:	4a1c      	ldr	r2, [pc, #112]	; (800057c <HAL_CAN_MspInit+0xb0>)
 800050a:	f043 0320 	orr.w	r3, r3, #32
 800050e:	6193      	str	r3, [r2, #24]
 8000510:	4b1a      	ldr	r3, [pc, #104]	; (800057c <HAL_CAN_MspInit+0xb0>)
 8000512:	699b      	ldr	r3, [r3, #24]
 8000514:	f003 0320 	and.w	r3, r3, #32
 8000518:	60fb      	str	r3, [r7, #12]
 800051a:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PD0     ------> CAN_RX
    PD1     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800051c:	2301      	movs	r3, #1
 800051e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000520:	2300      	movs	r3, #0
 8000522:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000524:	2300      	movs	r3, #0
 8000526:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000528:	f107 0314 	add.w	r3, r7, #20
 800052c:	4619      	mov	r1, r3
 800052e:	4814      	ldr	r0, [pc, #80]	; (8000580 <HAL_CAN_MspInit+0xb4>)
 8000530:	f002 fbc2 	bl	8002cb8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000534:	2302      	movs	r3, #2
 8000536:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000538:	2302      	movs	r3, #2
 800053a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800053c:	2303      	movs	r3, #3
 800053e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000540:	f107 0314 	add.w	r3, r7, #20
 8000544:	4619      	mov	r1, r3
 8000546:	480e      	ldr	r0, [pc, #56]	; (8000580 <HAL_CAN_MspInit+0xb4>)
 8000548:	f002 fbb6 	bl	8002cb8 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_CAN1_3();
 800054c:	4b0d      	ldr	r3, [pc, #52]	; (8000584 <HAL_CAN_MspInit+0xb8>)
 800054e:	685b      	ldr	r3, [r3, #4]
 8000550:	627b      	str	r3, [r7, #36]	; 0x24
 8000552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000554:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 8000558:	627b      	str	r3, [r7, #36]	; 0x24
 800055a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800055c:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000560:	627b      	str	r3, [r7, #36]	; 0x24
 8000562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000564:	f443 43c0 	orr.w	r3, r3, #24576	; 0x6000
 8000568:	627b      	str	r3, [r7, #36]	; 0x24
 800056a:	4a06      	ldr	r2, [pc, #24]	; (8000584 <HAL_CAN_MspInit+0xb8>)
 800056c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800056e:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8000570:	bf00      	nop
 8000572:	3728      	adds	r7, #40	; 0x28
 8000574:	46bd      	mov	sp, r7
 8000576:	bd80      	pop	{r7, pc}
 8000578:	40006400 	.word	0x40006400
 800057c:	40021000 	.word	0x40021000
 8000580:	40011400 	.word	0x40011400
 8000584:	40010000 	.word	0x40010000

08000588 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b082      	sub	sp, #8
 800058c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800058e:	4b36      	ldr	r3, [pc, #216]	; (8000668 <MX_DMA_Init+0xe0>)
 8000590:	695b      	ldr	r3, [r3, #20]
 8000592:	4a35      	ldr	r2, [pc, #212]	; (8000668 <MX_DMA_Init+0xe0>)
 8000594:	f043 0301 	orr.w	r3, r3, #1
 8000598:	6153      	str	r3, [r2, #20]
 800059a:	4b33      	ldr	r3, [pc, #204]	; (8000668 <MX_DMA_Init+0xe0>)
 800059c:	695b      	ldr	r3, [r3, #20]
 800059e:	f003 0301 	and.w	r3, r3, #1
 80005a2:	607b      	str	r3, [r7, #4]
 80005a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80005a6:	4b30      	ldr	r3, [pc, #192]	; (8000668 <MX_DMA_Init+0xe0>)
 80005a8:	695b      	ldr	r3, [r3, #20]
 80005aa:	4a2f      	ldr	r2, [pc, #188]	; (8000668 <MX_DMA_Init+0xe0>)
 80005ac:	f043 0302 	orr.w	r3, r3, #2
 80005b0:	6153      	str	r3, [r2, #20]
 80005b2:	4b2d      	ldr	r3, [pc, #180]	; (8000668 <MX_DMA_Init+0xe0>)
 80005b4:	695b      	ldr	r3, [r3, #20]
 80005b6:	f003 0302 	and.w	r3, r3, #2
 80005ba:	603b      	str	r3, [r7, #0]
 80005bc:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80005be:	2200      	movs	r2, #0
 80005c0:	2100      	movs	r1, #0
 80005c2:	200b      	movs	r0, #11
 80005c4:	f001 fef9 	bl	80023ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80005c8:	200b      	movs	r0, #11
 80005ca:	f001 ff12 	bl	80023f2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80005ce:	2200      	movs	r2, #0
 80005d0:	2100      	movs	r1, #0
 80005d2:	200c      	movs	r0, #12
 80005d4:	f001 fef1 	bl	80023ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80005d8:	200c      	movs	r0, #12
 80005da:	f001 ff0a 	bl	80023f2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 80005de:	2200      	movs	r2, #0
 80005e0:	2100      	movs	r1, #0
 80005e2:	200d      	movs	r0, #13
 80005e4:	f001 fee9 	bl	80023ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80005e8:	200d      	movs	r0, #13
 80005ea:	f001 ff02 	bl	80023f2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 80005ee:	2200      	movs	r2, #0
 80005f0:	2100      	movs	r1, #0
 80005f2:	200e      	movs	r0, #14
 80005f4:	f001 fee1 	bl	80023ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 80005f8:	200e      	movs	r0, #14
 80005fa:	f001 fefa 	bl	80023f2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 80005fe:	2200      	movs	r2, #0
 8000600:	2100      	movs	r1, #0
 8000602:	200f      	movs	r0, #15
 8000604:	f001 fed9 	bl	80023ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000608:	200f      	movs	r0, #15
 800060a:	f001 fef2 	bl	80023f2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 800060e:	2200      	movs	r2, #0
 8000610:	2100      	movs	r1, #0
 8000612:	2010      	movs	r0, #16
 8000614:	f001 fed1 	bl	80023ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8000618:	2010      	movs	r0, #16
 800061a:	f001 feea 	bl	80023f2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 800061e:	2200      	movs	r2, #0
 8000620:	2100      	movs	r1, #0
 8000622:	2011      	movs	r0, #17
 8000624:	f001 fec9 	bl	80023ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8000628:	2011      	movs	r0, #17
 800062a:	f001 fee2 	bl	80023f2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel1_IRQn, 0, 0);
 800062e:	2200      	movs	r2, #0
 8000630:	2100      	movs	r1, #0
 8000632:	2038      	movs	r0, #56	; 0x38
 8000634:	f001 fec1 	bl	80023ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel1_IRQn);
 8000638:	2038      	movs	r0, #56	; 0x38
 800063a:	f001 feda 	bl	80023f2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel2_IRQn, 0, 0);
 800063e:	2200      	movs	r2, #0
 8000640:	2100      	movs	r1, #0
 8000642:	2039      	movs	r0, #57	; 0x39
 8000644:	f001 feb9 	bl	80023ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel2_IRQn);
 8000648:	2039      	movs	r0, #57	; 0x39
 800064a:	f001 fed2 	bl	80023f2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel3_IRQn, 0, 0);
 800064e:	2200      	movs	r2, #0
 8000650:	2100      	movs	r1, #0
 8000652:	203a      	movs	r0, #58	; 0x3a
 8000654:	f001 feb1 	bl	80023ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel3_IRQn);
 8000658:	203a      	movs	r0, #58	; 0x3a
 800065a:	f001 feca 	bl	80023f2 <HAL_NVIC_EnableIRQ>

}
 800065e:	bf00      	nop
 8000660:	3708      	adds	r7, #8
 8000662:	46bd      	mov	sp, r7
 8000664:	bd80      	pop	{r7, pc}
 8000666:	bf00      	nop
 8000668:	40021000 	.word	0x40021000

0800066c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b08c      	sub	sp, #48	; 0x30
 8000670:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000672:	f107 0320 	add.w	r3, r7, #32
 8000676:	2200      	movs	r2, #0
 8000678:	601a      	str	r2, [r3, #0]
 800067a:	605a      	str	r2, [r3, #4]
 800067c:	609a      	str	r2, [r3, #8]
 800067e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000680:	4b6d      	ldr	r3, [pc, #436]	; (8000838 <MX_GPIO_Init+0x1cc>)
 8000682:	699b      	ldr	r3, [r3, #24]
 8000684:	4a6c      	ldr	r2, [pc, #432]	; (8000838 <MX_GPIO_Init+0x1cc>)
 8000686:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800068a:	6193      	str	r3, [r2, #24]
 800068c:	4b6a      	ldr	r3, [pc, #424]	; (8000838 <MX_GPIO_Init+0x1cc>)
 800068e:	699b      	ldr	r3, [r3, #24]
 8000690:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000694:	61fb      	str	r3, [r7, #28]
 8000696:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000698:	4b67      	ldr	r3, [pc, #412]	; (8000838 <MX_GPIO_Init+0x1cc>)
 800069a:	699b      	ldr	r3, [r3, #24]
 800069c:	4a66      	ldr	r2, [pc, #408]	; (8000838 <MX_GPIO_Init+0x1cc>)
 800069e:	f043 0310 	orr.w	r3, r3, #16
 80006a2:	6193      	str	r3, [r2, #24]
 80006a4:	4b64      	ldr	r3, [pc, #400]	; (8000838 <MX_GPIO_Init+0x1cc>)
 80006a6:	699b      	ldr	r3, [r3, #24]
 80006a8:	f003 0310 	and.w	r3, r3, #16
 80006ac:	61bb      	str	r3, [r7, #24]
 80006ae:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80006b0:	4b61      	ldr	r3, [pc, #388]	; (8000838 <MX_GPIO_Init+0x1cc>)
 80006b2:	699b      	ldr	r3, [r3, #24]
 80006b4:	4a60      	ldr	r2, [pc, #384]	; (8000838 <MX_GPIO_Init+0x1cc>)
 80006b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006ba:	6193      	str	r3, [r2, #24]
 80006bc:	4b5e      	ldr	r3, [pc, #376]	; (8000838 <MX_GPIO_Init+0x1cc>)
 80006be:	699b      	ldr	r3, [r3, #24]
 80006c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006c4:	617b      	str	r3, [r7, #20]
 80006c6:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006c8:	4b5b      	ldr	r3, [pc, #364]	; (8000838 <MX_GPIO_Init+0x1cc>)
 80006ca:	699b      	ldr	r3, [r3, #24]
 80006cc:	4a5a      	ldr	r2, [pc, #360]	; (8000838 <MX_GPIO_Init+0x1cc>)
 80006ce:	f043 0304 	orr.w	r3, r3, #4
 80006d2:	6193      	str	r3, [r2, #24]
 80006d4:	4b58      	ldr	r3, [pc, #352]	; (8000838 <MX_GPIO_Init+0x1cc>)
 80006d6:	699b      	ldr	r3, [r3, #24]
 80006d8:	f003 0304 	and.w	r3, r3, #4
 80006dc:	613b      	str	r3, [r7, #16]
 80006de:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006e0:	4b55      	ldr	r3, [pc, #340]	; (8000838 <MX_GPIO_Init+0x1cc>)
 80006e2:	699b      	ldr	r3, [r3, #24]
 80006e4:	4a54      	ldr	r2, [pc, #336]	; (8000838 <MX_GPIO_Init+0x1cc>)
 80006e6:	f043 0308 	orr.w	r3, r3, #8
 80006ea:	6193      	str	r3, [r2, #24]
 80006ec:	4b52      	ldr	r3, [pc, #328]	; (8000838 <MX_GPIO_Init+0x1cc>)
 80006ee:	699b      	ldr	r3, [r3, #24]
 80006f0:	f003 0308 	and.w	r3, r3, #8
 80006f4:	60fb      	str	r3, [r7, #12]
 80006f6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80006f8:	4b4f      	ldr	r3, [pc, #316]	; (8000838 <MX_GPIO_Init+0x1cc>)
 80006fa:	699b      	ldr	r3, [r3, #24]
 80006fc:	4a4e      	ldr	r2, [pc, #312]	; (8000838 <MX_GPIO_Init+0x1cc>)
 80006fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000702:	6193      	str	r3, [r2, #24]
 8000704:	4b4c      	ldr	r3, [pc, #304]	; (8000838 <MX_GPIO_Init+0x1cc>)
 8000706:	699b      	ldr	r3, [r3, #24]
 8000708:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800070c:	60bb      	str	r3, [r7, #8]
 800070e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000710:	4b49      	ldr	r3, [pc, #292]	; (8000838 <MX_GPIO_Init+0x1cc>)
 8000712:	699b      	ldr	r3, [r3, #24]
 8000714:	4a48      	ldr	r2, [pc, #288]	; (8000838 <MX_GPIO_Init+0x1cc>)
 8000716:	f043 0320 	orr.w	r3, r3, #32
 800071a:	6193      	str	r3, [r2, #24]
 800071c:	4b46      	ldr	r3, [pc, #280]	; (8000838 <MX_GPIO_Init+0x1cc>)
 800071e:	699b      	ldr	r3, [r3, #24]
 8000720:	f003 0320 	and.w	r3, r3, #32
 8000724:	607b      	str	r3, [r7, #4]
 8000726:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8000728:	2200      	movs	r2, #0
 800072a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800072e:	4843      	ldr	r0, [pc, #268]	; (800083c <MX_GPIO_Init+0x1d0>)
 8000730:	f002 fc6d 	bl	800300e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 8000734:	2200      	movs	r2, #0
 8000736:	2101      	movs	r1, #1
 8000738:	4841      	ldr	r0, [pc, #260]	; (8000840 <MX_GPIO_Init+0x1d4>)
 800073a:	f002 fc68 	bl	800300e <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin PEPin
                           PEPin */
  GPIO_InitStruct.Pin = R25_1_Pin|R25_2_Pin|R24_1_Pin|R24_2_Pin
 800073e:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 8000742:	623b      	str	r3, [r7, #32]
                          |R10_2_Pin|R10_1_Pin|R9_2_Pin|R9_1_Pin
                          |R8_2_Pin|R8_1_Pin|R40_1_Pin|R40_2_Pin
                          |R7_2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000744:	2300      	movs	r3, #0
 8000746:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000748:	2301      	movs	r3, #1
 800074a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800074c:	f107 0320 	add.w	r3, r7, #32
 8000750:	4619      	mov	r1, r3
 8000752:	483c      	ldr	r0, [pc, #240]	; (8000844 <MX_GPIO_Init+0x1d8>)
 8000754:	f002 fab0 	bl	8002cb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED1_Pin;
 8000758:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800075c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800075e:	2301      	movs	r3, #1
 8000760:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000762:	2300      	movs	r3, #0
 8000764:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000766:	2302      	movs	r3, #2
 8000768:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 800076a:	f107 0320 	add.w	r3, r7, #32
 800076e:	4619      	mov	r1, r3
 8000770:	4832      	ldr	r0, [pc, #200]	; (800083c <MX_GPIO_Init+0x1d0>)
 8000772:	f002 faa1 	bl	8002cb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED2_Pin;
 8000776:	2301      	movs	r3, #1
 8000778:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800077a:	2301      	movs	r3, #1
 800077c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800077e:	2300      	movs	r3, #0
 8000780:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000782:	2302      	movs	r3, #2
 8000784:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(LED2_GPIO_Port, &GPIO_InitStruct);
 8000786:	f107 0320 	add.w	r3, r7, #32
 800078a:	4619      	mov	r1, r3
 800078c:	482c      	ldr	r0, [pc, #176]	; (8000840 <MX_GPIO_Init+0x1d4>)
 800078e:	f002 fa93 	bl	8002cb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin PFPin PFPin
                           PFPin PFPin PFPin PFPin
                           PFPin PFPin PFPin PFPin
                           PFPin PFPin PFPin */
  GPIO_InitStruct.Pin = R23_1_Pin|R23_2_Pin|R22_1_Pin|R22_2_Pin
 8000792:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8000796:	623b      	str	r3, [r7, #32]
                          |R21_1_Pin|R21_2_Pin|R17_1_Pin|R17_2_Pin
                          |R18_1_Pin|R18_2_Pin|R13_1_Pin|R12_2_Pin
                          |R16_1_Pin|R16_2_Pin|R12_1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000798:	2300      	movs	r3, #0
 800079a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800079c:	2301      	movs	r3, #1
 800079e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80007a0:	f107 0320 	add.w	r3, r7, #32
 80007a4:	4619      	mov	r1, r3
 80007a6:	4826      	ldr	r0, [pc, #152]	; (8000840 <MX_GPIO_Init+0x1d4>)
 80007a8:	f002 fa86 	bl	8002cb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin PCPin PCPin PCPin
                           PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = R19_1_Pin|R19_2_Pin|R20_1_Pin|R20_2_Pin
 80007ac:	f641 53bf 	movw	r3, #7615	; 0x1dbf
 80007b0:	623b      	str	r3, [r7, #32]
                          |R15_1_Pin|R15_2_Pin|R37_2_Pin|R37_1_Pin
                          |R35_1_Pin|R34_2_Pin|R34_1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007b2:	2300      	movs	r3, #0
 80007b4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80007b6:	2301      	movs	r3, #1
 80007b8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007ba:	f107 0320 	add.w	r3, r7, #32
 80007be:	4619      	mov	r1, r3
 80007c0:	481e      	ldr	r0, [pc, #120]	; (800083c <MX_GPIO_Init+0x1d0>)
 80007c2:	f002 fa79 	bl	8002cb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin */
  GPIO_InitStruct.Pin = R14_2_Pin|R14_1_Pin|R36_2_Pin|R36_1_Pin
 80007c6:	f248 6330 	movw	r3, #34352	; 0x8630
 80007ca:	623b      	str	r3, [r7, #32]
                          |R35_2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007cc:	2300      	movs	r3, #0
 80007ce:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80007d0:	2301      	movs	r3, #1
 80007d2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007d4:	f107 0320 	add.w	r3, r7, #32
 80007d8:	4619      	mov	r1, r3
 80007da:	481b      	ldr	r0, [pc, #108]	; (8000848 <MX_GPIO_Init+0x1dc>)
 80007dc:	f002 fa6c 	bl	8002cb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin PBPin
                           PBPin PBPin */
  GPIO_InitStruct.Pin = R13_2_Pin|R7_1_Pin|R6_2_Pin|R4_1_Pin
 80007e0:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 80007e4:	623b      	str	r3, [r7, #32]
                          |R4_2_Pin|R3_1_Pin|R3_2_Pin|R29_1_Pin
                          |R28_2_Pin|R28_1_Pin|R27_2_Pin|R27_1_Pin
                          |R26_2_Pin|R26_1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007e6:	2300      	movs	r3, #0
 80007e8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80007ea:	2301      	movs	r3, #1
 80007ec:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007ee:	f107 0320 	add.w	r3, r7, #32
 80007f2:	4619      	mov	r1, r3
 80007f4:	4815      	ldr	r0, [pc, #84]	; (800084c <MX_GPIO_Init+0x1e0>)
 80007f6:	f002 fa5f 	bl	8002cb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin PGPin
                           PGPin PGPin PGPin PGPin
                           PGPin PGPin PGPin PGPin
                           PGPin */
  GPIO_InitStruct.Pin = R11_2_Pin|R11_1_Pin|R5_1_Pin|R5_2_Pin
 80007fa:	f648 73ff 	movw	r3, #36863	; 0x8fff
 80007fe:	623b      	str	r3, [r7, #32]
                          |R6_1_Pin|R39_2_Pin|R39_1_Pin|R38_2_Pin
                          |R38_1_Pin|R31_1_Pin|R30_2_Pin|R30_1_Pin
                          |R29_2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000800:	2300      	movs	r3, #0
 8000802:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000804:	2301      	movs	r3, #1
 8000806:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000808:	f107 0320 	add.w	r3, r7, #32
 800080c:	4619      	mov	r1, r3
 800080e:	4810      	ldr	r0, [pc, #64]	; (8000850 <MX_GPIO_Init+0x1e4>)
 8000810:	f002 fa52 	bl	8002cb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin PDPin PDPin PDPin
                           PDPin */
  GPIO_InitStruct.Pin = R2_1_Pin|R2_2_Pin|R1_2_Pin|R1_1_Pin
 8000814:	f241 73f8 	movw	r3, #6136	; 0x17f8
 8000818:	623b      	str	r3, [r7, #32]
                          |R33_2_Pin|R33_1_Pin|R32_2_Pin|R32_1_Pin
                          |R31_2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800081a:	2300      	movs	r3, #0
 800081c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800081e:	2301      	movs	r3, #1
 8000820:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000822:	f107 0320 	add.w	r3, r7, #32
 8000826:	4619      	mov	r1, r3
 8000828:	480a      	ldr	r0, [pc, #40]	; (8000854 <MX_GPIO_Init+0x1e8>)
 800082a:	f002 fa45 	bl	8002cb8 <HAL_GPIO_Init>

}
 800082e:	bf00      	nop
 8000830:	3730      	adds	r7, #48	; 0x30
 8000832:	46bd      	mov	sp, r7
 8000834:	bd80      	pop	{r7, pc}
 8000836:	bf00      	nop
 8000838:	40021000 	.word	0x40021000
 800083c:	40011000 	.word	0x40011000
 8000840:	40011c00 	.word	0x40011c00
 8000844:	40011800 	.word	0x40011800
 8000848:	40010800 	.word	0x40010800
 800084c:	40010c00 	.word	0x40010c00
 8000850:	40012000 	.word	0x40012000
 8000854:	40011400 	.word	0x40011400

08000858 <HAL_TIM_PWM_PulseFinishedCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b084      	sub	sp, #16
 800085c:	af00      	add	r7, sp, #0
 800085e:	6078      	str	r0, [r7, #4]
	for(uint8_t i = 0; i < MODULE_COUNT; i++)
 8000860:	2300      	movs	r3, #0
 8000862:	73fb      	strb	r3, [r7, #15]
 8000864:	e032      	b.n	80008cc <HAL_TIM_PWM_PulseFinishedCallback+0x74>
	{
		if (modules[i].status==MODULE_STATUS_UPDATING)
 8000866:	7bfb      	ldrb	r3, [r7, #15]
 8000868:	4a1c      	ldr	r2, [pc, #112]	; (80008dc <HAL_TIM_PWM_PulseFinishedCallback+0x84>)
 800086a:	f44f 6149 	mov.w	r1, #3216	; 0xc90
 800086e:	fb01 f303 	mul.w	r3, r1, r3
 8000872:	4413      	add	r3, r2
 8000874:	f603 438c 	addw	r3, r3, #3212	; 0xc8c
 8000878:	781b      	ldrb	r3, [r3, #0]
 800087a:	2b02      	cmp	r3, #2
 800087c:	d123      	bne.n	80008c6 <HAL_TIM_PWM_PulseFinishedCallback+0x6e>
		{
			HAL_TIM_PWM_Stop_DMA(modules[i].htim, modules[i].Channel);
 800087e:	7bfb      	ldrb	r3, [r7, #15]
 8000880:	4a16      	ldr	r2, [pc, #88]	; (80008dc <HAL_TIM_PWM_PulseFinishedCallback+0x84>)
 8000882:	f44f 6149 	mov.w	r1, #3216	; 0xc90
 8000886:	fb01 f303 	mul.w	r3, r1, r3
 800088a:	4413      	add	r3, r2
 800088c:	f603 4384 	addw	r3, r3, #3204	; 0xc84
 8000890:	681a      	ldr	r2, [r3, #0]
 8000892:	7bfb      	ldrb	r3, [r7, #15]
 8000894:	4911      	ldr	r1, [pc, #68]	; (80008dc <HAL_TIM_PWM_PulseFinishedCallback+0x84>)
 8000896:	f44f 6049 	mov.w	r0, #3216	; 0xc90
 800089a:	fb00 f303 	mul.w	r3, r0, r3
 800089e:	440b      	add	r3, r1
 80008a0:	f603 4388 	addw	r3, r3, #3208	; 0xc88
 80008a4:	681b      	ldr	r3, [r3, #0]
 80008a6:	4619      	mov	r1, r3
 80008a8:	4610      	mov	r0, r2
 80008aa:	f003 fa79 	bl	8003da0 <HAL_TIM_PWM_Stop_DMA>
			modules[i].status = MODULE_STATUS_OK;
 80008ae:	7bfb      	ldrb	r3, [r7, #15]
 80008b0:	4a0a      	ldr	r2, [pc, #40]	; (80008dc <HAL_TIM_PWM_PulseFinishedCallback+0x84>)
 80008b2:	f44f 6149 	mov.w	r1, #3216	; 0xc90
 80008b6:	fb01 f303 	mul.w	r3, r1, r3
 80008ba:	4413      	add	r3, r2
 80008bc:	f603 438c 	addw	r3, r3, #3212	; 0xc8c
 80008c0:	2201      	movs	r2, #1
 80008c2:	701a      	strb	r2, [r3, #0]
			break;
 80008c4:	e006      	b.n	80008d4 <HAL_TIM_PWM_PulseFinishedCallback+0x7c>
	for(uint8_t i = 0; i < MODULE_COUNT; i++)
 80008c6:	7bfb      	ldrb	r3, [r7, #15]
 80008c8:	3301      	adds	r3, #1
 80008ca:	73fb      	strb	r3, [r7, #15]
 80008cc:	7bfb      	ldrb	r3, [r7, #15]
 80008ce:	2b09      	cmp	r3, #9
 80008d0:	d9c9      	bls.n	8000866 <HAL_TIM_PWM_PulseFinishedCallback+0xe>
		}
	}
}
 80008d2:	bf00      	nop
 80008d4:	bf00      	nop
 80008d6:	3710      	adds	r7, #16
 80008d8:	46bd      	mov	sp, r7
 80008da:	bd80      	pop	{r7, pc}
 80008dc:	200004b4 	.word	0x200004b4

080008e0 <HAL_TIM_PeriodElapsedCallback>:

// Callback: timer has rolled over
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b084      	sub	sp, #16
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]
  // Check which version of the timer triggered this callback and toggle LED
  if (htim == &htim7 )
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	4a43      	ldr	r2, [pc, #268]	; (80009f8 <HAL_TIM_PeriodElapsedCallback+0x118>)
 80008ec:	4293      	cmp	r3, r2
 80008ee:	d17e      	bne.n	80009ee <HAL_TIM_PeriodElapsedCallback+0x10e>
  {
	  //HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);

	  for(int r=0; r < ROTARY_COUNT; r++)
 80008f0:	2300      	movs	r3, #0
 80008f2:	60fb      	str	r3, [r7, #12]
 80008f4:	e078      	b.n	80009e8 <HAL_TIM_PeriodElapsedCallback+0x108>
	  {
		  if(HAL_GPIO_ReadPin(rotary[r].pin1.GPIO_port, rotary[r].pin1.GPIO_Pin)==GPIO_PIN_SET)
 80008f6:	4941      	ldr	r1, [pc, #260]	; (80009fc <HAL_TIM_PeriodElapsedCallback+0x11c>)
 80008f8:	68fa      	ldr	r2, [r7, #12]
 80008fa:	4613      	mov	r3, r2
 80008fc:	00db      	lsls	r3, r3, #3
 80008fe:	1a9b      	subs	r3, r3, r2
 8000900:	009b      	lsls	r3, r3, #2
 8000902:	440b      	add	r3, r1
 8000904:	3308      	adds	r3, #8
 8000906:	6818      	ldr	r0, [r3, #0]
 8000908:	493c      	ldr	r1, [pc, #240]	; (80009fc <HAL_TIM_PeriodElapsedCallback+0x11c>)
 800090a:	68fa      	ldr	r2, [r7, #12]
 800090c:	4613      	mov	r3, r2
 800090e:	00db      	lsls	r3, r3, #3
 8000910:	1a9b      	subs	r3, r3, r2
 8000912:	009b      	lsls	r3, r3, #2
 8000914:	440b      	add	r3, r1
 8000916:	330c      	adds	r3, #12
 8000918:	881b      	ldrh	r3, [r3, #0]
 800091a:	4619      	mov	r1, r3
 800091c:	f002 fb60 	bl	8002fe0 <HAL_GPIO_ReadPin>
 8000920:	4603      	mov	r3, r0
 8000922:	2b01      	cmp	r3, #1
 8000924:	d109      	bne.n	800093a <HAL_TIM_PeriodElapsedCallback+0x5a>
		  {
			  rotary[r].pinStatus.status.r1 = 1;
 8000926:	4935      	ldr	r1, [pc, #212]	; (80009fc <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8000928:	68fa      	ldr	r2, [r7, #12]
 800092a:	4613      	mov	r3, r2
 800092c:	00db      	lsls	r3, r3, #3
 800092e:	1a9b      	subs	r3, r3, r2
 8000930:	009b      	lsls	r3, r3, #2
 8000932:	440b      	add	r3, r1
 8000934:	2201      	movs	r2, #1
 8000936:	701a      	strb	r2, [r3, #0]
 8000938:	e008      	b.n	800094c <HAL_TIM_PeriodElapsedCallback+0x6c>
		  } else {
			  rotary[r].pinStatus.status.r1 = 0;
 800093a:	4930      	ldr	r1, [pc, #192]	; (80009fc <HAL_TIM_PeriodElapsedCallback+0x11c>)
 800093c:	68fa      	ldr	r2, [r7, #12]
 800093e:	4613      	mov	r3, r2
 8000940:	00db      	lsls	r3, r3, #3
 8000942:	1a9b      	subs	r3, r3, r2
 8000944:	009b      	lsls	r3, r3, #2
 8000946:	440b      	add	r3, r1
 8000948:	2200      	movs	r2, #0
 800094a:	701a      	strb	r2, [r3, #0]
		  }
		  if(HAL_GPIO_ReadPin(rotary[r].pin2.GPIO_port, rotary[r].pin2.GPIO_Pin)==GPIO_PIN_SET)
 800094c:	492b      	ldr	r1, [pc, #172]	; (80009fc <HAL_TIM_PeriodElapsedCallback+0x11c>)
 800094e:	68fa      	ldr	r2, [r7, #12]
 8000950:	4613      	mov	r3, r2
 8000952:	00db      	lsls	r3, r3, #3
 8000954:	1a9b      	subs	r3, r3, r2
 8000956:	009b      	lsls	r3, r3, #2
 8000958:	440b      	add	r3, r1
 800095a:	3310      	adds	r3, #16
 800095c:	6818      	ldr	r0, [r3, #0]
 800095e:	4927      	ldr	r1, [pc, #156]	; (80009fc <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8000960:	68fa      	ldr	r2, [r7, #12]
 8000962:	4613      	mov	r3, r2
 8000964:	00db      	lsls	r3, r3, #3
 8000966:	1a9b      	subs	r3, r3, r2
 8000968:	009b      	lsls	r3, r3, #2
 800096a:	440b      	add	r3, r1
 800096c:	3314      	adds	r3, #20
 800096e:	881b      	ldrh	r3, [r3, #0]
 8000970:	4619      	mov	r1, r3
 8000972:	f002 fb35 	bl	8002fe0 <HAL_GPIO_ReadPin>
 8000976:	4603      	mov	r3, r0
 8000978:	2b01      	cmp	r3, #1
 800097a:	d10a      	bne.n	8000992 <HAL_TIM_PeriodElapsedCallback+0xb2>
		  {
			  rotary[r].pinStatus.status.r2 = 1;
 800097c:	491f      	ldr	r1, [pc, #124]	; (80009fc <HAL_TIM_PeriodElapsedCallback+0x11c>)
 800097e:	68fa      	ldr	r2, [r7, #12]
 8000980:	4613      	mov	r3, r2
 8000982:	00db      	lsls	r3, r3, #3
 8000984:	1a9b      	subs	r3, r3, r2
 8000986:	009b      	lsls	r3, r3, #2
 8000988:	440b      	add	r3, r1
 800098a:	3301      	adds	r3, #1
 800098c:	2201      	movs	r2, #1
 800098e:	701a      	strb	r2, [r3, #0]
 8000990:	e009      	b.n	80009a6 <HAL_TIM_PeriodElapsedCallback+0xc6>
		  } else {
			  rotary[r].pinStatus.status.r2 = 0;
 8000992:	491a      	ldr	r1, [pc, #104]	; (80009fc <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8000994:	68fa      	ldr	r2, [r7, #12]
 8000996:	4613      	mov	r3, r2
 8000998:	00db      	lsls	r3, r3, #3
 800099a:	1a9b      	subs	r3, r3, r2
 800099c:	009b      	lsls	r3, r3, #2
 800099e:	440b      	add	r3, r1
 80009a0:	3301      	adds	r3, #1
 80009a2:	2200      	movs	r2, #0
 80009a4:	701a      	strb	r2, [r3, #0]
		  }

		  if ( rotary[r].pinStatus.data != rotary[r].historyStatus.data ) {
 80009a6:	4915      	ldr	r1, [pc, #84]	; (80009fc <HAL_TIM_PeriodElapsedCallback+0x11c>)
 80009a8:	68fa      	ldr	r2, [r7, #12]
 80009aa:	4613      	mov	r3, r2
 80009ac:	00db      	lsls	r3, r3, #3
 80009ae:	1a9b      	subs	r3, r3, r2
 80009b0:	009b      	lsls	r3, r3, #2
 80009b2:	440b      	add	r3, r1
 80009b4:	8819      	ldrh	r1, [r3, #0]
 80009b6:	4811      	ldr	r0, [pc, #68]	; (80009fc <HAL_TIM_PeriodElapsedCallback+0x11c>)
 80009b8:	68fa      	ldr	r2, [r7, #12]
 80009ba:	4613      	mov	r3, r2
 80009bc:	00db      	lsls	r3, r3, #3
 80009be:	1a9b      	subs	r3, r3, r2
 80009c0:	009b      	lsls	r3, r3, #2
 80009c2:	4403      	add	r3, r0
 80009c4:	3302      	adds	r3, #2
 80009c6:	881b      	ldrh	r3, [r3, #0]
 80009c8:	4299      	cmp	r1, r3
 80009ca:	d00a      	beq.n	80009e2 <HAL_TIM_PeriodElapsedCallback+0x102>
			  RotaryProcess(&rotary[r], COLOR_COUNT-1);
 80009cc:	68fa      	ldr	r2, [r7, #12]
 80009ce:	4613      	mov	r3, r2
 80009d0:	00db      	lsls	r3, r3, #3
 80009d2:	1a9b      	subs	r3, r3, r2
 80009d4:	009b      	lsls	r3, r3, #2
 80009d6:	4a09      	ldr	r2, [pc, #36]	; (80009fc <HAL_TIM_PeriodElapsedCallback+0x11c>)
 80009d8:	4413      	add	r3, r2
 80009da:	211e      	movs	r1, #30
 80009dc:	4618      	mov	r0, r3
 80009de:	f000 fb43 	bl	8001068 <RotaryProcess>
	  for(int r=0; r < ROTARY_COUNT; r++)
 80009e2:	68fb      	ldr	r3, [r7, #12]
 80009e4:	3301      	adds	r3, #1
 80009e6:	60fb      	str	r3, [r7, #12]
 80009e8:	68fb      	ldr	r3, [r7, #12]
 80009ea:	2b27      	cmp	r3, #39	; 0x27
 80009ec:	dd83      	ble.n	80008f6 <HAL_TIM_PeriodElapsedCallback+0x16>
		  }
	  };
  }
}
 80009ee:	bf00      	nop
 80009f0:	3710      	adds	r7, #16
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bd80      	pop	{r7, pc}
 80009f6:	bf00      	nop
 80009f8:	20008394 	.word	0x20008394
 80009fc:	20000054 	.word	0x20000054

08000a00 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b088      	sub	sp, #32
 8000a04:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a06:	f001 fa3b 	bl	8001e80 <HAL_Init>

  /* USER CODE BEGIN Init */

  InitRotary(0, R1_1_GPIO_Port, R1_1_Pin, R1_2_GPIO_Port, R1_2_Pin);
 8000a0a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a0e:	9300      	str	r3, [sp, #0]
 8000a10:	4bc0      	ldr	r3, [pc, #768]	; (8000d14 <main+0x314>)
 8000a12:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000a16:	49bf      	ldr	r1, [pc, #764]	; (8000d14 <main+0x314>)
 8000a18:	2000      	movs	r0, #0
 8000a1a:	f000 fae7 	bl	8000fec <InitRotary>
  InitRotary(1, R2_1_GPIO_Port, R2_1_Pin, R2_2_GPIO_Port, R2_2_Pin);
 8000a1e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000a22:	9300      	str	r3, [sp, #0]
 8000a24:	4bbb      	ldr	r3, [pc, #748]	; (8000d14 <main+0x314>)
 8000a26:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000a2a:	49ba      	ldr	r1, [pc, #744]	; (8000d14 <main+0x314>)
 8000a2c:	2001      	movs	r0, #1
 8000a2e:	f000 fadd 	bl	8000fec <InitRotary>
  InitRotary(2, R3_1_GPIO_Port, R3_1_Pin, R3_2_GPIO_Port, R3_2_Pin);
 8000a32:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000a36:	9300      	str	r3, [sp, #0]
 8000a38:	4bb7      	ldr	r3, [pc, #732]	; (8000d18 <main+0x318>)
 8000a3a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000a3e:	49b6      	ldr	r1, [pc, #728]	; (8000d18 <main+0x318>)
 8000a40:	2002      	movs	r0, #2
 8000a42:	f000 fad3 	bl	8000fec <InitRotary>
  InitRotary(3, R4_1_GPIO_Port, R4_1_Pin, R4_2_GPIO_Port, R4_2_Pin);
 8000a46:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a4a:	9300      	str	r3, [sp, #0]
 8000a4c:	4bb2      	ldr	r3, [pc, #712]	; (8000d18 <main+0x318>)
 8000a4e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000a52:	49b1      	ldr	r1, [pc, #708]	; (8000d18 <main+0x318>)
 8000a54:	2003      	movs	r0, #3
 8000a56:	f000 fac9 	bl	8000fec <InitRotary>
  InitRotary(4, R5_1_GPIO_Port, R5_1_Pin, R5_2_GPIO_Port, R5_2_Pin);
 8000a5a:	2308      	movs	r3, #8
 8000a5c:	9300      	str	r3, [sp, #0]
 8000a5e:	4baf      	ldr	r3, [pc, #700]	; (8000d1c <main+0x31c>)
 8000a60:	2204      	movs	r2, #4
 8000a62:	49ae      	ldr	r1, [pc, #696]	; (8000d1c <main+0x31c>)
 8000a64:	2004      	movs	r0, #4
 8000a66:	f000 fac1 	bl	8000fec <InitRotary>
  InitRotary(5, R6_1_GPIO_Port, R6_1_Pin, R6_2_GPIO_Port, R6_2_Pin);
 8000a6a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000a6e:	9300      	str	r3, [sp, #0]
 8000a70:	4ba9      	ldr	r3, [pc, #676]	; (8000d18 <main+0x318>)
 8000a72:	2210      	movs	r2, #16
 8000a74:	49a9      	ldr	r1, [pc, #676]	; (8000d1c <main+0x31c>)
 8000a76:	2005      	movs	r0, #5
 8000a78:	f000 fab8 	bl	8000fec <InitRotary>
  InitRotary(6, R7_1_GPIO_Port, R7_1_Pin, R7_2_GPIO_Port, R7_2_Pin);
 8000a7c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000a80:	9300      	str	r3, [sp, #0]
 8000a82:	4ba7      	ldr	r3, [pc, #668]	; (8000d20 <main+0x320>)
 8000a84:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000a88:	49a3      	ldr	r1, [pc, #652]	; (8000d18 <main+0x318>)
 8000a8a:	2006      	movs	r0, #6
 8000a8c:	f000 faae 	bl	8000fec <InitRotary>
  InitRotary(7, R8_1_GPIO_Port, R8_1_Pin, R8_2_GPIO_Port, R8_2_Pin);
 8000a90:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000a94:	9300      	str	r3, [sp, #0]
 8000a96:	4ba2      	ldr	r3, [pc, #648]	; (8000d20 <main+0x320>)
 8000a98:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000a9c:	49a0      	ldr	r1, [pc, #640]	; (8000d20 <main+0x320>)
 8000a9e:	2007      	movs	r0, #7
 8000aa0:	f000 faa4 	bl	8000fec <InitRotary>
  InitRotary(8, R9_1_GPIO_Port, R9_1_Pin, R9_2_GPIO_Port, R9_2_Pin);
 8000aa4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000aa8:	9300      	str	r3, [sp, #0]
 8000aaa:	4b9d      	ldr	r3, [pc, #628]	; (8000d20 <main+0x320>)
 8000aac:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000ab0:	499b      	ldr	r1, [pc, #620]	; (8000d20 <main+0x320>)
 8000ab2:	2008      	movs	r0, #8
 8000ab4:	f000 fa9a 	bl	8000fec <InitRotary>
  InitRotary(9, R10_1_GPIO_Port, R10_1_Pin, R10_2_GPIO_Port, R10_2_Pin);
 8000ab8:	2380      	movs	r3, #128	; 0x80
 8000aba:	9300      	str	r3, [sp, #0]
 8000abc:	4b98      	ldr	r3, [pc, #608]	; (8000d20 <main+0x320>)
 8000abe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000ac2:	4997      	ldr	r1, [pc, #604]	; (8000d20 <main+0x320>)
 8000ac4:	2009      	movs	r0, #9
 8000ac6:	f000 fa91 	bl	8000fec <InitRotary>
  InitRotary(10, R11_1_GPIO_Port, R11_1_Pin, R11_2_GPIO_Port, R11_2_Pin);
 8000aca:	2301      	movs	r3, #1
 8000acc:	9300      	str	r3, [sp, #0]
 8000ace:	4b93      	ldr	r3, [pc, #588]	; (8000d1c <main+0x31c>)
 8000ad0:	2202      	movs	r2, #2
 8000ad2:	4992      	ldr	r1, [pc, #584]	; (8000d1c <main+0x31c>)
 8000ad4:	200a      	movs	r0, #10
 8000ad6:	f000 fa89 	bl	8000fec <InitRotary>
  InitRotary(11, R12_1_GPIO_Port, R12_1_Pin, R12_2_GPIO_Port, R12_2_Pin);
 8000ada:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ade:	9300      	str	r3, [sp, #0]
 8000ae0:	4b90      	ldr	r3, [pc, #576]	; (8000d24 <main+0x324>)
 8000ae2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000ae6:	498f      	ldr	r1, [pc, #572]	; (8000d24 <main+0x324>)
 8000ae8:	200b      	movs	r0, #11
 8000aea:	f000 fa7f 	bl	8000fec <InitRotary>
  InitRotary(12, R13_1_GPIO_Port, R13_1_Pin, R13_2_GPIO_Port, R13_2_Pin);
 8000aee:	2304      	movs	r3, #4
 8000af0:	9300      	str	r3, [sp, #0]
 8000af2:	4b89      	ldr	r3, [pc, #548]	; (8000d18 <main+0x318>)
 8000af4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000af8:	498a      	ldr	r1, [pc, #552]	; (8000d24 <main+0x324>)
 8000afa:	200c      	movs	r0, #12
 8000afc:	f000 fa76 	bl	8000fec <InitRotary>
  InitRotary(13, R14_1_GPIO_Port, R14_1_Pin, R14_2_GPIO_Port, R14_2_Pin);
 8000b00:	2310      	movs	r3, #16
 8000b02:	9300      	str	r3, [sp, #0]
 8000b04:	4b88      	ldr	r3, [pc, #544]	; (8000d28 <main+0x328>)
 8000b06:	2220      	movs	r2, #32
 8000b08:	4987      	ldr	r1, [pc, #540]	; (8000d28 <main+0x328>)
 8000b0a:	200d      	movs	r0, #13
 8000b0c:	f000 fa6e 	bl	8000fec <InitRotary>
  InitRotary(14, R15_1_GPIO_Port, R15_1_Pin, R15_2_GPIO_Port, R15_2_Pin);
 8000b10:	2320      	movs	r3, #32
 8000b12:	9300      	str	r3, [sp, #0]
 8000b14:	4b85      	ldr	r3, [pc, #532]	; (8000d2c <main+0x32c>)
 8000b16:	2210      	movs	r2, #16
 8000b18:	4984      	ldr	r1, [pc, #528]	; (8000d2c <main+0x32c>)
 8000b1a:	200e      	movs	r0, #14
 8000b1c:	f000 fa66 	bl	8000fec <InitRotary>
  InitRotary(15, R16_1_GPIO_Port, R16_1_Pin, R16_2_GPIO_Port, R16_2_Pin);
 8000b20:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000b24:	9300      	str	r3, [sp, #0]
 8000b26:	4b7f      	ldr	r3, [pc, #508]	; (8000d24 <main+0x324>)
 8000b28:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b2c:	497d      	ldr	r1, [pc, #500]	; (8000d24 <main+0x324>)
 8000b2e:	200f      	movs	r0, #15
 8000b30:	f000 fa5c 	bl	8000fec <InitRotary>
  InitRotary(16, R17_1_GPIO_Port, R17_1_Pin, R17_2_GPIO_Port, R17_2_Pin);
 8000b34:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b38:	9300      	str	r3, [sp, #0]
 8000b3a:	4b7a      	ldr	r3, [pc, #488]	; (8000d24 <main+0x324>)
 8000b3c:	2280      	movs	r2, #128	; 0x80
 8000b3e:	4979      	ldr	r1, [pc, #484]	; (8000d24 <main+0x324>)
 8000b40:	2010      	movs	r0, #16
 8000b42:	f000 fa53 	bl	8000fec <InitRotary>
  InitRotary(17, R18_1_GPIO_Port, R18_1_Pin, R18_2_GPIO_Port, R18_2_Pin);
 8000b46:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b4a:	9300      	str	r3, [sp, #0]
 8000b4c:	4b75      	ldr	r3, [pc, #468]	; (8000d24 <main+0x324>)
 8000b4e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b52:	4974      	ldr	r1, [pc, #464]	; (8000d24 <main+0x324>)
 8000b54:	2011      	movs	r0, #17
 8000b56:	f000 fa49 	bl	8000fec <InitRotary>
  InitRotary(18, R19_1_GPIO_Port, R19_1_Pin, R19_2_GPIO_Port, R19_2_Pin);
 8000b5a:	2302      	movs	r3, #2
 8000b5c:	9300      	str	r3, [sp, #0]
 8000b5e:	4b73      	ldr	r3, [pc, #460]	; (8000d2c <main+0x32c>)
 8000b60:	2201      	movs	r2, #1
 8000b62:	4972      	ldr	r1, [pc, #456]	; (8000d2c <main+0x32c>)
 8000b64:	2012      	movs	r0, #18
 8000b66:	f000 fa41 	bl	8000fec <InitRotary>
  InitRotary(19, R20_1_GPIO_Port, R20_1_Pin, R20_2_GPIO_Port, R20_2_Pin);
 8000b6a:	2308      	movs	r3, #8
 8000b6c:	9300      	str	r3, [sp, #0]
 8000b6e:	4b6f      	ldr	r3, [pc, #444]	; (8000d2c <main+0x32c>)
 8000b70:	2204      	movs	r2, #4
 8000b72:	496e      	ldr	r1, [pc, #440]	; (8000d2c <main+0x32c>)
 8000b74:	2013      	movs	r0, #19
 8000b76:	f000 fa39 	bl	8000fec <InitRotary>
  InitRotary(20, R21_1_GPIO_Port, R21_1_Pin, R21_2_GPIO_Port, R21_2_Pin);
 8000b7a:	2340      	movs	r3, #64	; 0x40
 8000b7c:	9300      	str	r3, [sp, #0]
 8000b7e:	4b69      	ldr	r3, [pc, #420]	; (8000d24 <main+0x324>)
 8000b80:	2220      	movs	r2, #32
 8000b82:	4968      	ldr	r1, [pc, #416]	; (8000d24 <main+0x324>)
 8000b84:	2014      	movs	r0, #20
 8000b86:	f000 fa31 	bl	8000fec <InitRotary>
  InitRotary(21, R22_1_GPIO_Port, R22_1_Pin, R22_2_GPIO_Port, R22_2_Pin);
 8000b8a:	2310      	movs	r3, #16
 8000b8c:	9300      	str	r3, [sp, #0]
 8000b8e:	4b65      	ldr	r3, [pc, #404]	; (8000d24 <main+0x324>)
 8000b90:	2208      	movs	r2, #8
 8000b92:	4964      	ldr	r1, [pc, #400]	; (8000d24 <main+0x324>)
 8000b94:	2015      	movs	r0, #21
 8000b96:	f000 fa29 	bl	8000fec <InitRotary>
  InitRotary(22, R23_1_GPIO_Port, R23_1_Pin, R23_2_GPIO_Port, R23_2_Pin);
 8000b9a:	2304      	movs	r3, #4
 8000b9c:	9300      	str	r3, [sp, #0]
 8000b9e:	4b61      	ldr	r3, [pc, #388]	; (8000d24 <main+0x324>)
 8000ba0:	2202      	movs	r2, #2
 8000ba2:	4960      	ldr	r1, [pc, #384]	; (8000d24 <main+0x324>)
 8000ba4:	2016      	movs	r0, #22
 8000ba6:	f000 fa21 	bl	8000fec <InitRotary>
  InitRotary(23, R24_1_GPIO_Port, R24_1_Pin, R24_2_GPIO_Port, R24_2_Pin);
 8000baa:	2340      	movs	r3, #64	; 0x40
 8000bac:	9300      	str	r3, [sp, #0]
 8000bae:	4b5c      	ldr	r3, [pc, #368]	; (8000d20 <main+0x320>)
 8000bb0:	2220      	movs	r2, #32
 8000bb2:	495b      	ldr	r1, [pc, #364]	; (8000d20 <main+0x320>)
 8000bb4:	2017      	movs	r0, #23
 8000bb6:	f000 fa19 	bl	8000fec <InitRotary>
  InitRotary(24, R25_1_GPIO_Port, R25_1_Pin, R25_2_GPIO_Port, R25_2_Pin);
 8000bba:	2310      	movs	r3, #16
 8000bbc:	9300      	str	r3, [sp, #0]
 8000bbe:	4b58      	ldr	r3, [pc, #352]	; (8000d20 <main+0x320>)
 8000bc0:	2208      	movs	r2, #8
 8000bc2:	4957      	ldr	r1, [pc, #348]	; (8000d20 <main+0x320>)
 8000bc4:	2018      	movs	r0, #24
 8000bc6:	f000 fa11 	bl	8000fec <InitRotary>
  InitRotary(25, R26_1_GPIO_Port, R26_1_Pin, R26_2_GPIO_Port, R26_2_Pin);
 8000bca:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000bce:	9300      	str	r3, [sp, #0]
 8000bd0:	4b51      	ldr	r3, [pc, #324]	; (8000d18 <main+0x318>)
 8000bd2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000bd6:	4950      	ldr	r1, [pc, #320]	; (8000d18 <main+0x318>)
 8000bd8:	2019      	movs	r0, #25
 8000bda:	f000 fa07 	bl	8000fec <InitRotary>
  InitRotary(26, R27_1_GPIO_Port, R27_1_Pin, R27_2_GPIO_Port, R27_2_Pin);
 8000bde:	2340      	movs	r3, #64	; 0x40
 8000be0:	9300      	str	r3, [sp, #0]
 8000be2:	4b4d      	ldr	r3, [pc, #308]	; (8000d18 <main+0x318>)
 8000be4:	2280      	movs	r2, #128	; 0x80
 8000be6:	494c      	ldr	r1, [pc, #304]	; (8000d18 <main+0x318>)
 8000be8:	201a      	movs	r0, #26
 8000bea:	f000 f9ff 	bl	8000fec <InitRotary>
  InitRotary(27, R28_1_GPIO_Port, R28_1_Pin, R28_2_GPIO_Port, R28_2_Pin);
 8000bee:	2310      	movs	r3, #16
 8000bf0:	9300      	str	r3, [sp, #0]
 8000bf2:	4b49      	ldr	r3, [pc, #292]	; (8000d18 <main+0x318>)
 8000bf4:	2220      	movs	r2, #32
 8000bf6:	4948      	ldr	r1, [pc, #288]	; (8000d18 <main+0x318>)
 8000bf8:	201b      	movs	r0, #27
 8000bfa:	f000 f9f7 	bl	8000fec <InitRotary>
  InitRotary(28, R29_1_GPIO_Port, R29_1_Pin, R29_2_GPIO_Port, R29_2_Pin);
 8000bfe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000c02:	9300      	str	r3, [sp, #0]
 8000c04:	4b45      	ldr	r3, [pc, #276]	; (8000d1c <main+0x31c>)
 8000c06:	2208      	movs	r2, #8
 8000c08:	4943      	ldr	r1, [pc, #268]	; (8000d18 <main+0x318>)
 8000c0a:	201c      	movs	r0, #28
 8000c0c:	f000 f9ee 	bl	8000fec <InitRotary>
  InitRotary(29, R30_1_GPIO_Port, R30_1_Pin, R30_2_GPIO_Port, R30_2_Pin);
 8000c10:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c14:	9300      	str	r3, [sp, #0]
 8000c16:	4b41      	ldr	r3, [pc, #260]	; (8000d1c <main+0x31c>)
 8000c18:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000c1c:	493f      	ldr	r1, [pc, #252]	; (8000d1c <main+0x31c>)
 8000c1e:	201d      	movs	r0, #29
 8000c20:	f000 f9e4 	bl	8000fec <InitRotary>
  InitRotary(30, R31_1_GPIO_Port, R31_1_Pin, R31_2_GPIO_Port, R31_2_Pin);
 8000c24:	2380      	movs	r3, #128	; 0x80
 8000c26:	9300      	str	r3, [sp, #0]
 8000c28:	4b3a      	ldr	r3, [pc, #232]	; (8000d14 <main+0x314>)
 8000c2a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c2e:	493b      	ldr	r1, [pc, #236]	; (8000d1c <main+0x31c>)
 8000c30:	201e      	movs	r0, #30
 8000c32:	f000 f9db 	bl	8000fec <InitRotary>
  InitRotary(31, R32_1_GPIO_Port, R32_1_Pin, R32_2_GPIO_Port, R32_2_Pin);
 8000c36:	2320      	movs	r3, #32
 8000c38:	9300      	str	r3, [sp, #0]
 8000c3a:	4b36      	ldr	r3, [pc, #216]	; (8000d14 <main+0x314>)
 8000c3c:	2240      	movs	r2, #64	; 0x40
 8000c3e:	4935      	ldr	r1, [pc, #212]	; (8000d14 <main+0x314>)
 8000c40:	201f      	movs	r0, #31
 8000c42:	f000 f9d3 	bl	8000fec <InitRotary>
  InitRotary(32, R33_1_GPIO_Port, R33_1_Pin, R33_2_GPIO_Port, R33_2_Pin);
 8000c46:	2308      	movs	r3, #8
 8000c48:	9300      	str	r3, [sp, #0]
 8000c4a:	4b32      	ldr	r3, [pc, #200]	; (8000d14 <main+0x314>)
 8000c4c:	2210      	movs	r2, #16
 8000c4e:	4931      	ldr	r1, [pc, #196]	; (8000d14 <main+0x314>)
 8000c50:	2020      	movs	r0, #32
 8000c52:	f000 f9cb 	bl	8000fec <InitRotary>
  InitRotary(33, R34_1_GPIO_Port, R34_1_Pin, R34_2_GPIO_Port, R34_2_Pin);
 8000c56:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000c5a:	9300      	str	r3, [sp, #0]
 8000c5c:	4b33      	ldr	r3, [pc, #204]	; (8000d2c <main+0x32c>)
 8000c5e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000c62:	4932      	ldr	r1, [pc, #200]	; (8000d2c <main+0x32c>)
 8000c64:	2021      	movs	r0, #33	; 0x21
 8000c66:	f000 f9c1 	bl	8000fec <InitRotary>
  InitRotary(34, R35_1_GPIO_Port, R35_1_Pin, R35_2_GPIO_Port, R35_2_Pin);
 8000c6a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000c6e:	9300      	str	r3, [sp, #0]
 8000c70:	4b2d      	ldr	r3, [pc, #180]	; (8000d28 <main+0x328>)
 8000c72:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c76:	492d      	ldr	r1, [pc, #180]	; (8000d2c <main+0x32c>)
 8000c78:	2022      	movs	r0, #34	; 0x22
 8000c7a:	f000 f9b7 	bl	8000fec <InitRotary>
  InitRotary(35, R36_1_GPIO_Port, R36_1_Pin, R36_2_GPIO_Port, R36_2_Pin);
 8000c7e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000c82:	9300      	str	r3, [sp, #0]
 8000c84:	4b28      	ldr	r3, [pc, #160]	; (8000d28 <main+0x328>)
 8000c86:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c8a:	4927      	ldr	r1, [pc, #156]	; (8000d28 <main+0x328>)
 8000c8c:	2023      	movs	r0, #35	; 0x23
 8000c8e:	f000 f9ad 	bl	8000fec <InitRotary>
  InitRotary(36, R37_1_GPIO_Port, R37_1_Pin, R37_2_GPIO_Port, R37_2_Pin);
 8000c92:	2380      	movs	r3, #128	; 0x80
 8000c94:	9300      	str	r3, [sp, #0]
 8000c96:	4b25      	ldr	r3, [pc, #148]	; (8000d2c <main+0x32c>)
 8000c98:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c9c:	4923      	ldr	r1, [pc, #140]	; (8000d2c <main+0x32c>)
 8000c9e:	2024      	movs	r0, #36	; 0x24
 8000ca0:	f000 f9a4 	bl	8000fec <InitRotary>
  InitRotary(37, R38_1_GPIO_Port, R38_1_Pin, R38_2_GPIO_Port, R38_2_Pin);
 8000ca4:	2380      	movs	r3, #128	; 0x80
 8000ca6:	9300      	str	r3, [sp, #0]
 8000ca8:	4b1c      	ldr	r3, [pc, #112]	; (8000d1c <main+0x31c>)
 8000caa:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000cae:	491b      	ldr	r1, [pc, #108]	; (8000d1c <main+0x31c>)
 8000cb0:	2025      	movs	r0, #37	; 0x25
 8000cb2:	f000 f99b 	bl	8000fec <InitRotary>
  InitRotary(38, R39_1_GPIO_Port, R39_1_Pin, R39_2_GPIO_Port, R39_2_Pin);
 8000cb6:	2320      	movs	r3, #32
 8000cb8:	9300      	str	r3, [sp, #0]
 8000cba:	4b18      	ldr	r3, [pc, #96]	; (8000d1c <main+0x31c>)
 8000cbc:	2240      	movs	r2, #64	; 0x40
 8000cbe:	4917      	ldr	r1, [pc, #92]	; (8000d1c <main+0x31c>)
 8000cc0:	2026      	movs	r0, #38	; 0x26
 8000cc2:	f000 f993 	bl	8000fec <InitRotary>
  InitRotary(39, R40_1_GPIO_Port, R40_1_Pin, R40_2_GPIO_Port, R40_2_Pin);
 8000cc6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000cca:	9300      	str	r3, [sp, #0]
 8000ccc:	4b14      	ldr	r3, [pc, #80]	; (8000d20 <main+0x320>)
 8000cce:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000cd2:	4913      	ldr	r1, [pc, #76]	; (8000d20 <main+0x320>)
 8000cd4:	2027      	movs	r0, #39	; 0x27
 8000cd6:	f000 f989 	bl	8000fec <InitRotary>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cda:	f000 f941 	bl	8000f60 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cde:	f7ff fcc5 	bl	800066c <MX_GPIO_Init>
  MX_DMA_Init();
 8000ce2:	f7ff fc51 	bl	8000588 <MX_DMA_Init>
  MX_TIM4_Init();
 8000ce6:	f000 fbaf 	bl	8001448 <MX_TIM4_Init>
  MX_TIM7_Init();
 8000cea:	f000 fc85 	bl	80015f8 <MX_TIM7_Init>
  MX_CAN_Init();
 8000cee:	f7ff fbb7 	bl	8000460 <MX_CAN_Init>
  MX_TIM2_Init();
 8000cf2:	f000 fad9 	bl	80012a8 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000cf6:	f000 fb39 	bl	800136c <MX_TIM3_Init>
  MX_TIM5_Init();
 8000cfa:	f000 fc25 	bl	8001548 <MX_TIM5_Init>
  MX_TIM8_Init();
 8000cfe:	f000 fcb1 	bl	8001664 <MX_TIM8_Init>
  /* USER CODE BEGIN 2 */

  InitModule(&modules[0], &htim4, TIM_CHANNEL_2);
 8000d02:	2204      	movs	r2, #4
 8000d04:	490a      	ldr	r1, [pc, #40]	; (8000d30 <main+0x330>)
 8000d06:	480b      	ldr	r0, [pc, #44]	; (8000d34 <main+0x334>)
 8000d08:	f7ff fb21 	bl	800034e <InitModule>
  InitModule(&modules[1], &htim2, TIM_CHANNEL_3);
 8000d0c:	2208      	movs	r2, #8
 8000d0e:	490a      	ldr	r1, [pc, #40]	; (8000d38 <main+0x338>)
 8000d10:	e014      	b.n	8000d3c <main+0x33c>
 8000d12:	bf00      	nop
 8000d14:	40011400 	.word	0x40011400
 8000d18:	40010c00 	.word	0x40010c00
 8000d1c:	40012000 	.word	0x40012000
 8000d20:	40011800 	.word	0x40011800
 8000d24:	40011c00 	.word	0x40011c00
 8000d28:	40010800 	.word	0x40010800
 8000d2c:	40011000 	.word	0x40011000
 8000d30:	20008304 	.word	0x20008304
 8000d34:	200004b4 	.word	0x200004b4
 8000d38:	20008274 	.word	0x20008274
 8000d3c:	4871      	ldr	r0, [pc, #452]	; (8000f04 <main+0x504>)
 8000d3e:	f7ff fb06 	bl	800034e <InitModule>
  InitModule(&modules[2], &htim2, TIM_CHANNEL_2);
 8000d42:	2204      	movs	r2, #4
 8000d44:	4970      	ldr	r1, [pc, #448]	; (8000f08 <main+0x508>)
 8000d46:	4871      	ldr	r0, [pc, #452]	; (8000f0c <main+0x50c>)
 8000d48:	f7ff fb01 	bl	800034e <InitModule>
  InitModule(&modules[3], &htim3, TIM_CHANNEL_1);
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	4970      	ldr	r1, [pc, #448]	; (8000f10 <main+0x510>)
 8000d50:	4870      	ldr	r0, [pc, #448]	; (8000f14 <main+0x514>)
 8000d52:	f7ff fafc 	bl	800034e <InitModule>
  InitModule(&modules[4], &htim3, TIM_CHANNEL_3);
 8000d56:	2208      	movs	r2, #8
 8000d58:	496d      	ldr	r1, [pc, #436]	; (8000f10 <main+0x510>)
 8000d5a:	486f      	ldr	r0, [pc, #444]	; (8000f18 <main+0x518>)
 8000d5c:	f7ff faf7 	bl	800034e <InitModule>
  InitModule(&modules[5], &htim3, TIM_CHANNEL_4);
 8000d60:	220c      	movs	r2, #12
 8000d62:	496b      	ldr	r1, [pc, #428]	; (8000f10 <main+0x510>)
 8000d64:	486d      	ldr	r0, [pc, #436]	; (8000f1c <main+0x51c>)
 8000d66:	f7ff faf2 	bl	800034e <InitModule>
  InitModule(&modules[6], &htim4, TIM_CHANNEL_3);
 8000d6a:	2208      	movs	r2, #8
 8000d6c:	496c      	ldr	r1, [pc, #432]	; (8000f20 <main+0x520>)
 8000d6e:	486d      	ldr	r0, [pc, #436]	; (8000f24 <main+0x524>)
 8000d70:	f7ff faed 	bl	800034e <InitModule>
  InitModule(&modules[7], &htim5, TIM_CHANNEL_4);
 8000d74:	220c      	movs	r2, #12
 8000d76:	496c      	ldr	r1, [pc, #432]	; (8000f28 <main+0x528>)
 8000d78:	486c      	ldr	r0, [pc, #432]	; (8000f2c <main+0x52c>)
 8000d7a:	f7ff fae8 	bl	800034e <InitModule>
  InitModule(&modules[8], &htim8, TIM_CHANNEL_4);
 8000d7e:	220c      	movs	r2, #12
 8000d80:	496b      	ldr	r1, [pc, #428]	; (8000f30 <main+0x530>)
 8000d82:	486c      	ldr	r0, [pc, #432]	; (8000f34 <main+0x534>)
 8000d84:	f7ff fae3 	bl	800034e <InitModule>
  InitModule(&modules[9], &htim8, TIM_CHANNEL_1);
 8000d88:	2200      	movs	r2, #0
 8000d8a:	4969      	ldr	r1, [pc, #420]	; (8000f30 <main+0x530>)
 8000d8c:	486a      	ldr	r0, [pc, #424]	; (8000f38 <main+0x538>)
 8000d8e:	f7ff fade 	bl	800034e <InitModule>

  // Start timer
  HAL_TIM_Base_Start_IT(&htim7);
 8000d92:	486a      	ldr	r0, [pc, #424]	; (8000f3c <main+0x53c>)
 8000d94:	f002 fd9a 	bl	80038cc <HAL_TIM_Base_Start_IT>

  //Can
  HAL_CAN_Start(&hcan);
 8000d98:	4869      	ldr	r0, [pc, #420]	; (8000f40 <main+0x540>)
 8000d9a:	f001 f9f2 	bl	8002182 <HAL_CAN_Start>

  TxHeader.IDE = CAN_ID_STD;
 8000d9e:	4b69      	ldr	r3, [pc, #420]	; (8000f44 <main+0x544>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	609a      	str	r2, [r3, #8]
  TxHeader.StdId = 0x446;
 8000da4:	4b67      	ldr	r3, [pc, #412]	; (8000f44 <main+0x544>)
 8000da6:	f240 4246 	movw	r2, #1094	; 0x446
 8000daa:	601a      	str	r2, [r3, #0]
  TxHeader.RTR = CAN_RTR_DATA;
 8000dac:	4b65      	ldr	r3, [pc, #404]	; (8000f44 <main+0x544>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	60da      	str	r2, [r3, #12]
  TxHeader.DLC = 2;
 8000db2:	4b64      	ldr	r3, [pc, #400]	; (8000f44 <main+0x544>)
 8000db4:	2202      	movs	r2, #2
 8000db6:	611a      	str	r2, [r3, #16]

  TxData[0] = 50;
 8000db8:	4b63      	ldr	r3, [pc, #396]	; (8000f48 <main+0x548>)
 8000dba:	2232      	movs	r2, #50	; 0x32
 8000dbc:	701a      	strb	r2, [r3, #0]
  TxData[1] = 0xAA;
 8000dbe:	4b62      	ldr	r3, [pc, #392]	; (8000f48 <main+0x548>)
 8000dc0:	22aa      	movs	r2, #170	; 0xaa
 8000dc2:	705a      	strb	r2, [r3, #1]

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  k = 255;
 8000dc4:	23ff      	movs	r3, #255	; 0xff
 8000dc6:	617b      	str	r3, [r7, #20]
  stepSize = 0;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	80bb      	strh	r3, [r7, #4]
  j=0;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	603b      	str	r3, [r7, #0]

  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 8000dd0:	2201      	movs	r2, #1
 8000dd2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000dd6:	485d      	ldr	r0, [pc, #372]	; (8000f4c <main+0x54c>)
 8000dd8:	f002 f919 	bl	800300e <HAL_GPIO_WritePin>
  while (1)
  {
	  if(k==0)
 8000ddc:	697b      	ldr	r3, [r7, #20]
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d105      	bne.n	8000dee <main+0x3ee>
	  {
		  k=100;
 8000de2:	2364      	movs	r3, #100	; 0x64
 8000de4:	617b      	str	r3, [r7, #20]
		  HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 8000de6:	2101      	movs	r1, #1
 8000de8:	4859      	ldr	r0, [pc, #356]	; (8000f50 <main+0x550>)
 8000dea:	f002 f928 	bl	800303e <HAL_GPIO_TogglePin>
	  }
	  k--;//*/
 8000dee:	697b      	ldr	r3, [r7, #20]
 8000df0:	3b01      	subs	r3, #1
 8000df2:	617b      	str	r3, [r7, #20]


	  for (int m=0; m < MODULE_COUNT; m++)
 8000df4:	2300      	movs	r3, #0
 8000df6:	613b      	str	r3, [r7, #16]
 8000df8:	e05c      	b.n	8000eb4 <main+0x4b4>
	  {
		  int changed = 0;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	60fb      	str	r3, [r7, #12]
		  for(int r=0; r < 4; r++)
 8000dfe:	2300      	movs	r3, #0
 8000e00:	60bb      	str	r3, [r7, #8]
 8000e02:	e044      	b.n	8000e8e <main+0x48e>
		  {
			  if(rotary[m*4 + r].changed){
 8000e04:	693b      	ldr	r3, [r7, #16]
 8000e06:	009a      	lsls	r2, r3, #2
 8000e08:	68bb      	ldr	r3, [r7, #8]
 8000e0a:	441a      	add	r2, r3
 8000e0c:	4951      	ldr	r1, [pc, #324]	; (8000f54 <main+0x554>)
 8000e0e:	4613      	mov	r3, r2
 8000e10:	00db      	lsls	r3, r3, #3
 8000e12:	1a9b      	subs	r3, r3, r2
 8000e14:	009b      	lsls	r3, r3, #2
 8000e16:	440b      	add	r3, r1
 8000e18:	3319      	adds	r3, #25
 8000e1a:	781b      	ldrb	r3, [r3, #0]
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d033      	beq.n	8000e88 <main+0x488>
				  SetPixelColorP(&modules[m].pixels[r], rotary[m*4 + r].counter % COLOR_COUNT);
 8000e20:	68bb      	ldr	r3, [r7, #8]
 8000e22:	015a      	lsls	r2, r3, #5
 8000e24:	693b      	ldr	r3, [r7, #16]
 8000e26:	f44f 6149 	mov.w	r1, #3216	; 0xc90
 8000e2a:	fb01 f303 	mul.w	r3, r1, r3
 8000e2e:	4413      	add	r3, r2
 8000e30:	4a49      	ldr	r2, [pc, #292]	; (8000f58 <main+0x558>)
 8000e32:	1898      	adds	r0, r3, r2
 8000e34:	693b      	ldr	r3, [r7, #16]
 8000e36:	009a      	lsls	r2, r3, #2
 8000e38:	68bb      	ldr	r3, [r7, #8]
 8000e3a:	441a      	add	r2, r3
 8000e3c:	4945      	ldr	r1, [pc, #276]	; (8000f54 <main+0x554>)
 8000e3e:	4613      	mov	r3, r2
 8000e40:	00db      	lsls	r3, r3, #3
 8000e42:	1a9b      	subs	r3, r3, r2
 8000e44:	009b      	lsls	r3, r3, #2
 8000e46:	440b      	add	r3, r1
 8000e48:	3318      	adds	r3, #24
 8000e4a:	781a      	ldrb	r2, [r3, #0]
 8000e4c:	4b43      	ldr	r3, [pc, #268]	; (8000f5c <main+0x55c>)
 8000e4e:	fba3 1302 	umull	r1, r3, r3, r2
 8000e52:	1ad1      	subs	r1, r2, r3
 8000e54:	0849      	lsrs	r1, r1, #1
 8000e56:	440b      	add	r3, r1
 8000e58:	0919      	lsrs	r1, r3, #4
 8000e5a:	460b      	mov	r3, r1
 8000e5c:	015b      	lsls	r3, r3, #5
 8000e5e:	1a5b      	subs	r3, r3, r1
 8000e60:	1ad3      	subs	r3, r2, r3
 8000e62:	b2db      	uxtb	r3, r3
 8000e64:	4619      	mov	r1, r3
 8000e66:	f7ff fa25 	bl	80002b4 <SetPixelColorP>
				  changed = 1;
 8000e6a:	2301      	movs	r3, #1
 8000e6c:	60fb      	str	r3, [r7, #12]
				  rotary[m*4 + r].changed=0;
 8000e6e:	693b      	ldr	r3, [r7, #16]
 8000e70:	009a      	lsls	r2, r3, #2
 8000e72:	68bb      	ldr	r3, [r7, #8]
 8000e74:	441a      	add	r2, r3
 8000e76:	4937      	ldr	r1, [pc, #220]	; (8000f54 <main+0x554>)
 8000e78:	4613      	mov	r3, r2
 8000e7a:	00db      	lsls	r3, r3, #3
 8000e7c:	1a9b      	subs	r3, r3, r2
 8000e7e:	009b      	lsls	r3, r3, #2
 8000e80:	440b      	add	r3, r1
 8000e82:	3319      	adds	r3, #25
 8000e84:	2200      	movs	r2, #0
 8000e86:	701a      	strb	r2, [r3, #0]
		  for(int r=0; r < 4; r++)
 8000e88:	68bb      	ldr	r3, [r7, #8]
 8000e8a:	3301      	adds	r3, #1
 8000e8c:	60bb      	str	r3, [r7, #8]
 8000e8e:	68bb      	ldr	r3, [r7, #8]
 8000e90:	2b03      	cmp	r3, #3
 8000e92:	ddb7      	ble.n	8000e04 <main+0x404>
			  }
		  }
		  if (changed) UpdateModule(&modules[m]);
 8000e94:	68fb      	ldr	r3, [r7, #12]
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d009      	beq.n	8000eae <main+0x4ae>
 8000e9a:	693b      	ldr	r3, [r7, #16]
 8000e9c:	f44f 6249 	mov.w	r2, #3216	; 0xc90
 8000ea0:	fb02 f303 	mul.w	r3, r2, r3
 8000ea4:	4a2c      	ldr	r2, [pc, #176]	; (8000f58 <main+0x558>)
 8000ea6:	4413      	add	r3, r2
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	f7ff fac7 	bl	800043c <UpdateModule>
	  for (int m=0; m < MODULE_COUNT; m++)
 8000eae:	693b      	ldr	r3, [r7, #16]
 8000eb0:	3301      	adds	r3, #1
 8000eb2:	613b      	str	r3, [r7, #16]
 8000eb4:	693b      	ldr	r3, [r7, #16]
 8000eb6:	2b09      	cmp	r3, #9
 8000eb8:	dd9f      	ble.n	8000dfa <main+0x3fa>
	  }



	  for(uint8_t i = 0; i < MODULE_COUNT; i++)
 8000eba:	2300      	movs	r3, #0
 8000ebc:	71fb      	strb	r3, [r7, #7]
 8000ebe:	e019      	b.n	8000ef4 <main+0x4f4>
	  {
		  if(modules[i].status == MODULE_STATUS_NEEDS_UPDATE)
 8000ec0:	79fb      	ldrb	r3, [r7, #7]
 8000ec2:	4a25      	ldr	r2, [pc, #148]	; (8000f58 <main+0x558>)
 8000ec4:	f44f 6149 	mov.w	r1, #3216	; 0xc90
 8000ec8:	fb01 f303 	mul.w	r3, r1, r3
 8000ecc:	4413      	add	r3, r2
 8000ece:	f603 438c 	addw	r3, r3, #3212	; 0xc8c
 8000ed2:	781b      	ldrb	r3, [r3, #0]
 8000ed4:	2b03      	cmp	r3, #3
 8000ed6:	d10a      	bne.n	8000eee <main+0x4ee>
		  {
			  UpdateModuleColor(&modules[i]);
 8000ed8:	79fb      	ldrb	r3, [r7, #7]
 8000eda:	f44f 6249 	mov.w	r2, #3216	; 0xc90
 8000ede:	fb02 f303 	mul.w	r3, r2, r3
 8000ee2:	4a1d      	ldr	r2, [pc, #116]	; (8000f58 <main+0x558>)
 8000ee4:	4413      	add	r3, r2
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	f7ff fa4e 	bl	8000388 <UpdateModuleColor>
			  //UpdateModule(&modules[i]);
			  break;
 8000eec:	e005      	b.n	8000efa <main+0x4fa>
	  for(uint8_t i = 0; i < MODULE_COUNT; i++)
 8000eee:	79fb      	ldrb	r3, [r7, #7]
 8000ef0:	3301      	adds	r3, #1
 8000ef2:	71fb      	strb	r3, [r7, #7]
 8000ef4:	79fb      	ldrb	r3, [r7, #7]
 8000ef6:	2b09      	cmp	r3, #9
 8000ef8:	d9e2      	bls.n	8000ec0 <main+0x4c0>


    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_Delay(1);
 8000efa:	2001      	movs	r0, #1
 8000efc:	f001 f822 	bl	8001f44 <HAL_Delay>
	  if(k==0)
 8000f00:	e76c      	b.n	8000ddc <main+0x3dc>
 8000f02:	bf00      	nop
 8000f04:	20001144 	.word	0x20001144
 8000f08:	20008274 	.word	0x20008274
 8000f0c:	20001dd4 	.word	0x20001dd4
 8000f10:	200082bc 	.word	0x200082bc
 8000f14:	20002a64 	.word	0x20002a64
 8000f18:	200036f4 	.word	0x200036f4
 8000f1c:	20004384 	.word	0x20004384
 8000f20:	20008304 	.word	0x20008304
 8000f24:	20005014 	.word	0x20005014
 8000f28:	2000834c 	.word	0x2000834c
 8000f2c:	20005ca4 	.word	0x20005ca4
 8000f30:	200083dc 	.word	0x200083dc
 8000f34:	20006934 	.word	0x20006934
 8000f38:	200075c4 	.word	0x200075c4
 8000f3c:	20008394 	.word	0x20008394
 8000f40:	2000002c 	.word	0x2000002c
 8000f44:	20008254 	.word	0x20008254
 8000f48:	2000826c 	.word	0x2000826c
 8000f4c:	40011000 	.word	0x40011000
 8000f50:	40011c00 	.word	0x40011c00
 8000f54:	20000054 	.word	0x20000054
 8000f58:	200004b4 	.word	0x200004b4
 8000f5c:	08421085 	.word	0x08421085

08000f60 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b090      	sub	sp, #64	; 0x40
 8000f64:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f66:	f107 0318 	add.w	r3, r7, #24
 8000f6a:	2228      	movs	r2, #40	; 0x28
 8000f6c:	2100      	movs	r1, #0
 8000f6e:	4618      	mov	r0, r3
 8000f70:	f003 ff27 	bl	8004dc2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f74:	1d3b      	adds	r3, r7, #4
 8000f76:	2200      	movs	r2, #0
 8000f78:	601a      	str	r2, [r3, #0]
 8000f7a:	605a      	str	r2, [r3, #4]
 8000f7c:	609a      	str	r2, [r3, #8]
 8000f7e:	60da      	str	r2, [r3, #12]
 8000f80:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000f82:	2301      	movs	r3, #1
 8000f84:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f86:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f8a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f90:	2301      	movs	r3, #1
 8000f92:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f94:	2302      	movs	r3, #2
 8000f96:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f98:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f9c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000f9e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000fa2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fa4:	f107 0318 	add.w	r3, r7, #24
 8000fa8:	4618      	mov	r0, r3
 8000faa:	f002 f861 	bl	8003070 <HAL_RCC_OscConfig>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d001      	beq.n	8000fb8 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000fb4:	f000 f852 	bl	800105c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fb8:	230f      	movs	r3, #15
 8000fba:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fbc:	2302      	movs	r3, #2
 8000fbe:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000fc4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000fc8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000fce:	1d3b      	adds	r3, r7, #4
 8000fd0:	2102      	movs	r1, #2
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	f002 face 	bl	8003574 <HAL_RCC_ClockConfig>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d001      	beq.n	8000fe2 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000fde:	f000 f83d 	bl	800105c <Error_Handler>
  }
}
 8000fe2:	bf00      	nop
 8000fe4:	3740      	adds	r7, #64	; 0x40
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}
	...

08000fec <InitRotary>:

/* USER CODE BEGIN 4 */

void InitRotary(uint8_t arrNr, GPIO_TypeDef *GPIO_port1, uint16_t GPIO_Pin1, GPIO_TypeDef *GPIO_port2, uint16_t GPIO_Pin2)
{
 8000fec:	b480      	push	{r7}
 8000fee:	b085      	sub	sp, #20
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	60b9      	str	r1, [r7, #8]
 8000ff4:	607b      	str	r3, [r7, #4]
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	73fb      	strb	r3, [r7, #15]
 8000ffa:	4613      	mov	r3, r2
 8000ffc:	81bb      	strh	r3, [r7, #12]
	  rotary[arrNr].pin1.GPIO_port=GPIO_port1;
 8000ffe:	7bfa      	ldrb	r2, [r7, #15]
 8001000:	4915      	ldr	r1, [pc, #84]	; (8001058 <InitRotary+0x6c>)
 8001002:	4613      	mov	r3, r2
 8001004:	00db      	lsls	r3, r3, #3
 8001006:	1a9b      	subs	r3, r3, r2
 8001008:	009b      	lsls	r3, r3, #2
 800100a:	440b      	add	r3, r1
 800100c:	3308      	adds	r3, #8
 800100e:	68ba      	ldr	r2, [r7, #8]
 8001010:	601a      	str	r2, [r3, #0]
	  rotary[arrNr].pin1.GPIO_Pin=GPIO_Pin1;
 8001012:	7bfa      	ldrb	r2, [r7, #15]
 8001014:	4910      	ldr	r1, [pc, #64]	; (8001058 <InitRotary+0x6c>)
 8001016:	4613      	mov	r3, r2
 8001018:	00db      	lsls	r3, r3, #3
 800101a:	1a9b      	subs	r3, r3, r2
 800101c:	009b      	lsls	r3, r3, #2
 800101e:	440b      	add	r3, r1
 8001020:	330c      	adds	r3, #12
 8001022:	89ba      	ldrh	r2, [r7, #12]
 8001024:	801a      	strh	r2, [r3, #0]
	  rotary[arrNr].pin2.GPIO_port=GPIO_port2;
 8001026:	7bfa      	ldrb	r2, [r7, #15]
 8001028:	490b      	ldr	r1, [pc, #44]	; (8001058 <InitRotary+0x6c>)
 800102a:	4613      	mov	r3, r2
 800102c:	00db      	lsls	r3, r3, #3
 800102e:	1a9b      	subs	r3, r3, r2
 8001030:	009b      	lsls	r3, r3, #2
 8001032:	440b      	add	r3, r1
 8001034:	3310      	adds	r3, #16
 8001036:	687a      	ldr	r2, [r7, #4]
 8001038:	601a      	str	r2, [r3, #0]
	  rotary[arrNr].pin2.GPIO_Pin=GPIO_Pin2;
 800103a:	7bfa      	ldrb	r2, [r7, #15]
 800103c:	4906      	ldr	r1, [pc, #24]	; (8001058 <InitRotary+0x6c>)
 800103e:	4613      	mov	r3, r2
 8001040:	00db      	lsls	r3, r3, #3
 8001042:	1a9b      	subs	r3, r3, r2
 8001044:	009b      	lsls	r3, r3, #2
 8001046:	440b      	add	r3, r1
 8001048:	3314      	adds	r3, #20
 800104a:	8b3a      	ldrh	r2, [r7, #24]
 800104c:	801a      	strh	r2, [r3, #0]
}
 800104e:	bf00      	nop
 8001050:	3714      	adds	r7, #20
 8001052:	46bd      	mov	sp, r7
 8001054:	bc80      	pop	{r7}
 8001056:	4770      	bx	lr
 8001058:	20000054 	.word	0x20000054

0800105c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800105c:	b480      	push	{r7}
 800105e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001060:	b672      	cpsid	i
}
 8001062:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001064:	e7fe      	b.n	8001064 <Error_Handler+0x8>
	...

08001068 <RotaryProcess>:
  {R_CCW_NEXT, R_CCW_FINAL, R_CCW_BEGIN, R_START},
};
#endif

void RotaryProcess(RotaryEnc_t *re, uint8_t max)
{
 8001068:	b480      	push	{r7}
 800106a:	b085      	sub	sp, #20
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
 8001070:	460b      	mov	r3, r1
 8001072:	70fb      	strb	r3, [r7, #3]
  // Grab state of input pins.
  unsigned char pinstate = (re->pinStatus.status.r1 << 1) | re->pinStatus.status.r2;
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	781b      	ldrb	r3, [r3, #0]
 8001078:	005b      	lsls	r3, r3, #1
 800107a:	b25a      	sxtb	r2, r3
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	785b      	ldrb	r3, [r3, #1]
 8001080:	b25b      	sxtb	r3, r3
 8001082:	4313      	orrs	r3, r2
 8001084:	b25b      	sxtb	r3, r3
 8001086:	73fb      	strb	r3, [r7, #15]
  re->historyStatus.data = re->pinStatus.data;
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	881a      	ldrh	r2, [r3, #0]
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	805a      	strh	r2, [r3, #2]

  // Determine new state from the pins and state table.
  re->state = ttable[re->state & 0xf][pinstate];
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	791b      	ldrb	r3, [r3, #4]
 8001094:	f003 020f 	and.w	r2, r3, #15
 8001098:	7bfb      	ldrb	r3, [r7, #15]
 800109a:	491b      	ldr	r1, [pc, #108]	; (8001108 <RotaryProcess+0xa0>)
 800109c:	0092      	lsls	r2, r2, #2
 800109e:	440a      	add	r2, r1
 80010a0:	4413      	add	r3, r2
 80010a2:	781a      	ldrb	r2, [r3, #0]
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	711a      	strb	r2, [r3, #4]

  // Return emit bits, ie the generated event.
  if ((re->state & 0x30)==DIR_CW)
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	791b      	ldrb	r3, [r3, #4]
 80010ac:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80010b0:	2b10      	cmp	r3, #16
 80010b2:	d10d      	bne.n	80010d0 <RotaryProcess+0x68>
  {
	  re->counter+=1;
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	7e1b      	ldrb	r3, [r3, #24]
 80010b8:	3301      	adds	r3, #1
 80010ba:	b2da      	uxtb	r2, r3
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	761a      	strb	r2, [r3, #24]
	  if(re->counter>max) re->counter=0;
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	7e1b      	ldrb	r3, [r3, #24]
 80010c4:	78fa      	ldrb	r2, [r7, #3]
 80010c6:	429a      	cmp	r2, r3
 80010c8:	d202      	bcs.n	80010d0 <RotaryProcess+0x68>
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	2200      	movs	r2, #0
 80010ce:	761a      	strb	r2, [r3, #24]

  }
  if ((re->state & 0x30)==DIR_CCW)
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	791b      	ldrb	r3, [r3, #4]
 80010d4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80010d8:	2b20      	cmp	r3, #32
 80010da:	d10d      	bne.n	80010f8 <RotaryProcess+0x90>
  {
	  re->counter-=1;
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	7e1b      	ldrb	r3, [r3, #24]
 80010e0:	3b01      	subs	r3, #1
 80010e2:	b2da      	uxtb	r2, r3
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	761a      	strb	r2, [r3, #24]
	  if(re->counter>max) re->counter=max;
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	7e1b      	ldrb	r3, [r3, #24]
 80010ec:	78fa      	ldrb	r2, [r7, #3]
 80010ee:	429a      	cmp	r2, r3
 80010f0:	d202      	bcs.n	80010f8 <RotaryProcess+0x90>
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	78fa      	ldrb	r2, [r7, #3]
 80010f6:	761a      	strb	r2, [r3, #24]
  }
  re->changed = 1;
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	2201      	movs	r2, #1
 80010fc:	765a      	strb	r2, [r3, #25]
}
 80010fe:	bf00      	nop
 8001100:	3714      	adds	r7, #20
 8001102:	46bd      	mov	sp, r7
 8001104:	bc80      	pop	{r7}
 8001106:	4770      	bx	lr
 8001108:	08004eb0 	.word	0x08004eb0

0800110c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800110c:	b480      	push	{r7}
 800110e:	b085      	sub	sp, #20
 8001110:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001112:	4b15      	ldr	r3, [pc, #84]	; (8001168 <HAL_MspInit+0x5c>)
 8001114:	699b      	ldr	r3, [r3, #24]
 8001116:	4a14      	ldr	r2, [pc, #80]	; (8001168 <HAL_MspInit+0x5c>)
 8001118:	f043 0301 	orr.w	r3, r3, #1
 800111c:	6193      	str	r3, [r2, #24]
 800111e:	4b12      	ldr	r3, [pc, #72]	; (8001168 <HAL_MspInit+0x5c>)
 8001120:	699b      	ldr	r3, [r3, #24]
 8001122:	f003 0301 	and.w	r3, r3, #1
 8001126:	60bb      	str	r3, [r7, #8]
 8001128:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800112a:	4b0f      	ldr	r3, [pc, #60]	; (8001168 <HAL_MspInit+0x5c>)
 800112c:	69db      	ldr	r3, [r3, #28]
 800112e:	4a0e      	ldr	r2, [pc, #56]	; (8001168 <HAL_MspInit+0x5c>)
 8001130:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001134:	61d3      	str	r3, [r2, #28]
 8001136:	4b0c      	ldr	r3, [pc, #48]	; (8001168 <HAL_MspInit+0x5c>)
 8001138:	69db      	ldr	r3, [r3, #28]
 800113a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800113e:	607b      	str	r3, [r7, #4]
 8001140:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001142:	4b0a      	ldr	r3, [pc, #40]	; (800116c <HAL_MspInit+0x60>)
 8001144:	685b      	ldr	r3, [r3, #4]
 8001146:	60fb      	str	r3, [r7, #12]
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800114e:	60fb      	str	r3, [r7, #12]
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001156:	60fb      	str	r3, [r7, #12]
 8001158:	4a04      	ldr	r2, [pc, #16]	; (800116c <HAL_MspInit+0x60>)
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800115e:	bf00      	nop
 8001160:	3714      	adds	r7, #20
 8001162:	46bd      	mov	sp, r7
 8001164:	bc80      	pop	{r7}
 8001166:	4770      	bx	lr
 8001168:	40021000 	.word	0x40021000
 800116c:	40010000 	.word	0x40010000

08001170 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001170:	b480      	push	{r7}
 8001172:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001174:	e7fe      	b.n	8001174 <NMI_Handler+0x4>

08001176 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001176:	b480      	push	{r7}
 8001178:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800117a:	e7fe      	b.n	800117a <HardFault_Handler+0x4>

0800117c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800117c:	b480      	push	{r7}
 800117e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001180:	e7fe      	b.n	8001180 <MemManage_Handler+0x4>

08001182 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001182:	b480      	push	{r7}
 8001184:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001186:	e7fe      	b.n	8001186 <BusFault_Handler+0x4>

08001188 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001188:	b480      	push	{r7}
 800118a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800118c:	e7fe      	b.n	800118c <UsageFault_Handler+0x4>

0800118e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800118e:	b480      	push	{r7}
 8001190:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001192:	bf00      	nop
 8001194:	46bd      	mov	sp, r7
 8001196:	bc80      	pop	{r7}
 8001198:	4770      	bx	lr

0800119a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800119a:	b480      	push	{r7}
 800119c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800119e:	bf00      	nop
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bc80      	pop	{r7}
 80011a4:	4770      	bx	lr

080011a6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011a6:	b480      	push	{r7}
 80011a8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011aa:	bf00      	nop
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bc80      	pop	{r7}
 80011b0:	4770      	bx	lr

080011b2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011b2:	b580      	push	{r7, lr}
 80011b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011b6:	f000 fea9 	bl	8001f0c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011ba:	bf00      	nop
 80011bc:	bd80      	pop	{r7, pc}
	...

080011c0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch3);
 80011c4:	4802      	ldr	r0, [pc, #8]	; (80011d0 <DMA1_Channel1_IRQHandler+0x10>)
 80011c6:	f001 fb0d 	bl	80027e4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80011ca:	bf00      	nop
 80011cc:	bd80      	pop	{r7, pc}
 80011ce:	bf00      	nop
 80011d0:	20008424 	.word	0x20008424

080011d4 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch3);
 80011d8:	4802      	ldr	r0, [pc, #8]	; (80011e4 <DMA1_Channel2_IRQHandler+0x10>)
 80011da:	f001 fb03 	bl	80027e4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80011de:	bf00      	nop
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	bf00      	nop
 80011e4:	200084f0 	.word	0x200084f0

080011e8 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch4_up);
 80011ec:	4802      	ldr	r0, [pc, #8]	; (80011f8 <DMA1_Channel3_IRQHandler+0x10>)
 80011ee:	f001 faf9 	bl	80027e4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 80011f2:	bf00      	nop
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop
 80011f8:	20008534 	.word	0x20008534

080011fc <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim4_ch2);
 8001200:	4802      	ldr	r0, [pc, #8]	; (800120c <DMA1_Channel4_IRQHandler+0x10>)
 8001202:	f001 faef 	bl	80027e4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8001206:	bf00      	nop
 8001208:	bd80      	pop	{r7, pc}
 800120a:	bf00      	nop
 800120c:	20008578 	.word	0x20008578

08001210 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim4_ch3);
 8001214:	4802      	ldr	r0, [pc, #8]	; (8001220 <DMA1_Channel5_IRQHandler+0x10>)
 8001216:	f001 fae5 	bl	80027e4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 800121a:	bf00      	nop
 800121c:	bd80      	pop	{r7, pc}
 800121e:	bf00      	nop
 8001220:	200085bc 	.word	0x200085bc

08001224 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch1_trig);
 8001228:	4802      	ldr	r0, [pc, #8]	; (8001234 <DMA1_Channel6_IRQHandler+0x10>)
 800122a:	f001 fadb 	bl	80027e4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 800122e:	bf00      	nop
 8001230:	bd80      	pop	{r7, pc}
 8001232:	bf00      	nop
 8001234:	200084ac 	.word	0x200084ac

08001238 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch2_ch4);
 800123c:	4802      	ldr	r0, [pc, #8]	; (8001248 <DMA1_Channel7_IRQHandler+0x10>)
 800123e:	f001 fad1 	bl	80027e4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8001242:	bf00      	nop
 8001244:	bd80      	pop	{r7, pc}
 8001246:	bf00      	nop
 8001248:	20008468 	.word	0x20008468

0800124c <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001250:	4802      	ldr	r0, [pc, #8]	; (800125c <TIM7_IRQHandler+0x10>)
 8001252:	f002 fe77 	bl	8003f44 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8001256:	bf00      	nop
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	20008394 	.word	0x20008394

08001260 <DMA2_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA2 channel1 global interrupt.
  */
void DMA2_Channel1_IRQHandler(void)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel1_IRQn 0 */

  /* USER CODE END DMA2_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim5_ch4_trig);
 8001264:	4802      	ldr	r0, [pc, #8]	; (8001270 <DMA2_Channel1_IRQHandler+0x10>)
 8001266:	f001 fabd 	bl	80027e4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel1_IRQn 1 */

  /* USER CODE END DMA2_Channel1_IRQn 1 */
}
 800126a:	bf00      	nop
 800126c:	bd80      	pop	{r7, pc}
 800126e:	bf00      	nop
 8001270:	20008600 	.word	0x20008600

08001274 <DMA2_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA2 channel2 global interrupt.
  */
void DMA2_Channel2_IRQHandler(void)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel2_IRQn 0 */

  /* USER CODE END DMA2_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim8_ch4_trig_com);
 8001278:	4802      	ldr	r0, [pc, #8]	; (8001284 <DMA2_Channel2_IRQHandler+0x10>)
 800127a:	f001 fab3 	bl	80027e4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel2_IRQn 1 */

  /* USER CODE END DMA2_Channel2_IRQn 1 */
}
 800127e:	bf00      	nop
 8001280:	bd80      	pop	{r7, pc}
 8001282:	bf00      	nop
 8001284:	20008644 	.word	0x20008644

08001288 <DMA2_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA2 channel3 global interrupt.
  */
void DMA2_Channel3_IRQHandler(void)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel3_IRQn 0 */

  /* USER CODE END DMA2_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim8_ch1);
 800128c:	4802      	ldr	r0, [pc, #8]	; (8001298 <DMA2_Channel3_IRQHandler+0x10>)
 800128e:	f001 faa9 	bl	80027e4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel3_IRQn 1 */

  /* USER CODE END DMA2_Channel3_IRQn 1 */
}
 8001292:	bf00      	nop
 8001294:	bd80      	pop	{r7, pc}
 8001296:	bf00      	nop
 8001298:	20008688 	.word	0x20008688

0800129c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800129c:	b480      	push	{r7}
 800129e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80012a0:	bf00      	nop
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bc80      	pop	{r7}
 80012a6:	4770      	bx	lr

080012a8 <MX_TIM2_Init>:
DMA_HandleTypeDef hdma_tim8_ch4_trig_com;
DMA_HandleTypeDef hdma_tim8_ch1;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b08a      	sub	sp, #40	; 0x28
 80012ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012ae:	f107 0320 	add.w	r3, r7, #32
 80012b2:	2200      	movs	r2, #0
 80012b4:	601a      	str	r2, [r3, #0]
 80012b6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80012b8:	1d3b      	adds	r3, r7, #4
 80012ba:	2200      	movs	r2, #0
 80012bc:	601a      	str	r2, [r3, #0]
 80012be:	605a      	str	r2, [r3, #4]
 80012c0:	609a      	str	r2, [r3, #8]
 80012c2:	60da      	str	r2, [r3, #12]
 80012c4:	611a      	str	r2, [r3, #16]
 80012c6:	615a      	str	r2, [r3, #20]
 80012c8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80012ca:	4b27      	ldr	r3, [pc, #156]	; (8001368 <MX_TIM2_Init+0xc0>)
 80012cc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80012d0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80012d2:	4b25      	ldr	r3, [pc, #148]	; (8001368 <MX_TIM2_Init+0xc0>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012d8:	4b23      	ldr	r3, [pc, #140]	; (8001368 <MX_TIM2_Init+0xc0>)
 80012da:	2200      	movs	r2, #0
 80012dc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 64;
 80012de:	4b22      	ldr	r3, [pc, #136]	; (8001368 <MX_TIM2_Init+0xc0>)
 80012e0:	2240      	movs	r2, #64	; 0x40
 80012e2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012e4:	4b20      	ldr	r3, [pc, #128]	; (8001368 <MX_TIM2_Init+0xc0>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012ea:	4b1f      	ldr	r3, [pc, #124]	; (8001368 <MX_TIM2_Init+0xc0>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80012f0:	481d      	ldr	r0, [pc, #116]	; (8001368 <MX_TIM2_Init+0xc0>)
 80012f2:	f002 fb4b 	bl	800398c <HAL_TIM_PWM_Init>
 80012f6:	4603      	mov	r3, r0
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d001      	beq.n	8001300 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 80012fc:	f7ff feae 	bl	800105c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001300:	2300      	movs	r3, #0
 8001302:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001304:	2300      	movs	r3, #0
 8001306:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001308:	f107 0320 	add.w	r3, r7, #32
 800130c:	4619      	mov	r1, r3
 800130e:	4816      	ldr	r0, [pc, #88]	; (8001368 <MX_TIM2_Init+0xc0>)
 8001310:	f003 fc88 	bl	8004c24 <HAL_TIMEx_MasterConfigSynchronization>
 8001314:	4603      	mov	r3, r0
 8001316:	2b00      	cmp	r3, #0
 8001318:	d001      	beq.n	800131e <MX_TIM2_Init+0x76>
  {
    Error_Handler();
 800131a:	f7ff fe9f 	bl	800105c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800131e:	2360      	movs	r3, #96	; 0x60
 8001320:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001322:	2300      	movs	r3, #0
 8001324:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001326:	2300      	movs	r3, #0
 8001328:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800132a:	2300      	movs	r3, #0
 800132c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800132e:	1d3b      	adds	r3, r7, #4
 8001330:	2204      	movs	r2, #4
 8001332:	4619      	mov	r1, r3
 8001334:	480c      	ldr	r0, [pc, #48]	; (8001368 <MX_TIM2_Init+0xc0>)
 8001336:	f002 ff0d 	bl	8004154 <HAL_TIM_PWM_ConfigChannel>
 800133a:	4603      	mov	r3, r0
 800133c:	2b00      	cmp	r3, #0
 800133e:	d001      	beq.n	8001344 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8001340:	f7ff fe8c 	bl	800105c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001344:	1d3b      	adds	r3, r7, #4
 8001346:	2208      	movs	r2, #8
 8001348:	4619      	mov	r1, r3
 800134a:	4807      	ldr	r0, [pc, #28]	; (8001368 <MX_TIM2_Init+0xc0>)
 800134c:	f002 ff02 	bl	8004154 <HAL_TIM_PWM_ConfigChannel>
 8001350:	4603      	mov	r3, r0
 8001352:	2b00      	cmp	r3, #0
 8001354:	d001      	beq.n	800135a <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8001356:	f7ff fe81 	bl	800105c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800135a:	4803      	ldr	r0, [pc, #12]	; (8001368 <MX_TIM2_Init+0xc0>)
 800135c:	f000 fc8a 	bl	8001c74 <HAL_TIM_MspPostInit>

}
 8001360:	bf00      	nop
 8001362:	3728      	adds	r7, #40	; 0x28
 8001364:	46bd      	mov	sp, r7
 8001366:	bd80      	pop	{r7, pc}
 8001368:	20008274 	.word	0x20008274

0800136c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b08a      	sub	sp, #40	; 0x28
 8001370:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001372:	f107 0320 	add.w	r3, r7, #32
 8001376:	2200      	movs	r2, #0
 8001378:	601a      	str	r2, [r3, #0]
 800137a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800137c:	1d3b      	adds	r3, r7, #4
 800137e:	2200      	movs	r2, #0
 8001380:	601a      	str	r2, [r3, #0]
 8001382:	605a      	str	r2, [r3, #4]
 8001384:	609a      	str	r2, [r3, #8]
 8001386:	60da      	str	r2, [r3, #12]
 8001388:	611a      	str	r2, [r3, #16]
 800138a:	615a      	str	r2, [r3, #20]
 800138c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800138e:	4b2c      	ldr	r3, [pc, #176]	; (8001440 <MX_TIM3_Init+0xd4>)
 8001390:	4a2c      	ldr	r2, [pc, #176]	; (8001444 <MX_TIM3_Init+0xd8>)
 8001392:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001394:	4b2a      	ldr	r3, [pc, #168]	; (8001440 <MX_TIM3_Init+0xd4>)
 8001396:	2200      	movs	r2, #0
 8001398:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800139a:	4b29      	ldr	r3, [pc, #164]	; (8001440 <MX_TIM3_Init+0xd4>)
 800139c:	2200      	movs	r2, #0
 800139e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 64;
 80013a0:	4b27      	ldr	r3, [pc, #156]	; (8001440 <MX_TIM3_Init+0xd4>)
 80013a2:	2240      	movs	r2, #64	; 0x40
 80013a4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013a6:	4b26      	ldr	r3, [pc, #152]	; (8001440 <MX_TIM3_Init+0xd4>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013ac:	4b24      	ldr	r3, [pc, #144]	; (8001440 <MX_TIM3_Init+0xd4>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80013b2:	4823      	ldr	r0, [pc, #140]	; (8001440 <MX_TIM3_Init+0xd4>)
 80013b4:	f002 faea 	bl	800398c <HAL_TIM_PWM_Init>
 80013b8:	4603      	mov	r3, r0
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d001      	beq.n	80013c2 <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 80013be:	f7ff fe4d 	bl	800105c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013c2:	2300      	movs	r3, #0
 80013c4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013c6:	2300      	movs	r3, #0
 80013c8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80013ca:	f107 0320 	add.w	r3, r7, #32
 80013ce:	4619      	mov	r1, r3
 80013d0:	481b      	ldr	r0, [pc, #108]	; (8001440 <MX_TIM3_Init+0xd4>)
 80013d2:	f003 fc27 	bl	8004c24 <HAL_TIMEx_MasterConfigSynchronization>
 80013d6:	4603      	mov	r3, r0
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d001      	beq.n	80013e0 <MX_TIM3_Init+0x74>
  {
    Error_Handler();
 80013dc:	f7ff fe3e 	bl	800105c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80013e0:	2360      	movs	r3, #96	; 0x60
 80013e2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80013e4:	2300      	movs	r3, #0
 80013e6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80013e8:	2300      	movs	r3, #0
 80013ea:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80013ec:	2300      	movs	r3, #0
 80013ee:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80013f0:	1d3b      	adds	r3, r7, #4
 80013f2:	2200      	movs	r2, #0
 80013f4:	4619      	mov	r1, r3
 80013f6:	4812      	ldr	r0, [pc, #72]	; (8001440 <MX_TIM3_Init+0xd4>)
 80013f8:	f002 feac 	bl	8004154 <HAL_TIM_PWM_ConfigChannel>
 80013fc:	4603      	mov	r3, r0
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d001      	beq.n	8001406 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8001402:	f7ff fe2b 	bl	800105c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001406:	1d3b      	adds	r3, r7, #4
 8001408:	2208      	movs	r2, #8
 800140a:	4619      	mov	r1, r3
 800140c:	480c      	ldr	r0, [pc, #48]	; (8001440 <MX_TIM3_Init+0xd4>)
 800140e:	f002 fea1 	bl	8004154 <HAL_TIM_PWM_ConfigChannel>
 8001412:	4603      	mov	r3, r0
 8001414:	2b00      	cmp	r3, #0
 8001416:	d001      	beq.n	800141c <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001418:	f7ff fe20 	bl	800105c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800141c:	1d3b      	adds	r3, r7, #4
 800141e:	220c      	movs	r2, #12
 8001420:	4619      	mov	r1, r3
 8001422:	4807      	ldr	r0, [pc, #28]	; (8001440 <MX_TIM3_Init+0xd4>)
 8001424:	f002 fe96 	bl	8004154 <HAL_TIM_PWM_ConfigChannel>
 8001428:	4603      	mov	r3, r0
 800142a:	2b00      	cmp	r3, #0
 800142c:	d001      	beq.n	8001432 <MX_TIM3_Init+0xc6>
  {
    Error_Handler();
 800142e:	f7ff fe15 	bl	800105c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001432:	4803      	ldr	r0, [pc, #12]	; (8001440 <MX_TIM3_Init+0xd4>)
 8001434:	f000 fc1e 	bl	8001c74 <HAL_TIM_MspPostInit>

}
 8001438:	bf00      	nop
 800143a:	3728      	adds	r7, #40	; 0x28
 800143c:	46bd      	mov	sp, r7
 800143e:	bd80      	pop	{r7, pc}
 8001440:	200082bc 	.word	0x200082bc
 8001444:	40000400 	.word	0x40000400

08001448 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b08e      	sub	sp, #56	; 0x38
 800144c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800144e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001452:	2200      	movs	r2, #0
 8001454:	601a      	str	r2, [r3, #0]
 8001456:	605a      	str	r2, [r3, #4]
 8001458:	609a      	str	r2, [r3, #8]
 800145a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800145c:	f107 0320 	add.w	r3, r7, #32
 8001460:	2200      	movs	r2, #0
 8001462:	601a      	str	r2, [r3, #0]
 8001464:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001466:	1d3b      	adds	r3, r7, #4
 8001468:	2200      	movs	r2, #0
 800146a:	601a      	str	r2, [r3, #0]
 800146c:	605a      	str	r2, [r3, #4]
 800146e:	609a      	str	r2, [r3, #8]
 8001470:	60da      	str	r2, [r3, #12]
 8001472:	611a      	str	r2, [r3, #16]
 8001474:	615a      	str	r2, [r3, #20]
 8001476:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001478:	4b31      	ldr	r3, [pc, #196]	; (8001540 <MX_TIM4_Init+0xf8>)
 800147a:	4a32      	ldr	r2, [pc, #200]	; (8001544 <MX_TIM4_Init+0xfc>)
 800147c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800147e:	4b30      	ldr	r3, [pc, #192]	; (8001540 <MX_TIM4_Init+0xf8>)
 8001480:	2200      	movs	r2, #0
 8001482:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001484:	4b2e      	ldr	r3, [pc, #184]	; (8001540 <MX_TIM4_Init+0xf8>)
 8001486:	2200      	movs	r2, #0
 8001488:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 64;
 800148a:	4b2d      	ldr	r3, [pc, #180]	; (8001540 <MX_TIM4_Init+0xf8>)
 800148c:	2240      	movs	r2, #64	; 0x40
 800148e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001490:	4b2b      	ldr	r3, [pc, #172]	; (8001540 <MX_TIM4_Init+0xf8>)
 8001492:	2200      	movs	r2, #0
 8001494:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001496:	4b2a      	ldr	r3, [pc, #168]	; (8001540 <MX_TIM4_Init+0xf8>)
 8001498:	2200      	movs	r2, #0
 800149a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800149c:	4828      	ldr	r0, [pc, #160]	; (8001540 <MX_TIM4_Init+0xf8>)
 800149e:	f002 f9c5 	bl	800382c <HAL_TIM_Base_Init>
 80014a2:	4603      	mov	r3, r0
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d001      	beq.n	80014ac <MX_TIM4_Init+0x64>
  {
    Error_Handler();
 80014a8:	f7ff fdd8 	bl	800105c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014b0:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80014b2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80014b6:	4619      	mov	r1, r3
 80014b8:	4821      	ldr	r0, [pc, #132]	; (8001540 <MX_TIM4_Init+0xf8>)
 80014ba:	f002 ff0d 	bl	80042d8 <HAL_TIM_ConfigClockSource>
 80014be:	4603      	mov	r3, r0
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d001      	beq.n	80014c8 <MX_TIM4_Init+0x80>
  {
    Error_Handler();
 80014c4:	f7ff fdca 	bl	800105c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80014c8:	481d      	ldr	r0, [pc, #116]	; (8001540 <MX_TIM4_Init+0xf8>)
 80014ca:	f002 fa5f 	bl	800398c <HAL_TIM_PWM_Init>
 80014ce:	4603      	mov	r3, r0
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d001      	beq.n	80014d8 <MX_TIM4_Init+0x90>
  {
    Error_Handler();
 80014d4:	f7ff fdc2 	bl	800105c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014d8:	2300      	movs	r3, #0
 80014da:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014dc:	2300      	movs	r3, #0
 80014de:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80014e0:	f107 0320 	add.w	r3, r7, #32
 80014e4:	4619      	mov	r1, r3
 80014e6:	4816      	ldr	r0, [pc, #88]	; (8001540 <MX_TIM4_Init+0xf8>)
 80014e8:	f003 fb9c 	bl	8004c24 <HAL_TIMEx_MasterConfigSynchronization>
 80014ec:	4603      	mov	r3, r0
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d001      	beq.n	80014f6 <MX_TIM4_Init+0xae>
  {
    Error_Handler();
 80014f2:	f7ff fdb3 	bl	800105c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80014f6:	2360      	movs	r3, #96	; 0x60
 80014f8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80014fa:	2300      	movs	r3, #0
 80014fc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80014fe:	2300      	movs	r3, #0
 8001500:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001502:	2300      	movs	r3, #0
 8001504:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001506:	1d3b      	adds	r3, r7, #4
 8001508:	2204      	movs	r2, #4
 800150a:	4619      	mov	r1, r3
 800150c:	480c      	ldr	r0, [pc, #48]	; (8001540 <MX_TIM4_Init+0xf8>)
 800150e:	f002 fe21 	bl	8004154 <HAL_TIM_PWM_ConfigChannel>
 8001512:	4603      	mov	r3, r0
 8001514:	2b00      	cmp	r3, #0
 8001516:	d001      	beq.n	800151c <MX_TIM4_Init+0xd4>
  {
    Error_Handler();
 8001518:	f7ff fda0 	bl	800105c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800151c:	1d3b      	adds	r3, r7, #4
 800151e:	2208      	movs	r2, #8
 8001520:	4619      	mov	r1, r3
 8001522:	4807      	ldr	r0, [pc, #28]	; (8001540 <MX_TIM4_Init+0xf8>)
 8001524:	f002 fe16 	bl	8004154 <HAL_TIM_PWM_ConfigChannel>
 8001528:	4603      	mov	r3, r0
 800152a:	2b00      	cmp	r3, #0
 800152c:	d001      	beq.n	8001532 <MX_TIM4_Init+0xea>
  {
    Error_Handler();
 800152e:	f7ff fd95 	bl	800105c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001532:	4803      	ldr	r0, [pc, #12]	; (8001540 <MX_TIM4_Init+0xf8>)
 8001534:	f000 fb9e 	bl	8001c74 <HAL_TIM_MspPostInit>

}
 8001538:	bf00      	nop
 800153a:	3738      	adds	r7, #56	; 0x38
 800153c:	46bd      	mov	sp, r7
 800153e:	bd80      	pop	{r7, pc}
 8001540:	20008304 	.word	0x20008304
 8001544:	40000800 	.word	0x40000800

08001548 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b08a      	sub	sp, #40	; 0x28
 800154c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800154e:	f107 0320 	add.w	r3, r7, #32
 8001552:	2200      	movs	r2, #0
 8001554:	601a      	str	r2, [r3, #0]
 8001556:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001558:	1d3b      	adds	r3, r7, #4
 800155a:	2200      	movs	r2, #0
 800155c:	601a      	str	r2, [r3, #0]
 800155e:	605a      	str	r2, [r3, #4]
 8001560:	609a      	str	r2, [r3, #8]
 8001562:	60da      	str	r2, [r3, #12]
 8001564:	611a      	str	r2, [r3, #16]
 8001566:	615a      	str	r2, [r3, #20]
 8001568:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800156a:	4b21      	ldr	r3, [pc, #132]	; (80015f0 <MX_TIM5_Init+0xa8>)
 800156c:	4a21      	ldr	r2, [pc, #132]	; (80015f4 <MX_TIM5_Init+0xac>)
 800156e:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001570:	4b1f      	ldr	r3, [pc, #124]	; (80015f0 <MX_TIM5_Init+0xa8>)
 8001572:	2200      	movs	r2, #0
 8001574:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001576:	4b1e      	ldr	r3, [pc, #120]	; (80015f0 <MX_TIM5_Init+0xa8>)
 8001578:	2200      	movs	r2, #0
 800157a:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 64;
 800157c:	4b1c      	ldr	r3, [pc, #112]	; (80015f0 <MX_TIM5_Init+0xa8>)
 800157e:	2240      	movs	r2, #64	; 0x40
 8001580:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001582:	4b1b      	ldr	r3, [pc, #108]	; (80015f0 <MX_TIM5_Init+0xa8>)
 8001584:	2200      	movs	r2, #0
 8001586:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001588:	4b19      	ldr	r3, [pc, #100]	; (80015f0 <MX_TIM5_Init+0xa8>)
 800158a:	2200      	movs	r2, #0
 800158c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 800158e:	4818      	ldr	r0, [pc, #96]	; (80015f0 <MX_TIM5_Init+0xa8>)
 8001590:	f002 f9fc 	bl	800398c <HAL_TIM_PWM_Init>
 8001594:	4603      	mov	r3, r0
 8001596:	2b00      	cmp	r3, #0
 8001598:	d001      	beq.n	800159e <MX_TIM5_Init+0x56>
  {
    Error_Handler();
 800159a:	f7ff fd5f 	bl	800105c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800159e:	2300      	movs	r3, #0
 80015a0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015a2:	2300      	movs	r3, #0
 80015a4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80015a6:	f107 0320 	add.w	r3, r7, #32
 80015aa:	4619      	mov	r1, r3
 80015ac:	4810      	ldr	r0, [pc, #64]	; (80015f0 <MX_TIM5_Init+0xa8>)
 80015ae:	f003 fb39 	bl	8004c24 <HAL_TIMEx_MasterConfigSynchronization>
 80015b2:	4603      	mov	r3, r0
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d001      	beq.n	80015bc <MX_TIM5_Init+0x74>
  {
    Error_Handler();
 80015b8:	f7ff fd50 	bl	800105c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80015bc:	2360      	movs	r3, #96	; 0x60
 80015be:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80015c0:	2300      	movs	r3, #0
 80015c2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80015c4:	2300      	movs	r3, #0
 80015c6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80015c8:	2300      	movs	r3, #0
 80015ca:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80015cc:	1d3b      	adds	r3, r7, #4
 80015ce:	220c      	movs	r2, #12
 80015d0:	4619      	mov	r1, r3
 80015d2:	4807      	ldr	r0, [pc, #28]	; (80015f0 <MX_TIM5_Init+0xa8>)
 80015d4:	f002 fdbe 	bl	8004154 <HAL_TIM_PWM_ConfigChannel>
 80015d8:	4603      	mov	r3, r0
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d001      	beq.n	80015e2 <MX_TIM5_Init+0x9a>
  {
    Error_Handler();
 80015de:	f7ff fd3d 	bl	800105c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 80015e2:	4803      	ldr	r0, [pc, #12]	; (80015f0 <MX_TIM5_Init+0xa8>)
 80015e4:	f000 fb46 	bl	8001c74 <HAL_TIM_MspPostInit>

}
 80015e8:	bf00      	nop
 80015ea:	3728      	adds	r7, #40	; 0x28
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bd80      	pop	{r7, pc}
 80015f0:	2000834c 	.word	0x2000834c
 80015f4:	40000c00 	.word	0x40000c00

080015f8 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b082      	sub	sp, #8
 80015fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015fe:	463b      	mov	r3, r7
 8001600:	2200      	movs	r2, #0
 8001602:	601a      	str	r2, [r3, #0]
 8001604:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001606:	4b15      	ldr	r3, [pc, #84]	; (800165c <MX_TIM7_Init+0x64>)
 8001608:	4a15      	ldr	r2, [pc, #84]	; (8001660 <MX_TIM7_Init+0x68>)
 800160a:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 7200-1;
 800160c:	4b13      	ldr	r3, [pc, #76]	; (800165c <MX_TIM7_Init+0x64>)
 800160e:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8001612:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001614:	4b11      	ldr	r3, [pc, #68]	; (800165c <MX_TIM7_Init+0x64>)
 8001616:	2200      	movs	r2, #0
 8001618:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 10-1;
 800161a:	4b10      	ldr	r3, [pc, #64]	; (800165c <MX_TIM7_Init+0x64>)
 800161c:	2209      	movs	r2, #9
 800161e:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001620:	4b0e      	ldr	r3, [pc, #56]	; (800165c <MX_TIM7_Init+0x64>)
 8001622:	2200      	movs	r2, #0
 8001624:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001626:	480d      	ldr	r0, [pc, #52]	; (800165c <MX_TIM7_Init+0x64>)
 8001628:	f002 f900 	bl	800382c <HAL_TIM_Base_Init>
 800162c:	4603      	mov	r3, r0
 800162e:	2b00      	cmp	r3, #0
 8001630:	d001      	beq.n	8001636 <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 8001632:	f7ff fd13 	bl	800105c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001636:	2300      	movs	r3, #0
 8001638:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800163a:	2300      	movs	r3, #0
 800163c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800163e:	463b      	mov	r3, r7
 8001640:	4619      	mov	r1, r3
 8001642:	4806      	ldr	r0, [pc, #24]	; (800165c <MX_TIM7_Init+0x64>)
 8001644:	f003 faee 	bl	8004c24 <HAL_TIMEx_MasterConfigSynchronization>
 8001648:	4603      	mov	r3, r0
 800164a:	2b00      	cmp	r3, #0
 800164c:	d001      	beq.n	8001652 <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 800164e:	f7ff fd05 	bl	800105c <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001652:	bf00      	nop
 8001654:	3708      	adds	r7, #8
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}
 800165a:	bf00      	nop
 800165c:	20008394 	.word	0x20008394
 8001660:	40001400 	.word	0x40001400

08001664 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b092      	sub	sp, #72	; 0x48
 8001668:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800166a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800166e:	2200      	movs	r2, #0
 8001670:	601a      	str	r2, [r3, #0]
 8001672:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001674:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001678:	2200      	movs	r2, #0
 800167a:	601a      	str	r2, [r3, #0]
 800167c:	605a      	str	r2, [r3, #4]
 800167e:	609a      	str	r2, [r3, #8]
 8001680:	60da      	str	r2, [r3, #12]
 8001682:	611a      	str	r2, [r3, #16]
 8001684:	615a      	str	r2, [r3, #20]
 8001686:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001688:	1d3b      	adds	r3, r7, #4
 800168a:	2220      	movs	r2, #32
 800168c:	2100      	movs	r1, #0
 800168e:	4618      	mov	r0, r3
 8001690:	f003 fb97 	bl	8004dc2 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001694:	4b38      	ldr	r3, [pc, #224]	; (8001778 <MX_TIM8_Init+0x114>)
 8001696:	4a39      	ldr	r2, [pc, #228]	; (800177c <MX_TIM8_Init+0x118>)
 8001698:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 800169a:	4b37      	ldr	r3, [pc, #220]	; (8001778 <MX_TIM8_Init+0x114>)
 800169c:	2200      	movs	r2, #0
 800169e:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016a0:	4b35      	ldr	r3, [pc, #212]	; (8001778 <MX_TIM8_Init+0x114>)
 80016a2:	2200      	movs	r2, #0
 80016a4:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 64;
 80016a6:	4b34      	ldr	r3, [pc, #208]	; (8001778 <MX_TIM8_Init+0x114>)
 80016a8:	2240      	movs	r2, #64	; 0x40
 80016aa:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016ac:	4b32      	ldr	r3, [pc, #200]	; (8001778 <MX_TIM8_Init+0x114>)
 80016ae:	2200      	movs	r2, #0
 80016b0:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80016b2:	4b31      	ldr	r3, [pc, #196]	; (8001778 <MX_TIM8_Init+0x114>)
 80016b4:	2200      	movs	r2, #0
 80016b6:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016b8:	4b2f      	ldr	r3, [pc, #188]	; (8001778 <MX_TIM8_Init+0x114>)
 80016ba:	2200      	movs	r2, #0
 80016bc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80016be:	482e      	ldr	r0, [pc, #184]	; (8001778 <MX_TIM8_Init+0x114>)
 80016c0:	f002 f964 	bl	800398c <HAL_TIM_PWM_Init>
 80016c4:	4603      	mov	r3, r0
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d001      	beq.n	80016ce <MX_TIM8_Init+0x6a>
  {
    Error_Handler();
 80016ca:	f7ff fcc7 	bl	800105c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016ce:	2300      	movs	r3, #0
 80016d0:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016d2:	2300      	movs	r3, #0
 80016d4:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80016d6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80016da:	4619      	mov	r1, r3
 80016dc:	4826      	ldr	r0, [pc, #152]	; (8001778 <MX_TIM8_Init+0x114>)
 80016de:	f003 faa1 	bl	8004c24 <HAL_TIMEx_MasterConfigSynchronization>
 80016e2:	4603      	mov	r3, r0
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d001      	beq.n	80016ec <MX_TIM8_Init+0x88>
  {
    Error_Handler();
 80016e8:	f7ff fcb8 	bl	800105c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80016ec:	2360      	movs	r3, #96	; 0x60
 80016ee:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80016f0:	2300      	movs	r3, #0
 80016f2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80016f4:	2300      	movs	r3, #0
 80016f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80016f8:	2300      	movs	r3, #0
 80016fa:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80016fc:	2300      	movs	r3, #0
 80016fe:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001700:	2300      	movs	r3, #0
 8001702:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001704:	2300      	movs	r3, #0
 8001706:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001708:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800170c:	2200      	movs	r2, #0
 800170e:	4619      	mov	r1, r3
 8001710:	4819      	ldr	r0, [pc, #100]	; (8001778 <MX_TIM8_Init+0x114>)
 8001712:	f002 fd1f 	bl	8004154 <HAL_TIM_PWM_ConfigChannel>
 8001716:	4603      	mov	r3, r0
 8001718:	2b00      	cmp	r3, #0
 800171a:	d001      	beq.n	8001720 <MX_TIM8_Init+0xbc>
  {
    Error_Handler();
 800171c:	f7ff fc9e 	bl	800105c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001720:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001724:	220c      	movs	r2, #12
 8001726:	4619      	mov	r1, r3
 8001728:	4813      	ldr	r0, [pc, #76]	; (8001778 <MX_TIM8_Init+0x114>)
 800172a:	f002 fd13 	bl	8004154 <HAL_TIM_PWM_ConfigChannel>
 800172e:	4603      	mov	r3, r0
 8001730:	2b00      	cmp	r3, #0
 8001732:	d001      	beq.n	8001738 <MX_TIM8_Init+0xd4>
  {
    Error_Handler();
 8001734:	f7ff fc92 	bl	800105c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001738:	2300      	movs	r3, #0
 800173a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800173c:	2300      	movs	r3, #0
 800173e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001740:	2300      	movs	r3, #0
 8001742:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001744:	2300      	movs	r3, #0
 8001746:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001748:	2300      	movs	r3, #0
 800174a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800174c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001750:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001752:	2300      	movs	r3, #0
 8001754:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001756:	1d3b      	adds	r3, r7, #4
 8001758:	4619      	mov	r1, r3
 800175a:	4807      	ldr	r0, [pc, #28]	; (8001778 <MX_TIM8_Init+0x114>)
 800175c:	f003 face 	bl	8004cfc <HAL_TIMEx_ConfigBreakDeadTime>
 8001760:	4603      	mov	r3, r0
 8001762:	2b00      	cmp	r3, #0
 8001764:	d001      	beq.n	800176a <MX_TIM8_Init+0x106>
  {
    Error_Handler();
 8001766:	f7ff fc79 	bl	800105c <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 800176a:	4803      	ldr	r0, [pc, #12]	; (8001778 <MX_TIM8_Init+0x114>)
 800176c:	f000 fa82 	bl	8001c74 <HAL_TIM_MspPostInit>

}
 8001770:	bf00      	nop
 8001772:	3748      	adds	r7, #72	; 0x48
 8001774:	46bd      	mov	sp, r7
 8001776:	bd80      	pop	{r7, pc}
 8001778:	200083dc 	.word	0x200083dc
 800177c:	40013400 	.word	0x40013400

08001780 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b086      	sub	sp, #24
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001790:	d164      	bne.n	800185c <HAL_TIM_PWM_MspInit+0xdc>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001792:	4b7f      	ldr	r3, [pc, #508]	; (8001990 <HAL_TIM_PWM_MspInit+0x210>)
 8001794:	69db      	ldr	r3, [r3, #28]
 8001796:	4a7e      	ldr	r2, [pc, #504]	; (8001990 <HAL_TIM_PWM_MspInit+0x210>)
 8001798:	f043 0301 	orr.w	r3, r3, #1
 800179c:	61d3      	str	r3, [r2, #28]
 800179e:	4b7c      	ldr	r3, [pc, #496]	; (8001990 <HAL_TIM_PWM_MspInit+0x210>)
 80017a0:	69db      	ldr	r3, [r3, #28]
 80017a2:	f003 0301 	and.w	r3, r3, #1
 80017a6:	617b      	str	r3, [r7, #20]
 80017a8:	697b      	ldr	r3, [r7, #20]

    /* TIM2 DMA Init */
    /* TIM2_CH3 Init */
    hdma_tim2_ch3.Instance = DMA1_Channel1;
 80017aa:	4b7a      	ldr	r3, [pc, #488]	; (8001994 <HAL_TIM_PWM_MspInit+0x214>)
 80017ac:	4a7a      	ldr	r2, [pc, #488]	; (8001998 <HAL_TIM_PWM_MspInit+0x218>)
 80017ae:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80017b0:	4b78      	ldr	r3, [pc, #480]	; (8001994 <HAL_TIM_PWM_MspInit+0x214>)
 80017b2:	2210      	movs	r2, #16
 80017b4:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 80017b6:	4b77      	ldr	r3, [pc, #476]	; (8001994 <HAL_TIM_PWM_MspInit+0x214>)
 80017b8:	2200      	movs	r2, #0
 80017ba:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch3.Init.MemInc = DMA_MINC_ENABLE;
 80017bc:	4b75      	ldr	r3, [pc, #468]	; (8001994 <HAL_TIM_PWM_MspInit+0x214>)
 80017be:	2280      	movs	r2, #128	; 0x80
 80017c0:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80017c2:	4b74      	ldr	r3, [pc, #464]	; (8001994 <HAL_TIM_PWM_MspInit+0x214>)
 80017c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80017c8:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80017ca:	4b72      	ldr	r3, [pc, #456]	; (8001994 <HAL_TIM_PWM_MspInit+0x214>)
 80017cc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80017d0:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch3.Init.Mode = DMA_NORMAL;
 80017d2:	4b70      	ldr	r3, [pc, #448]	; (8001994 <HAL_TIM_PWM_MspInit+0x214>)
 80017d4:	2200      	movs	r2, #0
 80017d6:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch3.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80017d8:	4b6e      	ldr	r3, [pc, #440]	; (8001994 <HAL_TIM_PWM_MspInit+0x214>)
 80017da:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 80017de:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim2_ch3) != HAL_OK)
 80017e0:	486c      	ldr	r0, [pc, #432]	; (8001994 <HAL_TIM_PWM_MspInit+0x214>)
 80017e2:	f000 fe21 	bl	8002428 <HAL_DMA_Init>
 80017e6:	4603      	mov	r3, r0
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d001      	beq.n	80017f0 <HAL_TIM_PWM_MspInit+0x70>
    {
      Error_Handler();
 80017ec:	f7ff fc36 	bl	800105c <Error_Handler>
    }

    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_CC3],hdma_tim2_ch3);
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	4a68      	ldr	r2, [pc, #416]	; (8001994 <HAL_TIM_PWM_MspInit+0x214>)
 80017f4:	62da      	str	r2, [r3, #44]	; 0x2c
 80017f6:	4a67      	ldr	r2, [pc, #412]	; (8001994 <HAL_TIM_PWM_MspInit+0x214>)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	6253      	str	r3, [r2, #36]	; 0x24

    /* TIM2_CH2_CH4 Init */
    hdma_tim2_ch2_ch4.Instance = DMA1_Channel7;
 80017fc:	4b67      	ldr	r3, [pc, #412]	; (800199c <HAL_TIM_PWM_MspInit+0x21c>)
 80017fe:	4a68      	ldr	r2, [pc, #416]	; (80019a0 <HAL_TIM_PWM_MspInit+0x220>)
 8001800:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch2_ch4.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001802:	4b66      	ldr	r3, [pc, #408]	; (800199c <HAL_TIM_PWM_MspInit+0x21c>)
 8001804:	2210      	movs	r2, #16
 8001806:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch2_ch4.Init.PeriphInc = DMA_PINC_DISABLE;
 8001808:	4b64      	ldr	r3, [pc, #400]	; (800199c <HAL_TIM_PWM_MspInit+0x21c>)
 800180a:	2200      	movs	r2, #0
 800180c:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch2_ch4.Init.MemInc = DMA_MINC_ENABLE;
 800180e:	4b63      	ldr	r3, [pc, #396]	; (800199c <HAL_TIM_PWM_MspInit+0x21c>)
 8001810:	2280      	movs	r2, #128	; 0x80
 8001812:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch2_ch4.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001814:	4b61      	ldr	r3, [pc, #388]	; (800199c <HAL_TIM_PWM_MspInit+0x21c>)
 8001816:	f44f 7200 	mov.w	r2, #512	; 0x200
 800181a:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch2_ch4.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800181c:	4b5f      	ldr	r3, [pc, #380]	; (800199c <HAL_TIM_PWM_MspInit+0x21c>)
 800181e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001822:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch2_ch4.Init.Mode = DMA_NORMAL;
 8001824:	4b5d      	ldr	r3, [pc, #372]	; (800199c <HAL_TIM_PWM_MspInit+0x21c>)
 8001826:	2200      	movs	r2, #0
 8001828:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch2_ch4.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800182a:	4b5c      	ldr	r3, [pc, #368]	; (800199c <HAL_TIM_PWM_MspInit+0x21c>)
 800182c:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8001830:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim2_ch2_ch4) != HAL_OK)
 8001832:	485a      	ldr	r0, [pc, #360]	; (800199c <HAL_TIM_PWM_MspInit+0x21c>)
 8001834:	f000 fdf8 	bl	8002428 <HAL_DMA_Init>
 8001838:	4603      	mov	r3, r0
 800183a:	2b00      	cmp	r3, #0
 800183c:	d001      	beq.n	8001842 <HAL_TIM_PWM_MspInit+0xc2>
    {
      Error_Handler();
 800183e:	f7ff fc0d 	bl	800105c <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_CC2],hdma_tim2_ch2_ch4);
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	4a55      	ldr	r2, [pc, #340]	; (800199c <HAL_TIM_PWM_MspInit+0x21c>)
 8001846:	629a      	str	r2, [r3, #40]	; 0x28
 8001848:	4a54      	ldr	r2, [pc, #336]	; (800199c <HAL_TIM_PWM_MspInit+0x21c>)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	6253      	str	r3, [r2, #36]	; 0x24
    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_CC4],hdma_tim2_ch2_ch4);
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	4a52      	ldr	r2, [pc, #328]	; (800199c <HAL_TIM_PWM_MspInit+0x21c>)
 8001852:	631a      	str	r2, [r3, #48]	; 0x30
 8001854:	4a51      	ldr	r2, [pc, #324]	; (800199c <HAL_TIM_PWM_MspInit+0x21c>)
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	6253      	str	r3, [r2, #36]	; 0x24

  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 800185a:	e161      	b.n	8001b20 <HAL_TIM_PWM_MspInit+0x3a0>
  else if(tim_pwmHandle->Instance==TIM3)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	4a50      	ldr	r2, [pc, #320]	; (80019a4 <HAL_TIM_PWM_MspInit+0x224>)
 8001862:	4293      	cmp	r3, r2
 8001864:	f040 80ac 	bne.w	80019c0 <HAL_TIM_PWM_MspInit+0x240>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001868:	4b49      	ldr	r3, [pc, #292]	; (8001990 <HAL_TIM_PWM_MspInit+0x210>)
 800186a:	69db      	ldr	r3, [r3, #28]
 800186c:	4a48      	ldr	r2, [pc, #288]	; (8001990 <HAL_TIM_PWM_MspInit+0x210>)
 800186e:	f043 0302 	orr.w	r3, r3, #2
 8001872:	61d3      	str	r3, [r2, #28]
 8001874:	4b46      	ldr	r3, [pc, #280]	; (8001990 <HAL_TIM_PWM_MspInit+0x210>)
 8001876:	69db      	ldr	r3, [r3, #28]
 8001878:	f003 0302 	and.w	r3, r3, #2
 800187c:	613b      	str	r3, [r7, #16]
 800187e:	693b      	ldr	r3, [r7, #16]
    hdma_tim3_ch1_trig.Instance = DMA1_Channel6;
 8001880:	4b49      	ldr	r3, [pc, #292]	; (80019a8 <HAL_TIM_PWM_MspInit+0x228>)
 8001882:	4a4a      	ldr	r2, [pc, #296]	; (80019ac <HAL_TIM_PWM_MspInit+0x22c>)
 8001884:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch1_trig.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001886:	4b48      	ldr	r3, [pc, #288]	; (80019a8 <HAL_TIM_PWM_MspInit+0x228>)
 8001888:	2210      	movs	r2, #16
 800188a:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch1_trig.Init.PeriphInc = DMA_PINC_DISABLE;
 800188c:	4b46      	ldr	r3, [pc, #280]	; (80019a8 <HAL_TIM_PWM_MspInit+0x228>)
 800188e:	2200      	movs	r2, #0
 8001890:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch1_trig.Init.MemInc = DMA_MINC_ENABLE;
 8001892:	4b45      	ldr	r3, [pc, #276]	; (80019a8 <HAL_TIM_PWM_MspInit+0x228>)
 8001894:	2280      	movs	r2, #128	; 0x80
 8001896:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch1_trig.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001898:	4b43      	ldr	r3, [pc, #268]	; (80019a8 <HAL_TIM_PWM_MspInit+0x228>)
 800189a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800189e:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch1_trig.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80018a0:	4b41      	ldr	r3, [pc, #260]	; (80019a8 <HAL_TIM_PWM_MspInit+0x228>)
 80018a2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80018a6:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch1_trig.Init.Mode = DMA_NORMAL;
 80018a8:	4b3f      	ldr	r3, [pc, #252]	; (80019a8 <HAL_TIM_PWM_MspInit+0x228>)
 80018aa:	2200      	movs	r2, #0
 80018ac:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch1_trig.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80018ae:	4b3e      	ldr	r3, [pc, #248]	; (80019a8 <HAL_TIM_PWM_MspInit+0x228>)
 80018b0:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 80018b4:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim3_ch1_trig) != HAL_OK)
 80018b6:	483c      	ldr	r0, [pc, #240]	; (80019a8 <HAL_TIM_PWM_MspInit+0x228>)
 80018b8:	f000 fdb6 	bl	8002428 <HAL_DMA_Init>
 80018bc:	4603      	mov	r3, r0
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d001      	beq.n	80018c6 <HAL_TIM_PWM_MspInit+0x146>
      Error_Handler();
 80018c2:	f7ff fbcb 	bl	800105c <Error_Handler>
    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_CC1],hdma_tim3_ch1_trig);
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	4a37      	ldr	r2, [pc, #220]	; (80019a8 <HAL_TIM_PWM_MspInit+0x228>)
 80018ca:	625a      	str	r2, [r3, #36]	; 0x24
 80018cc:	4a36      	ldr	r2, [pc, #216]	; (80019a8 <HAL_TIM_PWM_MspInit+0x228>)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	6253      	str	r3, [r2, #36]	; 0x24
    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_TRIGGER],hdma_tim3_ch1_trig);
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	4a34      	ldr	r2, [pc, #208]	; (80019a8 <HAL_TIM_PWM_MspInit+0x228>)
 80018d6:	639a      	str	r2, [r3, #56]	; 0x38
 80018d8:	4a33      	ldr	r2, [pc, #204]	; (80019a8 <HAL_TIM_PWM_MspInit+0x228>)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	6253      	str	r3, [r2, #36]	; 0x24
    hdma_tim3_ch3.Instance = DMA1_Channel2;
 80018de:	4b34      	ldr	r3, [pc, #208]	; (80019b0 <HAL_TIM_PWM_MspInit+0x230>)
 80018e0:	4a34      	ldr	r2, [pc, #208]	; (80019b4 <HAL_TIM_PWM_MspInit+0x234>)
 80018e2:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80018e4:	4b32      	ldr	r3, [pc, #200]	; (80019b0 <HAL_TIM_PWM_MspInit+0x230>)
 80018e6:	2210      	movs	r2, #16
 80018e8:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 80018ea:	4b31      	ldr	r3, [pc, #196]	; (80019b0 <HAL_TIM_PWM_MspInit+0x230>)
 80018ec:	2200      	movs	r2, #0
 80018ee:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch3.Init.MemInc = DMA_MINC_ENABLE;
 80018f0:	4b2f      	ldr	r3, [pc, #188]	; (80019b0 <HAL_TIM_PWM_MspInit+0x230>)
 80018f2:	2280      	movs	r2, #128	; 0x80
 80018f4:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80018f6:	4b2e      	ldr	r3, [pc, #184]	; (80019b0 <HAL_TIM_PWM_MspInit+0x230>)
 80018f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80018fc:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80018fe:	4b2c      	ldr	r3, [pc, #176]	; (80019b0 <HAL_TIM_PWM_MspInit+0x230>)
 8001900:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001904:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch3.Init.Mode = DMA_NORMAL;
 8001906:	4b2a      	ldr	r3, [pc, #168]	; (80019b0 <HAL_TIM_PWM_MspInit+0x230>)
 8001908:	2200      	movs	r2, #0
 800190a:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch3.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800190c:	4b28      	ldr	r3, [pc, #160]	; (80019b0 <HAL_TIM_PWM_MspInit+0x230>)
 800190e:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8001912:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim3_ch3) != HAL_OK)
 8001914:	4826      	ldr	r0, [pc, #152]	; (80019b0 <HAL_TIM_PWM_MspInit+0x230>)
 8001916:	f000 fd87 	bl	8002428 <HAL_DMA_Init>
 800191a:	4603      	mov	r3, r0
 800191c:	2b00      	cmp	r3, #0
 800191e:	d001      	beq.n	8001924 <HAL_TIM_PWM_MspInit+0x1a4>
      Error_Handler();
 8001920:	f7ff fb9c 	bl	800105c <Error_Handler>
    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_CC3],hdma_tim3_ch3);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	4a22      	ldr	r2, [pc, #136]	; (80019b0 <HAL_TIM_PWM_MspInit+0x230>)
 8001928:	62da      	str	r2, [r3, #44]	; 0x2c
 800192a:	4a21      	ldr	r2, [pc, #132]	; (80019b0 <HAL_TIM_PWM_MspInit+0x230>)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	6253      	str	r3, [r2, #36]	; 0x24
    hdma_tim3_ch4_up.Instance = DMA1_Channel3;
 8001930:	4b21      	ldr	r3, [pc, #132]	; (80019b8 <HAL_TIM_PWM_MspInit+0x238>)
 8001932:	4a22      	ldr	r2, [pc, #136]	; (80019bc <HAL_TIM_PWM_MspInit+0x23c>)
 8001934:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch4_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001936:	4b20      	ldr	r3, [pc, #128]	; (80019b8 <HAL_TIM_PWM_MspInit+0x238>)
 8001938:	2210      	movs	r2, #16
 800193a:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch4_up.Init.PeriphInc = DMA_PINC_DISABLE;
 800193c:	4b1e      	ldr	r3, [pc, #120]	; (80019b8 <HAL_TIM_PWM_MspInit+0x238>)
 800193e:	2200      	movs	r2, #0
 8001940:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch4_up.Init.MemInc = DMA_MINC_ENABLE;
 8001942:	4b1d      	ldr	r3, [pc, #116]	; (80019b8 <HAL_TIM_PWM_MspInit+0x238>)
 8001944:	2280      	movs	r2, #128	; 0x80
 8001946:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch4_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001948:	4b1b      	ldr	r3, [pc, #108]	; (80019b8 <HAL_TIM_PWM_MspInit+0x238>)
 800194a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800194e:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch4_up.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001950:	4b19      	ldr	r3, [pc, #100]	; (80019b8 <HAL_TIM_PWM_MspInit+0x238>)
 8001952:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001956:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch4_up.Init.Mode = DMA_NORMAL;
 8001958:	4b17      	ldr	r3, [pc, #92]	; (80019b8 <HAL_TIM_PWM_MspInit+0x238>)
 800195a:	2200      	movs	r2, #0
 800195c:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch4_up.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800195e:	4b16      	ldr	r3, [pc, #88]	; (80019b8 <HAL_TIM_PWM_MspInit+0x238>)
 8001960:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8001964:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim3_ch4_up) != HAL_OK)
 8001966:	4814      	ldr	r0, [pc, #80]	; (80019b8 <HAL_TIM_PWM_MspInit+0x238>)
 8001968:	f000 fd5e 	bl	8002428 <HAL_DMA_Init>
 800196c:	4603      	mov	r3, r0
 800196e:	2b00      	cmp	r3, #0
 8001970:	d001      	beq.n	8001976 <HAL_TIM_PWM_MspInit+0x1f6>
      Error_Handler();
 8001972:	f7ff fb73 	bl	800105c <Error_Handler>
    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_CC4],hdma_tim3_ch4_up);
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	4a0f      	ldr	r2, [pc, #60]	; (80019b8 <HAL_TIM_PWM_MspInit+0x238>)
 800197a:	631a      	str	r2, [r3, #48]	; 0x30
 800197c:	4a0e      	ldr	r2, [pc, #56]	; (80019b8 <HAL_TIM_PWM_MspInit+0x238>)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	6253      	str	r3, [r2, #36]	; 0x24
    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_UPDATE],hdma_tim3_ch4_up);
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	4a0c      	ldr	r2, [pc, #48]	; (80019b8 <HAL_TIM_PWM_MspInit+0x238>)
 8001986:	621a      	str	r2, [r3, #32]
 8001988:	4a0b      	ldr	r2, [pc, #44]	; (80019b8 <HAL_TIM_PWM_MspInit+0x238>)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	6253      	str	r3, [r2, #36]	; 0x24
}
 800198e:	e0c7      	b.n	8001b20 <HAL_TIM_PWM_MspInit+0x3a0>
 8001990:	40021000 	.word	0x40021000
 8001994:	20008424 	.word	0x20008424
 8001998:	40020008 	.word	0x40020008
 800199c:	20008468 	.word	0x20008468
 80019a0:	40020080 	.word	0x40020080
 80019a4:	40000400 	.word	0x40000400
 80019a8:	200084ac 	.word	0x200084ac
 80019ac:	4002006c 	.word	0x4002006c
 80019b0:	200084f0 	.word	0x200084f0
 80019b4:	4002001c 	.word	0x4002001c
 80019b8:	20008534 	.word	0x20008534
 80019bc:	40020030 	.word	0x40020030
  else if(tim_pwmHandle->Instance==TIM5)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	4a58      	ldr	r2, [pc, #352]	; (8001b28 <HAL_TIM_PWM_MspInit+0x3a8>)
 80019c6:	4293      	cmp	r3, r2
 80019c8:	d13b      	bne.n	8001a42 <HAL_TIM_PWM_MspInit+0x2c2>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80019ca:	4b58      	ldr	r3, [pc, #352]	; (8001b2c <HAL_TIM_PWM_MspInit+0x3ac>)
 80019cc:	69db      	ldr	r3, [r3, #28]
 80019ce:	4a57      	ldr	r2, [pc, #348]	; (8001b2c <HAL_TIM_PWM_MspInit+0x3ac>)
 80019d0:	f043 0308 	orr.w	r3, r3, #8
 80019d4:	61d3      	str	r3, [r2, #28]
 80019d6:	4b55      	ldr	r3, [pc, #340]	; (8001b2c <HAL_TIM_PWM_MspInit+0x3ac>)
 80019d8:	69db      	ldr	r3, [r3, #28]
 80019da:	f003 0308 	and.w	r3, r3, #8
 80019de:	60fb      	str	r3, [r7, #12]
 80019e0:	68fb      	ldr	r3, [r7, #12]
    hdma_tim5_ch4_trig.Instance = DMA2_Channel1;
 80019e2:	4b53      	ldr	r3, [pc, #332]	; (8001b30 <HAL_TIM_PWM_MspInit+0x3b0>)
 80019e4:	4a53      	ldr	r2, [pc, #332]	; (8001b34 <HAL_TIM_PWM_MspInit+0x3b4>)
 80019e6:	601a      	str	r2, [r3, #0]
    hdma_tim5_ch4_trig.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80019e8:	4b51      	ldr	r3, [pc, #324]	; (8001b30 <HAL_TIM_PWM_MspInit+0x3b0>)
 80019ea:	2210      	movs	r2, #16
 80019ec:	605a      	str	r2, [r3, #4]
    hdma_tim5_ch4_trig.Init.PeriphInc = DMA_PINC_DISABLE;
 80019ee:	4b50      	ldr	r3, [pc, #320]	; (8001b30 <HAL_TIM_PWM_MspInit+0x3b0>)
 80019f0:	2200      	movs	r2, #0
 80019f2:	609a      	str	r2, [r3, #8]
    hdma_tim5_ch4_trig.Init.MemInc = DMA_MINC_ENABLE;
 80019f4:	4b4e      	ldr	r3, [pc, #312]	; (8001b30 <HAL_TIM_PWM_MspInit+0x3b0>)
 80019f6:	2280      	movs	r2, #128	; 0x80
 80019f8:	60da      	str	r2, [r3, #12]
    hdma_tim5_ch4_trig.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80019fa:	4b4d      	ldr	r3, [pc, #308]	; (8001b30 <HAL_TIM_PWM_MspInit+0x3b0>)
 80019fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a00:	611a      	str	r2, [r3, #16]
    hdma_tim5_ch4_trig.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001a02:	4b4b      	ldr	r3, [pc, #300]	; (8001b30 <HAL_TIM_PWM_MspInit+0x3b0>)
 8001a04:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001a08:	615a      	str	r2, [r3, #20]
    hdma_tim5_ch4_trig.Init.Mode = DMA_NORMAL;
 8001a0a:	4b49      	ldr	r3, [pc, #292]	; (8001b30 <HAL_TIM_PWM_MspInit+0x3b0>)
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	619a      	str	r2, [r3, #24]
    hdma_tim5_ch4_trig.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001a10:	4b47      	ldr	r3, [pc, #284]	; (8001b30 <HAL_TIM_PWM_MspInit+0x3b0>)
 8001a12:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8001a16:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim5_ch4_trig) != HAL_OK)
 8001a18:	4845      	ldr	r0, [pc, #276]	; (8001b30 <HAL_TIM_PWM_MspInit+0x3b0>)
 8001a1a:	f000 fd05 	bl	8002428 <HAL_DMA_Init>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d001      	beq.n	8001a28 <HAL_TIM_PWM_MspInit+0x2a8>
      Error_Handler();
 8001a24:	f7ff fb1a 	bl	800105c <Error_Handler>
    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_CC4],hdma_tim5_ch4_trig);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	4a41      	ldr	r2, [pc, #260]	; (8001b30 <HAL_TIM_PWM_MspInit+0x3b0>)
 8001a2c:	631a      	str	r2, [r3, #48]	; 0x30
 8001a2e:	4a40      	ldr	r2, [pc, #256]	; (8001b30 <HAL_TIM_PWM_MspInit+0x3b0>)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	6253      	str	r3, [r2, #36]	; 0x24
    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_TRIGGER],hdma_tim5_ch4_trig);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	4a3e      	ldr	r2, [pc, #248]	; (8001b30 <HAL_TIM_PWM_MspInit+0x3b0>)
 8001a38:	639a      	str	r2, [r3, #56]	; 0x38
 8001a3a:	4a3d      	ldr	r2, [pc, #244]	; (8001b30 <HAL_TIM_PWM_MspInit+0x3b0>)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	6253      	str	r3, [r2, #36]	; 0x24
}
 8001a40:	e06e      	b.n	8001b20 <HAL_TIM_PWM_MspInit+0x3a0>
  else if(tim_pwmHandle->Instance==TIM8)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	4a3c      	ldr	r2, [pc, #240]	; (8001b38 <HAL_TIM_PWM_MspInit+0x3b8>)
 8001a48:	4293      	cmp	r3, r2
 8001a4a:	d169      	bne.n	8001b20 <HAL_TIM_PWM_MspInit+0x3a0>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001a4c:	4b37      	ldr	r3, [pc, #220]	; (8001b2c <HAL_TIM_PWM_MspInit+0x3ac>)
 8001a4e:	699b      	ldr	r3, [r3, #24]
 8001a50:	4a36      	ldr	r2, [pc, #216]	; (8001b2c <HAL_TIM_PWM_MspInit+0x3ac>)
 8001a52:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001a56:	6193      	str	r3, [r2, #24]
 8001a58:	4b34      	ldr	r3, [pc, #208]	; (8001b2c <HAL_TIM_PWM_MspInit+0x3ac>)
 8001a5a:	699b      	ldr	r3, [r3, #24]
 8001a5c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001a60:	60bb      	str	r3, [r7, #8]
 8001a62:	68bb      	ldr	r3, [r7, #8]
    hdma_tim8_ch4_trig_com.Instance = DMA2_Channel2;
 8001a64:	4b35      	ldr	r3, [pc, #212]	; (8001b3c <HAL_TIM_PWM_MspInit+0x3bc>)
 8001a66:	4a36      	ldr	r2, [pc, #216]	; (8001b40 <HAL_TIM_PWM_MspInit+0x3c0>)
 8001a68:	601a      	str	r2, [r3, #0]
    hdma_tim8_ch4_trig_com.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001a6a:	4b34      	ldr	r3, [pc, #208]	; (8001b3c <HAL_TIM_PWM_MspInit+0x3bc>)
 8001a6c:	2210      	movs	r2, #16
 8001a6e:	605a      	str	r2, [r3, #4]
    hdma_tim8_ch4_trig_com.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a70:	4b32      	ldr	r3, [pc, #200]	; (8001b3c <HAL_TIM_PWM_MspInit+0x3bc>)
 8001a72:	2200      	movs	r2, #0
 8001a74:	609a      	str	r2, [r3, #8]
    hdma_tim8_ch4_trig_com.Init.MemInc = DMA_MINC_ENABLE;
 8001a76:	4b31      	ldr	r3, [pc, #196]	; (8001b3c <HAL_TIM_PWM_MspInit+0x3bc>)
 8001a78:	2280      	movs	r2, #128	; 0x80
 8001a7a:	60da      	str	r2, [r3, #12]
    hdma_tim8_ch4_trig_com.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001a7c:	4b2f      	ldr	r3, [pc, #188]	; (8001b3c <HAL_TIM_PWM_MspInit+0x3bc>)
 8001a7e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a82:	611a      	str	r2, [r3, #16]
    hdma_tim8_ch4_trig_com.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001a84:	4b2d      	ldr	r3, [pc, #180]	; (8001b3c <HAL_TIM_PWM_MspInit+0x3bc>)
 8001a86:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001a8a:	615a      	str	r2, [r3, #20]
    hdma_tim8_ch4_trig_com.Init.Mode = DMA_NORMAL;
 8001a8c:	4b2b      	ldr	r3, [pc, #172]	; (8001b3c <HAL_TIM_PWM_MspInit+0x3bc>)
 8001a8e:	2200      	movs	r2, #0
 8001a90:	619a      	str	r2, [r3, #24]
    hdma_tim8_ch4_trig_com.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001a92:	4b2a      	ldr	r3, [pc, #168]	; (8001b3c <HAL_TIM_PWM_MspInit+0x3bc>)
 8001a94:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8001a98:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim8_ch4_trig_com) != HAL_OK)
 8001a9a:	4828      	ldr	r0, [pc, #160]	; (8001b3c <HAL_TIM_PWM_MspInit+0x3bc>)
 8001a9c:	f000 fcc4 	bl	8002428 <HAL_DMA_Init>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d001      	beq.n	8001aaa <HAL_TIM_PWM_MspInit+0x32a>
      Error_Handler();
 8001aa6:	f7ff fad9 	bl	800105c <Error_Handler>
    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_CC4],hdma_tim8_ch4_trig_com);
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	4a23      	ldr	r2, [pc, #140]	; (8001b3c <HAL_TIM_PWM_MspInit+0x3bc>)
 8001aae:	631a      	str	r2, [r3, #48]	; 0x30
 8001ab0:	4a22      	ldr	r2, [pc, #136]	; (8001b3c <HAL_TIM_PWM_MspInit+0x3bc>)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	6253      	str	r3, [r2, #36]	; 0x24
    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_TRIGGER],hdma_tim8_ch4_trig_com);
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	4a20      	ldr	r2, [pc, #128]	; (8001b3c <HAL_TIM_PWM_MspInit+0x3bc>)
 8001aba:	639a      	str	r2, [r3, #56]	; 0x38
 8001abc:	4a1f      	ldr	r2, [pc, #124]	; (8001b3c <HAL_TIM_PWM_MspInit+0x3bc>)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	6253      	str	r3, [r2, #36]	; 0x24
    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_COMMUTATION],hdma_tim8_ch4_trig_com);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	4a1d      	ldr	r2, [pc, #116]	; (8001b3c <HAL_TIM_PWM_MspInit+0x3bc>)
 8001ac6:	635a      	str	r2, [r3, #52]	; 0x34
 8001ac8:	4a1c      	ldr	r2, [pc, #112]	; (8001b3c <HAL_TIM_PWM_MspInit+0x3bc>)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	6253      	str	r3, [r2, #36]	; 0x24
    hdma_tim8_ch1.Instance = DMA2_Channel3;
 8001ace:	4b1d      	ldr	r3, [pc, #116]	; (8001b44 <HAL_TIM_PWM_MspInit+0x3c4>)
 8001ad0:	4a1d      	ldr	r2, [pc, #116]	; (8001b48 <HAL_TIM_PWM_MspInit+0x3c8>)
 8001ad2:	601a      	str	r2, [r3, #0]
    hdma_tim8_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001ad4:	4b1b      	ldr	r3, [pc, #108]	; (8001b44 <HAL_TIM_PWM_MspInit+0x3c4>)
 8001ad6:	2210      	movs	r2, #16
 8001ad8:	605a      	str	r2, [r3, #4]
    hdma_tim8_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ada:	4b1a      	ldr	r3, [pc, #104]	; (8001b44 <HAL_TIM_PWM_MspInit+0x3c4>)
 8001adc:	2200      	movs	r2, #0
 8001ade:	609a      	str	r2, [r3, #8]
    hdma_tim8_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001ae0:	4b18      	ldr	r3, [pc, #96]	; (8001b44 <HAL_TIM_PWM_MspInit+0x3c4>)
 8001ae2:	2280      	movs	r2, #128	; 0x80
 8001ae4:	60da      	str	r2, [r3, #12]
    hdma_tim8_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001ae6:	4b17      	ldr	r3, [pc, #92]	; (8001b44 <HAL_TIM_PWM_MspInit+0x3c4>)
 8001ae8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001aec:	611a      	str	r2, [r3, #16]
    hdma_tim8_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001aee:	4b15      	ldr	r3, [pc, #84]	; (8001b44 <HAL_TIM_PWM_MspInit+0x3c4>)
 8001af0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001af4:	615a      	str	r2, [r3, #20]
    hdma_tim8_ch1.Init.Mode = DMA_NORMAL;
 8001af6:	4b13      	ldr	r3, [pc, #76]	; (8001b44 <HAL_TIM_PWM_MspInit+0x3c4>)
 8001af8:	2200      	movs	r2, #0
 8001afa:	619a      	str	r2, [r3, #24]
    hdma_tim8_ch1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001afc:	4b11      	ldr	r3, [pc, #68]	; (8001b44 <HAL_TIM_PWM_MspInit+0x3c4>)
 8001afe:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8001b02:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim8_ch1) != HAL_OK)
 8001b04:	480f      	ldr	r0, [pc, #60]	; (8001b44 <HAL_TIM_PWM_MspInit+0x3c4>)
 8001b06:	f000 fc8f 	bl	8002428 <HAL_DMA_Init>
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d001      	beq.n	8001b14 <HAL_TIM_PWM_MspInit+0x394>
      Error_Handler();
 8001b10:	f7ff faa4 	bl	800105c <Error_Handler>
    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_CC1],hdma_tim8_ch1);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	4a0b      	ldr	r2, [pc, #44]	; (8001b44 <HAL_TIM_PWM_MspInit+0x3c4>)
 8001b18:	625a      	str	r2, [r3, #36]	; 0x24
 8001b1a:	4a0a      	ldr	r2, [pc, #40]	; (8001b44 <HAL_TIM_PWM_MspInit+0x3c4>)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	6253      	str	r3, [r2, #36]	; 0x24
}
 8001b20:	bf00      	nop
 8001b22:	3718      	adds	r7, #24
 8001b24:	46bd      	mov	sp, r7
 8001b26:	bd80      	pop	{r7, pc}
 8001b28:	40000c00 	.word	0x40000c00
 8001b2c:	40021000 	.word	0x40021000
 8001b30:	20008600 	.word	0x20008600
 8001b34:	40020408 	.word	0x40020408
 8001b38:	40013400 	.word	0x40013400
 8001b3c:	20008644 	.word	0x20008644
 8001b40:	4002041c 	.word	0x4002041c
 8001b44:	20008688 	.word	0x20008688
 8001b48:	40020430 	.word	0x40020430

08001b4c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b084      	sub	sp, #16
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM4)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4a3f      	ldr	r2, [pc, #252]	; (8001c58 <HAL_TIM_Base_MspInit+0x10c>)
 8001b5a:	4293      	cmp	r3, r2
 8001b5c:	d15e      	bne.n	8001c1c <HAL_TIM_Base_MspInit+0xd0>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001b5e:	4b3f      	ldr	r3, [pc, #252]	; (8001c5c <HAL_TIM_Base_MspInit+0x110>)
 8001b60:	69db      	ldr	r3, [r3, #28]
 8001b62:	4a3e      	ldr	r2, [pc, #248]	; (8001c5c <HAL_TIM_Base_MspInit+0x110>)
 8001b64:	f043 0304 	orr.w	r3, r3, #4
 8001b68:	61d3      	str	r3, [r2, #28]
 8001b6a:	4b3c      	ldr	r3, [pc, #240]	; (8001c5c <HAL_TIM_Base_MspInit+0x110>)
 8001b6c:	69db      	ldr	r3, [r3, #28]
 8001b6e:	f003 0304 	and.w	r3, r3, #4
 8001b72:	60fb      	str	r3, [r7, #12]
 8001b74:	68fb      	ldr	r3, [r7, #12]

    /* TIM4 DMA Init */
    /* TIM4_CH2 Init */
    hdma_tim4_ch2.Instance = DMA1_Channel4;
 8001b76:	4b3a      	ldr	r3, [pc, #232]	; (8001c60 <HAL_TIM_Base_MspInit+0x114>)
 8001b78:	4a3a      	ldr	r2, [pc, #232]	; (8001c64 <HAL_TIM_Base_MspInit+0x118>)
 8001b7a:	601a      	str	r2, [r3, #0]
    hdma_tim4_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001b7c:	4b38      	ldr	r3, [pc, #224]	; (8001c60 <HAL_TIM_Base_MspInit+0x114>)
 8001b7e:	2210      	movs	r2, #16
 8001b80:	605a      	str	r2, [r3, #4]
    hdma_tim4_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b82:	4b37      	ldr	r3, [pc, #220]	; (8001c60 <HAL_TIM_Base_MspInit+0x114>)
 8001b84:	2200      	movs	r2, #0
 8001b86:	609a      	str	r2, [r3, #8]
    hdma_tim4_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8001b88:	4b35      	ldr	r3, [pc, #212]	; (8001c60 <HAL_TIM_Base_MspInit+0x114>)
 8001b8a:	2280      	movs	r2, #128	; 0x80
 8001b8c:	60da      	str	r2, [r3, #12]
    hdma_tim4_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001b8e:	4b34      	ldr	r3, [pc, #208]	; (8001c60 <HAL_TIM_Base_MspInit+0x114>)
 8001b90:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b94:	611a      	str	r2, [r3, #16]
    hdma_tim4_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001b96:	4b32      	ldr	r3, [pc, #200]	; (8001c60 <HAL_TIM_Base_MspInit+0x114>)
 8001b98:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001b9c:	615a      	str	r2, [r3, #20]
    hdma_tim4_ch2.Init.Mode = DMA_NORMAL;
 8001b9e:	4b30      	ldr	r3, [pc, #192]	; (8001c60 <HAL_TIM_Base_MspInit+0x114>)
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	619a      	str	r2, [r3, #24]
    hdma_tim4_ch2.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001ba4:	4b2e      	ldr	r3, [pc, #184]	; (8001c60 <HAL_TIM_Base_MspInit+0x114>)
 8001ba6:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8001baa:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim4_ch2) != HAL_OK)
 8001bac:	482c      	ldr	r0, [pc, #176]	; (8001c60 <HAL_TIM_Base_MspInit+0x114>)
 8001bae:	f000 fc3b 	bl	8002428 <HAL_DMA_Init>
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d001      	beq.n	8001bbc <HAL_TIM_Base_MspInit+0x70>
    {
      Error_Handler();
 8001bb8:	f7ff fa50 	bl	800105c <Error_Handler>
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC2],hdma_tim4_ch2);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	4a28      	ldr	r2, [pc, #160]	; (8001c60 <HAL_TIM_Base_MspInit+0x114>)
 8001bc0:	629a      	str	r2, [r3, #40]	; 0x28
 8001bc2:	4a27      	ldr	r2, [pc, #156]	; (8001c60 <HAL_TIM_Base_MspInit+0x114>)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	6253      	str	r3, [r2, #36]	; 0x24

    /* TIM4_CH3 Init */
    hdma_tim4_ch3.Instance = DMA1_Channel5;
 8001bc8:	4b27      	ldr	r3, [pc, #156]	; (8001c68 <HAL_TIM_Base_MspInit+0x11c>)
 8001bca:	4a28      	ldr	r2, [pc, #160]	; (8001c6c <HAL_TIM_Base_MspInit+0x120>)
 8001bcc:	601a      	str	r2, [r3, #0]
    hdma_tim4_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001bce:	4b26      	ldr	r3, [pc, #152]	; (8001c68 <HAL_TIM_Base_MspInit+0x11c>)
 8001bd0:	2210      	movs	r2, #16
 8001bd2:	605a      	str	r2, [r3, #4]
    hdma_tim4_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 8001bd4:	4b24      	ldr	r3, [pc, #144]	; (8001c68 <HAL_TIM_Base_MspInit+0x11c>)
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	609a      	str	r2, [r3, #8]
    hdma_tim4_ch3.Init.MemInc = DMA_MINC_ENABLE;
 8001bda:	4b23      	ldr	r3, [pc, #140]	; (8001c68 <HAL_TIM_Base_MspInit+0x11c>)
 8001bdc:	2280      	movs	r2, #128	; 0x80
 8001bde:	60da      	str	r2, [r3, #12]
    hdma_tim4_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001be0:	4b21      	ldr	r3, [pc, #132]	; (8001c68 <HAL_TIM_Base_MspInit+0x11c>)
 8001be2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001be6:	611a      	str	r2, [r3, #16]
    hdma_tim4_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001be8:	4b1f      	ldr	r3, [pc, #124]	; (8001c68 <HAL_TIM_Base_MspInit+0x11c>)
 8001bea:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001bee:	615a      	str	r2, [r3, #20]
    hdma_tim4_ch3.Init.Mode = DMA_NORMAL;
 8001bf0:	4b1d      	ldr	r3, [pc, #116]	; (8001c68 <HAL_TIM_Base_MspInit+0x11c>)
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	619a      	str	r2, [r3, #24]
    hdma_tim4_ch3.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001bf6:	4b1c      	ldr	r3, [pc, #112]	; (8001c68 <HAL_TIM_Base_MspInit+0x11c>)
 8001bf8:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8001bfc:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim4_ch3) != HAL_OK)
 8001bfe:	481a      	ldr	r0, [pc, #104]	; (8001c68 <HAL_TIM_Base_MspInit+0x11c>)
 8001c00:	f000 fc12 	bl	8002428 <HAL_DMA_Init>
 8001c04:	4603      	mov	r3, r0
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d001      	beq.n	8001c0e <HAL_TIM_Base_MspInit+0xc2>
    {
      Error_Handler();
 8001c0a:	f7ff fa27 	bl	800105c <Error_Handler>
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC3],hdma_tim4_ch3);
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	4a15      	ldr	r2, [pc, #84]	; (8001c68 <HAL_TIM_Base_MspInit+0x11c>)
 8001c12:	62da      	str	r2, [r3, #44]	; 0x2c
 8001c14:	4a14      	ldr	r2, [pc, #80]	; (8001c68 <HAL_TIM_Base_MspInit+0x11c>)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	6253      	str	r3, [r2, #36]	; 0x24
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 8001c1a:	e018      	b.n	8001c4e <HAL_TIM_Base_MspInit+0x102>
  else if(tim_baseHandle->Instance==TIM7)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	4a13      	ldr	r2, [pc, #76]	; (8001c70 <HAL_TIM_Base_MspInit+0x124>)
 8001c22:	4293      	cmp	r3, r2
 8001c24:	d113      	bne.n	8001c4e <HAL_TIM_Base_MspInit+0x102>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001c26:	4b0d      	ldr	r3, [pc, #52]	; (8001c5c <HAL_TIM_Base_MspInit+0x110>)
 8001c28:	69db      	ldr	r3, [r3, #28]
 8001c2a:	4a0c      	ldr	r2, [pc, #48]	; (8001c5c <HAL_TIM_Base_MspInit+0x110>)
 8001c2c:	f043 0320 	orr.w	r3, r3, #32
 8001c30:	61d3      	str	r3, [r2, #28]
 8001c32:	4b0a      	ldr	r3, [pc, #40]	; (8001c5c <HAL_TIM_Base_MspInit+0x110>)
 8001c34:	69db      	ldr	r3, [r3, #28]
 8001c36:	f003 0320 	and.w	r3, r3, #32
 8001c3a:	60bb      	str	r3, [r7, #8]
 8001c3c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8001c3e:	2200      	movs	r2, #0
 8001c40:	2100      	movs	r1, #0
 8001c42:	2037      	movs	r0, #55	; 0x37
 8001c44:	f000 fbb9 	bl	80023ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001c48:	2037      	movs	r0, #55	; 0x37
 8001c4a:	f000 fbd2 	bl	80023f2 <HAL_NVIC_EnableIRQ>
}
 8001c4e:	bf00      	nop
 8001c50:	3710      	adds	r7, #16
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bd80      	pop	{r7, pc}
 8001c56:	bf00      	nop
 8001c58:	40000800 	.word	0x40000800
 8001c5c:	40021000 	.word	0x40021000
 8001c60:	20008578 	.word	0x20008578
 8001c64:	40020044 	.word	0x40020044
 8001c68:	200085bc 	.word	0x200085bc
 8001c6c:	40020058 	.word	0x40020058
 8001c70:	40001400 	.word	0x40001400

08001c74 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b08e      	sub	sp, #56	; 0x38
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c7c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c80:	2200      	movs	r2, #0
 8001c82:	601a      	str	r2, [r3, #0]
 8001c84:	605a      	str	r2, [r3, #4]
 8001c86:	609a      	str	r2, [r3, #8]
 8001c88:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM2)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c92:	d118      	bne.n	8001cc6 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c94:	4b5d      	ldr	r3, [pc, #372]	; (8001e0c <HAL_TIM_MspPostInit+0x198>)
 8001c96:	699b      	ldr	r3, [r3, #24]
 8001c98:	4a5c      	ldr	r2, [pc, #368]	; (8001e0c <HAL_TIM_MspPostInit+0x198>)
 8001c9a:	f043 0304 	orr.w	r3, r3, #4
 8001c9e:	6193      	str	r3, [r2, #24]
 8001ca0:	4b5a      	ldr	r3, [pc, #360]	; (8001e0c <HAL_TIM_MspPostInit+0x198>)
 8001ca2:	699b      	ldr	r3, [r3, #24]
 8001ca4:	f003 0304 	and.w	r3, r3, #4
 8001ca8:	623b      	str	r3, [r7, #32]
 8001caa:	6a3b      	ldr	r3, [r7, #32]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 8001cac:	2306      	movs	r3, #6
 8001cae:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cb0:	2302      	movs	r3, #2
 8001cb2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cb4:	2302      	movs	r3, #2
 8001cb6:	633b      	str	r3, [r7, #48]	; 0x30
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cb8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cbc:	4619      	mov	r1, r3
 8001cbe:	4854      	ldr	r0, [pc, #336]	; (8001e10 <HAL_TIM_MspPostInit+0x19c>)
 8001cc0:	f000 fffa 	bl	8002cb8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8001cc4:	e09e      	b.n	8001e04 <HAL_TIM_MspPostInit+0x190>
  else if(timHandle->Instance==TIM3)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	4a52      	ldr	r2, [pc, #328]	; (8001e14 <HAL_TIM_MspPostInit+0x1a0>)
 8001ccc:	4293      	cmp	r3, r2
 8001cce:	d130      	bne.n	8001d32 <HAL_TIM_MspPostInit+0xbe>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cd0:	4b4e      	ldr	r3, [pc, #312]	; (8001e0c <HAL_TIM_MspPostInit+0x198>)
 8001cd2:	699b      	ldr	r3, [r3, #24]
 8001cd4:	4a4d      	ldr	r2, [pc, #308]	; (8001e0c <HAL_TIM_MspPostInit+0x198>)
 8001cd6:	f043 0304 	orr.w	r3, r3, #4
 8001cda:	6193      	str	r3, [r2, #24]
 8001cdc:	4b4b      	ldr	r3, [pc, #300]	; (8001e0c <HAL_TIM_MspPostInit+0x198>)
 8001cde:	699b      	ldr	r3, [r3, #24]
 8001ce0:	f003 0304 	and.w	r3, r3, #4
 8001ce4:	61fb      	str	r3, [r7, #28]
 8001ce6:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ce8:	4b48      	ldr	r3, [pc, #288]	; (8001e0c <HAL_TIM_MspPostInit+0x198>)
 8001cea:	699b      	ldr	r3, [r3, #24]
 8001cec:	4a47      	ldr	r2, [pc, #284]	; (8001e0c <HAL_TIM_MspPostInit+0x198>)
 8001cee:	f043 0308 	orr.w	r3, r3, #8
 8001cf2:	6193      	str	r3, [r2, #24]
 8001cf4:	4b45      	ldr	r3, [pc, #276]	; (8001e0c <HAL_TIM_MspPostInit+0x198>)
 8001cf6:	699b      	ldr	r3, [r3, #24]
 8001cf8:	f003 0308 	and.w	r3, r3, #8
 8001cfc:	61bb      	str	r3, [r7, #24]
 8001cfe:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001d00:	2340      	movs	r3, #64	; 0x40
 8001d02:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d04:	2302      	movs	r3, #2
 8001d06:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d08:	2302      	movs	r3, #2
 8001d0a:	633b      	str	r3, [r7, #48]	; 0x30
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d10:	4619      	mov	r1, r3
 8001d12:	483f      	ldr	r0, [pc, #252]	; (8001e10 <HAL_TIM_MspPostInit+0x19c>)
 8001d14:	f000 ffd0 	bl	8002cb8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001d18:	2303      	movs	r3, #3
 8001d1a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d1c:	2302      	movs	r3, #2
 8001d1e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d20:	2302      	movs	r3, #2
 8001d22:	633b      	str	r3, [r7, #48]	; 0x30
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d28:	4619      	mov	r1, r3
 8001d2a:	483b      	ldr	r0, [pc, #236]	; (8001e18 <HAL_TIM_MspPostInit+0x1a4>)
 8001d2c:	f000 ffc4 	bl	8002cb8 <HAL_GPIO_Init>
}
 8001d30:	e068      	b.n	8001e04 <HAL_TIM_MspPostInit+0x190>
  else if(timHandle->Instance==TIM4)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	4a39      	ldr	r2, [pc, #228]	; (8001e1c <HAL_TIM_MspPostInit+0x1a8>)
 8001d38:	4293      	cmp	r3, r2
 8001d3a:	d127      	bne.n	8001d8c <HAL_TIM_MspPostInit+0x118>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d3c:	4b33      	ldr	r3, [pc, #204]	; (8001e0c <HAL_TIM_MspPostInit+0x198>)
 8001d3e:	699b      	ldr	r3, [r3, #24]
 8001d40:	4a32      	ldr	r2, [pc, #200]	; (8001e0c <HAL_TIM_MspPostInit+0x198>)
 8001d42:	f043 0320 	orr.w	r3, r3, #32
 8001d46:	6193      	str	r3, [r2, #24]
 8001d48:	4b30      	ldr	r3, [pc, #192]	; (8001e0c <HAL_TIM_MspPostInit+0x198>)
 8001d4a:	699b      	ldr	r3, [r3, #24]
 8001d4c:	f003 0320 	and.w	r3, r3, #32
 8001d50:	617b      	str	r3, [r7, #20]
 8001d52:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8001d54:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8001d58:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d5a:	2302      	movs	r3, #2
 8001d5c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d5e:	2302      	movs	r3, #2
 8001d60:	633b      	str	r3, [r7, #48]	; 0x30
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001d62:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d66:	4619      	mov	r1, r3
 8001d68:	482d      	ldr	r0, [pc, #180]	; (8001e20 <HAL_TIM_MspPostInit+0x1ac>)
 8001d6a:	f000 ffa5 	bl	8002cb8 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM4_ENABLE();
 8001d6e:	4b2d      	ldr	r3, [pc, #180]	; (8001e24 <HAL_TIM_MspPostInit+0x1b0>)
 8001d70:	685b      	ldr	r3, [r3, #4]
 8001d72:	637b      	str	r3, [r7, #52]	; 0x34
 8001d74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d76:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001d7a:	637b      	str	r3, [r7, #52]	; 0x34
 8001d7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d7e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001d82:	637b      	str	r3, [r7, #52]	; 0x34
 8001d84:	4a27      	ldr	r2, [pc, #156]	; (8001e24 <HAL_TIM_MspPostInit+0x1b0>)
 8001d86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d88:	6053      	str	r3, [r2, #4]
}
 8001d8a:	e03b      	b.n	8001e04 <HAL_TIM_MspPostInit+0x190>
  else if(timHandle->Instance==TIM5)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	4a25      	ldr	r2, [pc, #148]	; (8001e28 <HAL_TIM_MspPostInit+0x1b4>)
 8001d92:	4293      	cmp	r3, r2
 8001d94:	d118      	bne.n	8001dc8 <HAL_TIM_MspPostInit+0x154>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d96:	4b1d      	ldr	r3, [pc, #116]	; (8001e0c <HAL_TIM_MspPostInit+0x198>)
 8001d98:	699b      	ldr	r3, [r3, #24]
 8001d9a:	4a1c      	ldr	r2, [pc, #112]	; (8001e0c <HAL_TIM_MspPostInit+0x198>)
 8001d9c:	f043 0304 	orr.w	r3, r3, #4
 8001da0:	6193      	str	r3, [r2, #24]
 8001da2:	4b1a      	ldr	r3, [pc, #104]	; (8001e0c <HAL_TIM_MspPostInit+0x198>)
 8001da4:	699b      	ldr	r3, [r3, #24]
 8001da6:	f003 0304 	and.w	r3, r3, #4
 8001daa:	613b      	str	r3, [r7, #16]
 8001dac:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001dae:	2308      	movs	r3, #8
 8001db0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001db2:	2302      	movs	r3, #2
 8001db4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001db6:	2302      	movs	r3, #2
 8001db8:	633b      	str	r3, [r7, #48]	; 0x30
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001dbe:	4619      	mov	r1, r3
 8001dc0:	4813      	ldr	r0, [pc, #76]	; (8001e10 <HAL_TIM_MspPostInit+0x19c>)
 8001dc2:	f000 ff79 	bl	8002cb8 <HAL_GPIO_Init>
}
 8001dc6:	e01d      	b.n	8001e04 <HAL_TIM_MspPostInit+0x190>
  else if(timHandle->Instance==TIM8)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	4a17      	ldr	r2, [pc, #92]	; (8001e2c <HAL_TIM_MspPostInit+0x1b8>)
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	d118      	bne.n	8001e04 <HAL_TIM_MspPostInit+0x190>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001dd2:	4b0e      	ldr	r3, [pc, #56]	; (8001e0c <HAL_TIM_MspPostInit+0x198>)
 8001dd4:	699b      	ldr	r3, [r3, #24]
 8001dd6:	4a0d      	ldr	r2, [pc, #52]	; (8001e0c <HAL_TIM_MspPostInit+0x198>)
 8001dd8:	f043 0310 	orr.w	r3, r3, #16
 8001ddc:	6193      	str	r3, [r2, #24]
 8001dde:	4b0b      	ldr	r3, [pc, #44]	; (8001e0c <HAL_TIM_MspPostInit+0x198>)
 8001de0:	699b      	ldr	r3, [r3, #24]
 8001de2:	f003 0310 	and.w	r3, r3, #16
 8001de6:	60fb      	str	r3, [r7, #12]
 8001de8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8001dea:	f44f 7310 	mov.w	r3, #576	; 0x240
 8001dee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001df0:	2302      	movs	r3, #2
 8001df2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001df4:	2302      	movs	r3, #2
 8001df6:	633b      	str	r3, [r7, #48]	; 0x30
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001df8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001dfc:	4619      	mov	r1, r3
 8001dfe:	480c      	ldr	r0, [pc, #48]	; (8001e30 <HAL_TIM_MspPostInit+0x1bc>)
 8001e00:	f000 ff5a 	bl	8002cb8 <HAL_GPIO_Init>
}
 8001e04:	bf00      	nop
 8001e06:	3738      	adds	r7, #56	; 0x38
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	bd80      	pop	{r7, pc}
 8001e0c:	40021000 	.word	0x40021000
 8001e10:	40010800 	.word	0x40010800
 8001e14:	40000400 	.word	0x40000400
 8001e18:	40010c00 	.word	0x40010c00
 8001e1c:	40000800 	.word	0x40000800
 8001e20:	40011400 	.word	0x40011400
 8001e24:	40010000 	.word	0x40010000
 8001e28:	40000c00 	.word	0x40000c00
 8001e2c:	40013400 	.word	0x40013400
 8001e30:	40011000 	.word	0x40011000

08001e34 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001e34:	f7ff fa32 	bl	800129c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001e38:	480b      	ldr	r0, [pc, #44]	; (8001e68 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001e3a:	490c      	ldr	r1, [pc, #48]	; (8001e6c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001e3c:	4a0c      	ldr	r2, [pc, #48]	; (8001e70 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001e3e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e40:	e002      	b.n	8001e48 <LoopCopyDataInit>

08001e42 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e42:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e44:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e46:	3304      	adds	r3, #4

08001e48 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e48:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e4a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e4c:	d3f9      	bcc.n	8001e42 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e4e:	4a09      	ldr	r2, [pc, #36]	; (8001e74 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001e50:	4c09      	ldr	r4, [pc, #36]	; (8001e78 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001e52:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e54:	e001      	b.n	8001e5a <LoopFillZerobss>

08001e56 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e56:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e58:	3204      	adds	r2, #4

08001e5a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e5a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e5c:	d3fb      	bcc.n	8001e56 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001e5e:	f002 ffb9 	bl	8004dd4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001e62:	f7fe fdcd 	bl	8000a00 <main>
  bx lr
 8001e66:	4770      	bx	lr
  ldr r0, =_sdata
 8001e68:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e6c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001e70:	08004ef4 	.word	0x08004ef4
  ldr r2, =_sbss
 8001e74:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001e78:	200086d0 	.word	0x200086d0

08001e7c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001e7c:	e7fe      	b.n	8001e7c <ADC1_2_IRQHandler>
	...

08001e80 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e84:	4b08      	ldr	r3, [pc, #32]	; (8001ea8 <HAL_Init+0x28>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	4a07      	ldr	r2, [pc, #28]	; (8001ea8 <HAL_Init+0x28>)
 8001e8a:	f043 0310 	orr.w	r3, r3, #16
 8001e8e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e90:	2003      	movs	r0, #3
 8001e92:	f000 fa87 	bl	80023a4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e96:	200f      	movs	r0, #15
 8001e98:	f000 f808 	bl	8001eac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e9c:	f7ff f936 	bl	800110c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ea0:	2300      	movs	r3, #0
}
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	bd80      	pop	{r7, pc}
 8001ea6:	bf00      	nop
 8001ea8:	40022000 	.word	0x40022000

08001eac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b082      	sub	sp, #8
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001eb4:	4b12      	ldr	r3, [pc, #72]	; (8001f00 <HAL_InitTick+0x54>)
 8001eb6:	681a      	ldr	r2, [r3, #0]
 8001eb8:	4b12      	ldr	r3, [pc, #72]	; (8001f04 <HAL_InitTick+0x58>)
 8001eba:	781b      	ldrb	r3, [r3, #0]
 8001ebc:	4619      	mov	r1, r3
 8001ebe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ec2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ec6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001eca:	4618      	mov	r0, r3
 8001ecc:	f000 fa9f 	bl	800240e <HAL_SYSTICK_Config>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d001      	beq.n	8001eda <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001ed6:	2301      	movs	r3, #1
 8001ed8:	e00e      	b.n	8001ef8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	2b0f      	cmp	r3, #15
 8001ede:	d80a      	bhi.n	8001ef6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	6879      	ldr	r1, [r7, #4]
 8001ee4:	f04f 30ff 	mov.w	r0, #4294967295
 8001ee8:	f000 fa67 	bl	80023ba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001eec:	4a06      	ldr	r2, [pc, #24]	; (8001f08 <HAL_InitTick+0x5c>)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	e000      	b.n	8001ef8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001ef6:	2301      	movs	r3, #1
}
 8001ef8:	4618      	mov	r0, r3
 8001efa:	3708      	adds	r7, #8
 8001efc:	46bd      	mov	sp, r7
 8001efe:	bd80      	pop	{r7, pc}
 8001f00:	20000000 	.word	0x20000000
 8001f04:	20000008 	.word	0x20000008
 8001f08:	20000004 	.word	0x20000004

08001f0c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f10:	4b05      	ldr	r3, [pc, #20]	; (8001f28 <HAL_IncTick+0x1c>)
 8001f12:	781b      	ldrb	r3, [r3, #0]
 8001f14:	461a      	mov	r2, r3
 8001f16:	4b05      	ldr	r3, [pc, #20]	; (8001f2c <HAL_IncTick+0x20>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	4413      	add	r3, r2
 8001f1c:	4a03      	ldr	r2, [pc, #12]	; (8001f2c <HAL_IncTick+0x20>)
 8001f1e:	6013      	str	r3, [r2, #0]
}
 8001f20:	bf00      	nop
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bc80      	pop	{r7}
 8001f26:	4770      	bx	lr
 8001f28:	20000008 	.word	0x20000008
 8001f2c:	200086cc 	.word	0x200086cc

08001f30 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f30:	b480      	push	{r7}
 8001f32:	af00      	add	r7, sp, #0
  return uwTick;
 8001f34:	4b02      	ldr	r3, [pc, #8]	; (8001f40 <HAL_GetTick+0x10>)
 8001f36:	681b      	ldr	r3, [r3, #0]
}
 8001f38:	4618      	mov	r0, r3
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bc80      	pop	{r7}
 8001f3e:	4770      	bx	lr
 8001f40:	200086cc 	.word	0x200086cc

08001f44 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b084      	sub	sp, #16
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f4c:	f7ff fff0 	bl	8001f30 <HAL_GetTick>
 8001f50:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f5c:	d005      	beq.n	8001f6a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f5e:	4b0a      	ldr	r3, [pc, #40]	; (8001f88 <HAL_Delay+0x44>)
 8001f60:	781b      	ldrb	r3, [r3, #0]
 8001f62:	461a      	mov	r2, r3
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	4413      	add	r3, r2
 8001f68:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001f6a:	bf00      	nop
 8001f6c:	f7ff ffe0 	bl	8001f30 <HAL_GetTick>
 8001f70:	4602      	mov	r2, r0
 8001f72:	68bb      	ldr	r3, [r7, #8]
 8001f74:	1ad3      	subs	r3, r2, r3
 8001f76:	68fa      	ldr	r2, [r7, #12]
 8001f78:	429a      	cmp	r2, r3
 8001f7a:	d8f7      	bhi.n	8001f6c <HAL_Delay+0x28>
  {
  }
}
 8001f7c:	bf00      	nop
 8001f7e:	bf00      	nop
 8001f80:	3710      	adds	r7, #16
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bd80      	pop	{r7, pc}
 8001f86:	bf00      	nop
 8001f88:	20000008 	.word	0x20000008

08001f8c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b084      	sub	sp, #16
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d101      	bne.n	8001f9e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001f9a:	2301      	movs	r3, #1
 8001f9c:	e0ed      	b.n	800217a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001fa4:	b2db      	uxtb	r3, r3
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d102      	bne.n	8001fb0 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001faa:	6878      	ldr	r0, [r7, #4]
 8001fac:	f7fe fa8e 	bl	80004cc <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	681a      	ldr	r2, [r3, #0]
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f042 0201 	orr.w	r2, r2, #1
 8001fbe:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001fc0:	f7ff ffb6 	bl	8001f30 <HAL_GetTick>
 8001fc4:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001fc6:	e012      	b.n	8001fee <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001fc8:	f7ff ffb2 	bl	8001f30 <HAL_GetTick>
 8001fcc:	4602      	mov	r2, r0
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	1ad3      	subs	r3, r2, r3
 8001fd2:	2b0a      	cmp	r3, #10
 8001fd4:	d90b      	bls.n	8001fee <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fda:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	2205      	movs	r2, #5
 8001fe6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001fea:	2301      	movs	r3, #1
 8001fec:	e0c5      	b.n	800217a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	685b      	ldr	r3, [r3, #4]
 8001ff4:	f003 0301 	and.w	r3, r3, #1
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d0e5      	beq.n	8001fc8 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	681a      	ldr	r2, [r3, #0]
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f022 0202 	bic.w	r2, r2, #2
 800200a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800200c:	f7ff ff90 	bl	8001f30 <HAL_GetTick>
 8002010:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002012:	e012      	b.n	800203a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002014:	f7ff ff8c 	bl	8001f30 <HAL_GetTick>
 8002018:	4602      	mov	r2, r0
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	1ad3      	subs	r3, r2, r3
 800201e:	2b0a      	cmp	r3, #10
 8002020:	d90b      	bls.n	800203a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002026:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	2205      	movs	r2, #5
 8002032:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002036:	2301      	movs	r3, #1
 8002038:	e09f      	b.n	800217a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	685b      	ldr	r3, [r3, #4]
 8002040:	f003 0302 	and.w	r3, r3, #2
 8002044:	2b00      	cmp	r3, #0
 8002046:	d1e5      	bne.n	8002014 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	7e1b      	ldrb	r3, [r3, #24]
 800204c:	2b01      	cmp	r3, #1
 800204e:	d108      	bne.n	8002062 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	681a      	ldr	r2, [r3, #0]
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800205e:	601a      	str	r2, [r3, #0]
 8002060:	e007      	b.n	8002072 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	681a      	ldr	r2, [r3, #0]
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002070:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	7e5b      	ldrb	r3, [r3, #25]
 8002076:	2b01      	cmp	r3, #1
 8002078:	d108      	bne.n	800208c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	681a      	ldr	r2, [r3, #0]
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002088:	601a      	str	r2, [r3, #0]
 800208a:	e007      	b.n	800209c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	681a      	ldr	r2, [r3, #0]
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800209a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	7e9b      	ldrb	r3, [r3, #26]
 80020a0:	2b01      	cmp	r3, #1
 80020a2:	d108      	bne.n	80020b6 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	681a      	ldr	r2, [r3, #0]
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f042 0220 	orr.w	r2, r2, #32
 80020b2:	601a      	str	r2, [r3, #0]
 80020b4:	e007      	b.n	80020c6 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	681a      	ldr	r2, [r3, #0]
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f022 0220 	bic.w	r2, r2, #32
 80020c4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	7edb      	ldrb	r3, [r3, #27]
 80020ca:	2b01      	cmp	r3, #1
 80020cc:	d108      	bne.n	80020e0 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	681a      	ldr	r2, [r3, #0]
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f022 0210 	bic.w	r2, r2, #16
 80020dc:	601a      	str	r2, [r3, #0]
 80020de:	e007      	b.n	80020f0 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	681a      	ldr	r2, [r3, #0]
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f042 0210 	orr.w	r2, r2, #16
 80020ee:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	7f1b      	ldrb	r3, [r3, #28]
 80020f4:	2b01      	cmp	r3, #1
 80020f6:	d108      	bne.n	800210a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	681a      	ldr	r2, [r3, #0]
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f042 0208 	orr.w	r2, r2, #8
 8002106:	601a      	str	r2, [r3, #0]
 8002108:	e007      	b.n	800211a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	681a      	ldr	r2, [r3, #0]
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f022 0208 	bic.w	r2, r2, #8
 8002118:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	7f5b      	ldrb	r3, [r3, #29]
 800211e:	2b01      	cmp	r3, #1
 8002120:	d108      	bne.n	8002134 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	681a      	ldr	r2, [r3, #0]
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f042 0204 	orr.w	r2, r2, #4
 8002130:	601a      	str	r2, [r3, #0]
 8002132:	e007      	b.n	8002144 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	681a      	ldr	r2, [r3, #0]
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f022 0204 	bic.w	r2, r2, #4
 8002142:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	689a      	ldr	r2, [r3, #8]
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	68db      	ldr	r3, [r3, #12]
 800214c:	431a      	orrs	r2, r3
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	691b      	ldr	r3, [r3, #16]
 8002152:	431a      	orrs	r2, r3
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	695b      	ldr	r3, [r3, #20]
 8002158:	ea42 0103 	orr.w	r1, r2, r3
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	685b      	ldr	r3, [r3, #4]
 8002160:	1e5a      	subs	r2, r3, #1
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	430a      	orrs	r2, r1
 8002168:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	2200      	movs	r2, #0
 800216e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	2201      	movs	r2, #1
 8002174:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002178:	2300      	movs	r3, #0
}
 800217a:	4618      	mov	r0, r3
 800217c:	3710      	adds	r7, #16
 800217e:	46bd      	mov	sp, r7
 8002180:	bd80      	pop	{r7, pc}

08002182 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002182:	b580      	push	{r7, lr}
 8002184:	b084      	sub	sp, #16
 8002186:	af00      	add	r7, sp, #0
 8002188:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002190:	b2db      	uxtb	r3, r3
 8002192:	2b01      	cmp	r3, #1
 8002194:	d12e      	bne.n	80021f4 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	2202      	movs	r2, #2
 800219a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	681a      	ldr	r2, [r3, #0]
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f022 0201 	bic.w	r2, r2, #1
 80021ac:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80021ae:	f7ff febf 	bl	8001f30 <HAL_GetTick>
 80021b2:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80021b4:	e012      	b.n	80021dc <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80021b6:	f7ff febb 	bl	8001f30 <HAL_GetTick>
 80021ba:	4602      	mov	r2, r0
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	1ad3      	subs	r3, r2, r3
 80021c0:	2b0a      	cmp	r3, #10
 80021c2:	d90b      	bls.n	80021dc <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021c8:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2205      	movs	r2, #5
 80021d4:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80021d8:	2301      	movs	r3, #1
 80021da:	e012      	b.n	8002202 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	685b      	ldr	r3, [r3, #4]
 80021e2:	f003 0301 	and.w	r3, r3, #1
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d1e5      	bne.n	80021b6 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	2200      	movs	r2, #0
 80021ee:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80021f0:	2300      	movs	r3, #0
 80021f2:	e006      	b.n	8002202 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021f8:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002200:	2301      	movs	r3, #1
  }
}
 8002202:	4618      	mov	r0, r3
 8002204:	3710      	adds	r7, #16
 8002206:	46bd      	mov	sp, r7
 8002208:	bd80      	pop	{r7, pc}
	...

0800220c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800220c:	b480      	push	{r7}
 800220e:	b085      	sub	sp, #20
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	f003 0307 	and.w	r3, r3, #7
 800221a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800221c:	4b0c      	ldr	r3, [pc, #48]	; (8002250 <__NVIC_SetPriorityGrouping+0x44>)
 800221e:	68db      	ldr	r3, [r3, #12]
 8002220:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002222:	68ba      	ldr	r2, [r7, #8]
 8002224:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002228:	4013      	ands	r3, r2
 800222a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002230:	68bb      	ldr	r3, [r7, #8]
 8002232:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002234:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002238:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800223c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800223e:	4a04      	ldr	r2, [pc, #16]	; (8002250 <__NVIC_SetPriorityGrouping+0x44>)
 8002240:	68bb      	ldr	r3, [r7, #8]
 8002242:	60d3      	str	r3, [r2, #12]
}
 8002244:	bf00      	nop
 8002246:	3714      	adds	r7, #20
 8002248:	46bd      	mov	sp, r7
 800224a:	bc80      	pop	{r7}
 800224c:	4770      	bx	lr
 800224e:	bf00      	nop
 8002250:	e000ed00 	.word	0xe000ed00

08002254 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002254:	b480      	push	{r7}
 8002256:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002258:	4b04      	ldr	r3, [pc, #16]	; (800226c <__NVIC_GetPriorityGrouping+0x18>)
 800225a:	68db      	ldr	r3, [r3, #12]
 800225c:	0a1b      	lsrs	r3, r3, #8
 800225e:	f003 0307 	and.w	r3, r3, #7
}
 8002262:	4618      	mov	r0, r3
 8002264:	46bd      	mov	sp, r7
 8002266:	bc80      	pop	{r7}
 8002268:	4770      	bx	lr
 800226a:	bf00      	nop
 800226c:	e000ed00 	.word	0xe000ed00

08002270 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002270:	b480      	push	{r7}
 8002272:	b083      	sub	sp, #12
 8002274:	af00      	add	r7, sp, #0
 8002276:	4603      	mov	r3, r0
 8002278:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800227a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800227e:	2b00      	cmp	r3, #0
 8002280:	db0b      	blt.n	800229a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002282:	79fb      	ldrb	r3, [r7, #7]
 8002284:	f003 021f 	and.w	r2, r3, #31
 8002288:	4906      	ldr	r1, [pc, #24]	; (80022a4 <__NVIC_EnableIRQ+0x34>)
 800228a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800228e:	095b      	lsrs	r3, r3, #5
 8002290:	2001      	movs	r0, #1
 8002292:	fa00 f202 	lsl.w	r2, r0, r2
 8002296:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800229a:	bf00      	nop
 800229c:	370c      	adds	r7, #12
 800229e:	46bd      	mov	sp, r7
 80022a0:	bc80      	pop	{r7}
 80022a2:	4770      	bx	lr
 80022a4:	e000e100 	.word	0xe000e100

080022a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80022a8:	b480      	push	{r7}
 80022aa:	b083      	sub	sp, #12
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	4603      	mov	r3, r0
 80022b0:	6039      	str	r1, [r7, #0]
 80022b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	db0a      	blt.n	80022d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	b2da      	uxtb	r2, r3
 80022c0:	490c      	ldr	r1, [pc, #48]	; (80022f4 <__NVIC_SetPriority+0x4c>)
 80022c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022c6:	0112      	lsls	r2, r2, #4
 80022c8:	b2d2      	uxtb	r2, r2
 80022ca:	440b      	add	r3, r1
 80022cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80022d0:	e00a      	b.n	80022e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	b2da      	uxtb	r2, r3
 80022d6:	4908      	ldr	r1, [pc, #32]	; (80022f8 <__NVIC_SetPriority+0x50>)
 80022d8:	79fb      	ldrb	r3, [r7, #7]
 80022da:	f003 030f 	and.w	r3, r3, #15
 80022de:	3b04      	subs	r3, #4
 80022e0:	0112      	lsls	r2, r2, #4
 80022e2:	b2d2      	uxtb	r2, r2
 80022e4:	440b      	add	r3, r1
 80022e6:	761a      	strb	r2, [r3, #24]
}
 80022e8:	bf00      	nop
 80022ea:	370c      	adds	r7, #12
 80022ec:	46bd      	mov	sp, r7
 80022ee:	bc80      	pop	{r7}
 80022f0:	4770      	bx	lr
 80022f2:	bf00      	nop
 80022f4:	e000e100 	.word	0xe000e100
 80022f8:	e000ed00 	.word	0xe000ed00

080022fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022fc:	b480      	push	{r7}
 80022fe:	b089      	sub	sp, #36	; 0x24
 8002300:	af00      	add	r7, sp, #0
 8002302:	60f8      	str	r0, [r7, #12]
 8002304:	60b9      	str	r1, [r7, #8]
 8002306:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	f003 0307 	and.w	r3, r3, #7
 800230e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002310:	69fb      	ldr	r3, [r7, #28]
 8002312:	f1c3 0307 	rsb	r3, r3, #7
 8002316:	2b04      	cmp	r3, #4
 8002318:	bf28      	it	cs
 800231a:	2304      	movcs	r3, #4
 800231c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800231e:	69fb      	ldr	r3, [r7, #28]
 8002320:	3304      	adds	r3, #4
 8002322:	2b06      	cmp	r3, #6
 8002324:	d902      	bls.n	800232c <NVIC_EncodePriority+0x30>
 8002326:	69fb      	ldr	r3, [r7, #28]
 8002328:	3b03      	subs	r3, #3
 800232a:	e000      	b.n	800232e <NVIC_EncodePriority+0x32>
 800232c:	2300      	movs	r3, #0
 800232e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002330:	f04f 32ff 	mov.w	r2, #4294967295
 8002334:	69bb      	ldr	r3, [r7, #24]
 8002336:	fa02 f303 	lsl.w	r3, r2, r3
 800233a:	43da      	mvns	r2, r3
 800233c:	68bb      	ldr	r3, [r7, #8]
 800233e:	401a      	ands	r2, r3
 8002340:	697b      	ldr	r3, [r7, #20]
 8002342:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002344:	f04f 31ff 	mov.w	r1, #4294967295
 8002348:	697b      	ldr	r3, [r7, #20]
 800234a:	fa01 f303 	lsl.w	r3, r1, r3
 800234e:	43d9      	mvns	r1, r3
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002354:	4313      	orrs	r3, r2
         );
}
 8002356:	4618      	mov	r0, r3
 8002358:	3724      	adds	r7, #36	; 0x24
 800235a:	46bd      	mov	sp, r7
 800235c:	bc80      	pop	{r7}
 800235e:	4770      	bx	lr

08002360 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b082      	sub	sp, #8
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	3b01      	subs	r3, #1
 800236c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002370:	d301      	bcc.n	8002376 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002372:	2301      	movs	r3, #1
 8002374:	e00f      	b.n	8002396 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002376:	4a0a      	ldr	r2, [pc, #40]	; (80023a0 <SysTick_Config+0x40>)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	3b01      	subs	r3, #1
 800237c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800237e:	210f      	movs	r1, #15
 8002380:	f04f 30ff 	mov.w	r0, #4294967295
 8002384:	f7ff ff90 	bl	80022a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002388:	4b05      	ldr	r3, [pc, #20]	; (80023a0 <SysTick_Config+0x40>)
 800238a:	2200      	movs	r2, #0
 800238c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800238e:	4b04      	ldr	r3, [pc, #16]	; (80023a0 <SysTick_Config+0x40>)
 8002390:	2207      	movs	r2, #7
 8002392:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002394:	2300      	movs	r3, #0
}
 8002396:	4618      	mov	r0, r3
 8002398:	3708      	adds	r7, #8
 800239a:	46bd      	mov	sp, r7
 800239c:	bd80      	pop	{r7, pc}
 800239e:	bf00      	nop
 80023a0:	e000e010 	.word	0xe000e010

080023a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b082      	sub	sp, #8
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80023ac:	6878      	ldr	r0, [r7, #4]
 80023ae:	f7ff ff2d 	bl	800220c <__NVIC_SetPriorityGrouping>
}
 80023b2:	bf00      	nop
 80023b4:	3708      	adds	r7, #8
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bd80      	pop	{r7, pc}

080023ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80023ba:	b580      	push	{r7, lr}
 80023bc:	b086      	sub	sp, #24
 80023be:	af00      	add	r7, sp, #0
 80023c0:	4603      	mov	r3, r0
 80023c2:	60b9      	str	r1, [r7, #8]
 80023c4:	607a      	str	r2, [r7, #4]
 80023c6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80023c8:	2300      	movs	r3, #0
 80023ca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80023cc:	f7ff ff42 	bl	8002254 <__NVIC_GetPriorityGrouping>
 80023d0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80023d2:	687a      	ldr	r2, [r7, #4]
 80023d4:	68b9      	ldr	r1, [r7, #8]
 80023d6:	6978      	ldr	r0, [r7, #20]
 80023d8:	f7ff ff90 	bl	80022fc <NVIC_EncodePriority>
 80023dc:	4602      	mov	r2, r0
 80023de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023e2:	4611      	mov	r1, r2
 80023e4:	4618      	mov	r0, r3
 80023e6:	f7ff ff5f 	bl	80022a8 <__NVIC_SetPriority>
}
 80023ea:	bf00      	nop
 80023ec:	3718      	adds	r7, #24
 80023ee:	46bd      	mov	sp, r7
 80023f0:	bd80      	pop	{r7, pc}

080023f2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023f2:	b580      	push	{r7, lr}
 80023f4:	b082      	sub	sp, #8
 80023f6:	af00      	add	r7, sp, #0
 80023f8:	4603      	mov	r3, r0
 80023fa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80023fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002400:	4618      	mov	r0, r3
 8002402:	f7ff ff35 	bl	8002270 <__NVIC_EnableIRQ>
}
 8002406:	bf00      	nop
 8002408:	3708      	adds	r7, #8
 800240a:	46bd      	mov	sp, r7
 800240c:	bd80      	pop	{r7, pc}

0800240e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800240e:	b580      	push	{r7, lr}
 8002410:	b082      	sub	sp, #8
 8002412:	af00      	add	r7, sp, #0
 8002414:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002416:	6878      	ldr	r0, [r7, #4]
 8002418:	f7ff ffa2 	bl	8002360 <SysTick_Config>
 800241c:	4603      	mov	r3, r0
}
 800241e:	4618      	mov	r0, r3
 8002420:	3708      	adds	r7, #8
 8002422:	46bd      	mov	sp, r7
 8002424:	bd80      	pop	{r7, pc}
	...

08002428 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002428:	b480      	push	{r7}
 800242a:	b085      	sub	sp, #20
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002430:	2300      	movs	r3, #0
 8002432:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	2b00      	cmp	r3, #0
 8002438:	d101      	bne.n	800243e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800243a:	2301      	movs	r3, #1
 800243c:	e059      	b.n	80024f2 <HAL_DMA_Init+0xca>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	461a      	mov	r2, r3
 8002444:	4b2d      	ldr	r3, [pc, #180]	; (80024fc <HAL_DMA_Init+0xd4>)
 8002446:	429a      	cmp	r2, r3
 8002448:	d80f      	bhi.n	800246a <HAL_DMA_Init+0x42>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	461a      	mov	r2, r3
 8002450:	4b2b      	ldr	r3, [pc, #172]	; (8002500 <HAL_DMA_Init+0xd8>)
 8002452:	4413      	add	r3, r2
 8002454:	4a2b      	ldr	r2, [pc, #172]	; (8002504 <HAL_DMA_Init+0xdc>)
 8002456:	fba2 2303 	umull	r2, r3, r2, r3
 800245a:	091b      	lsrs	r3, r3, #4
 800245c:	009a      	lsls	r2, r3, #2
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	4a28      	ldr	r2, [pc, #160]	; (8002508 <HAL_DMA_Init+0xe0>)
 8002466:	63da      	str	r2, [r3, #60]	; 0x3c
 8002468:	e00e      	b.n	8002488 <HAL_DMA_Init+0x60>
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	461a      	mov	r2, r3
 8002470:	4b26      	ldr	r3, [pc, #152]	; (800250c <HAL_DMA_Init+0xe4>)
 8002472:	4413      	add	r3, r2
 8002474:	4a23      	ldr	r2, [pc, #140]	; (8002504 <HAL_DMA_Init+0xdc>)
 8002476:	fba2 2303 	umull	r2, r3, r2, r3
 800247a:	091b      	lsrs	r3, r3, #4
 800247c:	009a      	lsls	r2, r3, #2
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	4a22      	ldr	r2, [pc, #136]	; (8002510 <HAL_DMA_Init+0xe8>)
 8002486:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2202      	movs	r2, #2
 800248c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800249e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80024a2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80024ac:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	68db      	ldr	r3, [r3, #12]
 80024b2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80024b8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	695b      	ldr	r3, [r3, #20]
 80024be:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80024c4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	69db      	ldr	r3, [r3, #28]
 80024ca:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80024cc:	68fa      	ldr	r2, [r7, #12]
 80024ce:	4313      	orrs	r3, r2
 80024d0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	68fa      	ldr	r2, [r7, #12]
 80024d8:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	2200      	movs	r2, #0
 80024de:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	2201      	movs	r2, #1
 80024e4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2200      	movs	r2, #0
 80024ec:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80024f0:	2300      	movs	r3, #0
}
 80024f2:	4618      	mov	r0, r3
 80024f4:	3714      	adds	r7, #20
 80024f6:	46bd      	mov	sp, r7
 80024f8:	bc80      	pop	{r7}
 80024fa:	4770      	bx	lr
 80024fc:	40020407 	.word	0x40020407
 8002500:	bffdfff8 	.word	0xbffdfff8
 8002504:	cccccccd 	.word	0xcccccccd
 8002508:	40020000 	.word	0x40020000
 800250c:	bffdfbf8 	.word	0xbffdfbf8
 8002510:	40020400 	.word	0x40020400

08002514 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b086      	sub	sp, #24
 8002518:	af00      	add	r7, sp, #0
 800251a:	60f8      	str	r0, [r7, #12]
 800251c:	60b9      	str	r1, [r7, #8]
 800251e:	607a      	str	r2, [r7, #4]
 8002520:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002522:	2300      	movs	r3, #0
 8002524:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	f893 3020 	ldrb.w	r3, [r3, #32]
 800252c:	2b01      	cmp	r3, #1
 800252e:	d101      	bne.n	8002534 <HAL_DMA_Start_IT+0x20>
 8002530:	2302      	movs	r3, #2
 8002532:	e04b      	b.n	80025cc <HAL_DMA_Start_IT+0xb8>
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	2201      	movs	r2, #1
 8002538:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002542:	b2db      	uxtb	r3, r3
 8002544:	2b01      	cmp	r3, #1
 8002546:	d13a      	bne.n	80025be <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	2202      	movs	r2, #2
 800254c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	2200      	movs	r2, #0
 8002554:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	681a      	ldr	r2, [r3, #0]
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f022 0201 	bic.w	r2, r2, #1
 8002564:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	687a      	ldr	r2, [r7, #4]
 800256a:	68b9      	ldr	r1, [r7, #8]
 800256c:	68f8      	ldr	r0, [r7, #12]
 800256e:	f000 fb75 	bl	8002c5c <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002576:	2b00      	cmp	r3, #0
 8002578:	d008      	beq.n	800258c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	681a      	ldr	r2, [r3, #0]
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f042 020e 	orr.w	r2, r2, #14
 8002588:	601a      	str	r2, [r3, #0]
 800258a:	e00f      	b.n	80025ac <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	681a      	ldr	r2, [r3, #0]
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f022 0204 	bic.w	r2, r2, #4
 800259a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	681a      	ldr	r2, [r3, #0]
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f042 020a 	orr.w	r2, r2, #10
 80025aa:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	681a      	ldr	r2, [r3, #0]
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f042 0201 	orr.w	r2, r2, #1
 80025ba:	601a      	str	r2, [r3, #0]
 80025bc:	e005      	b.n	80025ca <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	2200      	movs	r2, #0
 80025c2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80025c6:	2302      	movs	r3, #2
 80025c8:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80025ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80025cc:	4618      	mov	r0, r3
 80025ce:	3718      	adds	r7, #24
 80025d0:	46bd      	mov	sp, r7
 80025d2:	bd80      	pop	{r7, pc}

080025d4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b084      	sub	sp, #16
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80025dc:	2300      	movs	r3, #0
 80025de:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80025e6:	b2db      	uxtb	r3, r3
 80025e8:	2b02      	cmp	r3, #2
 80025ea:	d005      	beq.n	80025f8 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2204      	movs	r2, #4
 80025f0:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80025f2:	2301      	movs	r3, #1
 80025f4:	73fb      	strb	r3, [r7, #15]
 80025f6:	e0d6      	b.n	80027a6 <HAL_DMA_Abort_IT+0x1d2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	681a      	ldr	r2, [r3, #0]
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f022 020e 	bic.w	r2, r2, #14
 8002606:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	681a      	ldr	r2, [r3, #0]
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f022 0201 	bic.w	r2, r2, #1
 8002616:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	461a      	mov	r2, r3
 800261e:	4b64      	ldr	r3, [pc, #400]	; (80027b0 <HAL_DMA_Abort_IT+0x1dc>)
 8002620:	429a      	cmp	r2, r3
 8002622:	d958      	bls.n	80026d6 <HAL_DMA_Abort_IT+0x102>
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	4a62      	ldr	r2, [pc, #392]	; (80027b4 <HAL_DMA_Abort_IT+0x1e0>)
 800262a:	4293      	cmp	r3, r2
 800262c:	d04f      	beq.n	80026ce <HAL_DMA_Abort_IT+0xfa>
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	4a61      	ldr	r2, [pc, #388]	; (80027b8 <HAL_DMA_Abort_IT+0x1e4>)
 8002634:	4293      	cmp	r3, r2
 8002636:	d048      	beq.n	80026ca <HAL_DMA_Abort_IT+0xf6>
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	4a5f      	ldr	r2, [pc, #380]	; (80027bc <HAL_DMA_Abort_IT+0x1e8>)
 800263e:	4293      	cmp	r3, r2
 8002640:	d040      	beq.n	80026c4 <HAL_DMA_Abort_IT+0xf0>
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	4a5e      	ldr	r2, [pc, #376]	; (80027c0 <HAL_DMA_Abort_IT+0x1ec>)
 8002648:	4293      	cmp	r3, r2
 800264a:	d038      	beq.n	80026be <HAL_DMA_Abort_IT+0xea>
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	4a5c      	ldr	r2, [pc, #368]	; (80027c4 <HAL_DMA_Abort_IT+0x1f0>)
 8002652:	4293      	cmp	r3, r2
 8002654:	d030      	beq.n	80026b8 <HAL_DMA_Abort_IT+0xe4>
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	4a5b      	ldr	r2, [pc, #364]	; (80027c8 <HAL_DMA_Abort_IT+0x1f4>)
 800265c:	4293      	cmp	r3, r2
 800265e:	d028      	beq.n	80026b2 <HAL_DMA_Abort_IT+0xde>
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	4a52      	ldr	r2, [pc, #328]	; (80027b0 <HAL_DMA_Abort_IT+0x1dc>)
 8002666:	4293      	cmp	r3, r2
 8002668:	d020      	beq.n	80026ac <HAL_DMA_Abort_IT+0xd8>
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	4a57      	ldr	r2, [pc, #348]	; (80027cc <HAL_DMA_Abort_IT+0x1f8>)
 8002670:	4293      	cmp	r3, r2
 8002672:	d019      	beq.n	80026a8 <HAL_DMA_Abort_IT+0xd4>
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	4a55      	ldr	r2, [pc, #340]	; (80027d0 <HAL_DMA_Abort_IT+0x1fc>)
 800267a:	4293      	cmp	r3, r2
 800267c:	d012      	beq.n	80026a4 <HAL_DMA_Abort_IT+0xd0>
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	4a54      	ldr	r2, [pc, #336]	; (80027d4 <HAL_DMA_Abort_IT+0x200>)
 8002684:	4293      	cmp	r3, r2
 8002686:	d00a      	beq.n	800269e <HAL_DMA_Abort_IT+0xca>
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	4a52      	ldr	r2, [pc, #328]	; (80027d8 <HAL_DMA_Abort_IT+0x204>)
 800268e:	4293      	cmp	r3, r2
 8002690:	d102      	bne.n	8002698 <HAL_DMA_Abort_IT+0xc4>
 8002692:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002696:	e01b      	b.n	80026d0 <HAL_DMA_Abort_IT+0xfc>
 8002698:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800269c:	e018      	b.n	80026d0 <HAL_DMA_Abort_IT+0xfc>
 800269e:	f44f 7380 	mov.w	r3, #256	; 0x100
 80026a2:	e015      	b.n	80026d0 <HAL_DMA_Abort_IT+0xfc>
 80026a4:	2310      	movs	r3, #16
 80026a6:	e013      	b.n	80026d0 <HAL_DMA_Abort_IT+0xfc>
 80026a8:	2301      	movs	r3, #1
 80026aa:	e011      	b.n	80026d0 <HAL_DMA_Abort_IT+0xfc>
 80026ac:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80026b0:	e00e      	b.n	80026d0 <HAL_DMA_Abort_IT+0xfc>
 80026b2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80026b6:	e00b      	b.n	80026d0 <HAL_DMA_Abort_IT+0xfc>
 80026b8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80026bc:	e008      	b.n	80026d0 <HAL_DMA_Abort_IT+0xfc>
 80026be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80026c2:	e005      	b.n	80026d0 <HAL_DMA_Abort_IT+0xfc>
 80026c4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80026c8:	e002      	b.n	80026d0 <HAL_DMA_Abort_IT+0xfc>
 80026ca:	2310      	movs	r3, #16
 80026cc:	e000      	b.n	80026d0 <HAL_DMA_Abort_IT+0xfc>
 80026ce:	2301      	movs	r3, #1
 80026d0:	4a42      	ldr	r2, [pc, #264]	; (80027dc <HAL_DMA_Abort_IT+0x208>)
 80026d2:	6053      	str	r3, [r2, #4]
 80026d4:	e057      	b.n	8002786 <HAL_DMA_Abort_IT+0x1b2>
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	4a36      	ldr	r2, [pc, #216]	; (80027b4 <HAL_DMA_Abort_IT+0x1e0>)
 80026dc:	4293      	cmp	r3, r2
 80026de:	d04f      	beq.n	8002780 <HAL_DMA_Abort_IT+0x1ac>
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4a34      	ldr	r2, [pc, #208]	; (80027b8 <HAL_DMA_Abort_IT+0x1e4>)
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d048      	beq.n	800277c <HAL_DMA_Abort_IT+0x1a8>
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	4a33      	ldr	r2, [pc, #204]	; (80027bc <HAL_DMA_Abort_IT+0x1e8>)
 80026f0:	4293      	cmp	r3, r2
 80026f2:	d040      	beq.n	8002776 <HAL_DMA_Abort_IT+0x1a2>
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	4a31      	ldr	r2, [pc, #196]	; (80027c0 <HAL_DMA_Abort_IT+0x1ec>)
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d038      	beq.n	8002770 <HAL_DMA_Abort_IT+0x19c>
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	4a30      	ldr	r2, [pc, #192]	; (80027c4 <HAL_DMA_Abort_IT+0x1f0>)
 8002704:	4293      	cmp	r3, r2
 8002706:	d030      	beq.n	800276a <HAL_DMA_Abort_IT+0x196>
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	4a2e      	ldr	r2, [pc, #184]	; (80027c8 <HAL_DMA_Abort_IT+0x1f4>)
 800270e:	4293      	cmp	r3, r2
 8002710:	d028      	beq.n	8002764 <HAL_DMA_Abort_IT+0x190>
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	4a26      	ldr	r2, [pc, #152]	; (80027b0 <HAL_DMA_Abort_IT+0x1dc>)
 8002718:	4293      	cmp	r3, r2
 800271a:	d020      	beq.n	800275e <HAL_DMA_Abort_IT+0x18a>
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	4a2a      	ldr	r2, [pc, #168]	; (80027cc <HAL_DMA_Abort_IT+0x1f8>)
 8002722:	4293      	cmp	r3, r2
 8002724:	d019      	beq.n	800275a <HAL_DMA_Abort_IT+0x186>
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	4a29      	ldr	r2, [pc, #164]	; (80027d0 <HAL_DMA_Abort_IT+0x1fc>)
 800272c:	4293      	cmp	r3, r2
 800272e:	d012      	beq.n	8002756 <HAL_DMA_Abort_IT+0x182>
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	4a27      	ldr	r2, [pc, #156]	; (80027d4 <HAL_DMA_Abort_IT+0x200>)
 8002736:	4293      	cmp	r3, r2
 8002738:	d00a      	beq.n	8002750 <HAL_DMA_Abort_IT+0x17c>
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	4a26      	ldr	r2, [pc, #152]	; (80027d8 <HAL_DMA_Abort_IT+0x204>)
 8002740:	4293      	cmp	r3, r2
 8002742:	d102      	bne.n	800274a <HAL_DMA_Abort_IT+0x176>
 8002744:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002748:	e01b      	b.n	8002782 <HAL_DMA_Abort_IT+0x1ae>
 800274a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800274e:	e018      	b.n	8002782 <HAL_DMA_Abort_IT+0x1ae>
 8002750:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002754:	e015      	b.n	8002782 <HAL_DMA_Abort_IT+0x1ae>
 8002756:	2310      	movs	r3, #16
 8002758:	e013      	b.n	8002782 <HAL_DMA_Abort_IT+0x1ae>
 800275a:	2301      	movs	r3, #1
 800275c:	e011      	b.n	8002782 <HAL_DMA_Abort_IT+0x1ae>
 800275e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002762:	e00e      	b.n	8002782 <HAL_DMA_Abort_IT+0x1ae>
 8002764:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002768:	e00b      	b.n	8002782 <HAL_DMA_Abort_IT+0x1ae>
 800276a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800276e:	e008      	b.n	8002782 <HAL_DMA_Abort_IT+0x1ae>
 8002770:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002774:	e005      	b.n	8002782 <HAL_DMA_Abort_IT+0x1ae>
 8002776:	f44f 7380 	mov.w	r3, #256	; 0x100
 800277a:	e002      	b.n	8002782 <HAL_DMA_Abort_IT+0x1ae>
 800277c:	2310      	movs	r3, #16
 800277e:	e000      	b.n	8002782 <HAL_DMA_Abort_IT+0x1ae>
 8002780:	2301      	movs	r3, #1
 8002782:	4a17      	ldr	r2, [pc, #92]	; (80027e0 <HAL_DMA_Abort_IT+0x20c>)
 8002784:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	2201      	movs	r2, #1
 800278a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	2200      	movs	r2, #0
 8002792:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800279a:	2b00      	cmp	r3, #0
 800279c:	d003      	beq.n	80027a6 <HAL_DMA_Abort_IT+0x1d2>
    {
      hdma->XferAbortCallback(hdma);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027a2:	6878      	ldr	r0, [r7, #4]
 80027a4:	4798      	blx	r3
    } 
  }
  return status;
 80027a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80027a8:	4618      	mov	r0, r3
 80027aa:	3710      	adds	r7, #16
 80027ac:	46bd      	mov	sp, r7
 80027ae:	bd80      	pop	{r7, pc}
 80027b0:	40020080 	.word	0x40020080
 80027b4:	40020008 	.word	0x40020008
 80027b8:	4002001c 	.word	0x4002001c
 80027bc:	40020030 	.word	0x40020030
 80027c0:	40020044 	.word	0x40020044
 80027c4:	40020058 	.word	0x40020058
 80027c8:	4002006c 	.word	0x4002006c
 80027cc:	40020408 	.word	0x40020408
 80027d0:	4002041c 	.word	0x4002041c
 80027d4:	40020430 	.word	0x40020430
 80027d8:	40020444 	.word	0x40020444
 80027dc:	40020400 	.word	0x40020400
 80027e0:	40020000 	.word	0x40020000

080027e4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b084      	sub	sp, #16
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002800:	2204      	movs	r2, #4
 8002802:	409a      	lsls	r2, r3
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	4013      	ands	r3, r2
 8002808:	2b00      	cmp	r3, #0
 800280a:	f000 80f1 	beq.w	80029f0 <HAL_DMA_IRQHandler+0x20c>
 800280e:	68bb      	ldr	r3, [r7, #8]
 8002810:	f003 0304 	and.w	r3, r3, #4
 8002814:	2b00      	cmp	r3, #0
 8002816:	f000 80eb 	beq.w	80029f0 <HAL_DMA_IRQHandler+0x20c>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f003 0320 	and.w	r3, r3, #32
 8002824:	2b00      	cmp	r3, #0
 8002826:	d107      	bne.n	8002838 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	681a      	ldr	r2, [r3, #0]
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f022 0204 	bic.w	r2, r2, #4
 8002836:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	461a      	mov	r2, r3
 800283e:	4b5f      	ldr	r3, [pc, #380]	; (80029bc <HAL_DMA_IRQHandler+0x1d8>)
 8002840:	429a      	cmp	r2, r3
 8002842:	d958      	bls.n	80028f6 <HAL_DMA_IRQHandler+0x112>
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	4a5d      	ldr	r2, [pc, #372]	; (80029c0 <HAL_DMA_IRQHandler+0x1dc>)
 800284a:	4293      	cmp	r3, r2
 800284c:	d04f      	beq.n	80028ee <HAL_DMA_IRQHandler+0x10a>
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	4a5c      	ldr	r2, [pc, #368]	; (80029c4 <HAL_DMA_IRQHandler+0x1e0>)
 8002854:	4293      	cmp	r3, r2
 8002856:	d048      	beq.n	80028ea <HAL_DMA_IRQHandler+0x106>
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4a5a      	ldr	r2, [pc, #360]	; (80029c8 <HAL_DMA_IRQHandler+0x1e4>)
 800285e:	4293      	cmp	r3, r2
 8002860:	d040      	beq.n	80028e4 <HAL_DMA_IRQHandler+0x100>
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	4a59      	ldr	r2, [pc, #356]	; (80029cc <HAL_DMA_IRQHandler+0x1e8>)
 8002868:	4293      	cmp	r3, r2
 800286a:	d038      	beq.n	80028de <HAL_DMA_IRQHandler+0xfa>
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	4a57      	ldr	r2, [pc, #348]	; (80029d0 <HAL_DMA_IRQHandler+0x1ec>)
 8002872:	4293      	cmp	r3, r2
 8002874:	d030      	beq.n	80028d8 <HAL_DMA_IRQHandler+0xf4>
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	4a56      	ldr	r2, [pc, #344]	; (80029d4 <HAL_DMA_IRQHandler+0x1f0>)
 800287c:	4293      	cmp	r3, r2
 800287e:	d028      	beq.n	80028d2 <HAL_DMA_IRQHandler+0xee>
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	4a4d      	ldr	r2, [pc, #308]	; (80029bc <HAL_DMA_IRQHandler+0x1d8>)
 8002886:	4293      	cmp	r3, r2
 8002888:	d020      	beq.n	80028cc <HAL_DMA_IRQHandler+0xe8>
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	4a52      	ldr	r2, [pc, #328]	; (80029d8 <HAL_DMA_IRQHandler+0x1f4>)
 8002890:	4293      	cmp	r3, r2
 8002892:	d019      	beq.n	80028c8 <HAL_DMA_IRQHandler+0xe4>
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	4a50      	ldr	r2, [pc, #320]	; (80029dc <HAL_DMA_IRQHandler+0x1f8>)
 800289a:	4293      	cmp	r3, r2
 800289c:	d012      	beq.n	80028c4 <HAL_DMA_IRQHandler+0xe0>
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	4a4f      	ldr	r2, [pc, #316]	; (80029e0 <HAL_DMA_IRQHandler+0x1fc>)
 80028a4:	4293      	cmp	r3, r2
 80028a6:	d00a      	beq.n	80028be <HAL_DMA_IRQHandler+0xda>
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	4a4d      	ldr	r2, [pc, #308]	; (80029e4 <HAL_DMA_IRQHandler+0x200>)
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d102      	bne.n	80028b8 <HAL_DMA_IRQHandler+0xd4>
 80028b2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80028b6:	e01b      	b.n	80028f0 <HAL_DMA_IRQHandler+0x10c>
 80028b8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80028bc:	e018      	b.n	80028f0 <HAL_DMA_IRQHandler+0x10c>
 80028be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80028c2:	e015      	b.n	80028f0 <HAL_DMA_IRQHandler+0x10c>
 80028c4:	2340      	movs	r3, #64	; 0x40
 80028c6:	e013      	b.n	80028f0 <HAL_DMA_IRQHandler+0x10c>
 80028c8:	2304      	movs	r3, #4
 80028ca:	e011      	b.n	80028f0 <HAL_DMA_IRQHandler+0x10c>
 80028cc:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80028d0:	e00e      	b.n	80028f0 <HAL_DMA_IRQHandler+0x10c>
 80028d2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80028d6:	e00b      	b.n	80028f0 <HAL_DMA_IRQHandler+0x10c>
 80028d8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80028dc:	e008      	b.n	80028f0 <HAL_DMA_IRQHandler+0x10c>
 80028de:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80028e2:	e005      	b.n	80028f0 <HAL_DMA_IRQHandler+0x10c>
 80028e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80028e8:	e002      	b.n	80028f0 <HAL_DMA_IRQHandler+0x10c>
 80028ea:	2340      	movs	r3, #64	; 0x40
 80028ec:	e000      	b.n	80028f0 <HAL_DMA_IRQHandler+0x10c>
 80028ee:	2304      	movs	r3, #4
 80028f0:	4a3d      	ldr	r2, [pc, #244]	; (80029e8 <HAL_DMA_IRQHandler+0x204>)
 80028f2:	6053      	str	r3, [r2, #4]
 80028f4:	e057      	b.n	80029a6 <HAL_DMA_IRQHandler+0x1c2>
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	4a31      	ldr	r2, [pc, #196]	; (80029c0 <HAL_DMA_IRQHandler+0x1dc>)
 80028fc:	4293      	cmp	r3, r2
 80028fe:	d04f      	beq.n	80029a0 <HAL_DMA_IRQHandler+0x1bc>
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	4a2f      	ldr	r2, [pc, #188]	; (80029c4 <HAL_DMA_IRQHandler+0x1e0>)
 8002906:	4293      	cmp	r3, r2
 8002908:	d048      	beq.n	800299c <HAL_DMA_IRQHandler+0x1b8>
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	4a2e      	ldr	r2, [pc, #184]	; (80029c8 <HAL_DMA_IRQHandler+0x1e4>)
 8002910:	4293      	cmp	r3, r2
 8002912:	d040      	beq.n	8002996 <HAL_DMA_IRQHandler+0x1b2>
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	4a2c      	ldr	r2, [pc, #176]	; (80029cc <HAL_DMA_IRQHandler+0x1e8>)
 800291a:	4293      	cmp	r3, r2
 800291c:	d038      	beq.n	8002990 <HAL_DMA_IRQHandler+0x1ac>
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	4a2b      	ldr	r2, [pc, #172]	; (80029d0 <HAL_DMA_IRQHandler+0x1ec>)
 8002924:	4293      	cmp	r3, r2
 8002926:	d030      	beq.n	800298a <HAL_DMA_IRQHandler+0x1a6>
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	4a29      	ldr	r2, [pc, #164]	; (80029d4 <HAL_DMA_IRQHandler+0x1f0>)
 800292e:	4293      	cmp	r3, r2
 8002930:	d028      	beq.n	8002984 <HAL_DMA_IRQHandler+0x1a0>
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	4a21      	ldr	r2, [pc, #132]	; (80029bc <HAL_DMA_IRQHandler+0x1d8>)
 8002938:	4293      	cmp	r3, r2
 800293a:	d020      	beq.n	800297e <HAL_DMA_IRQHandler+0x19a>
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	4a25      	ldr	r2, [pc, #148]	; (80029d8 <HAL_DMA_IRQHandler+0x1f4>)
 8002942:	4293      	cmp	r3, r2
 8002944:	d019      	beq.n	800297a <HAL_DMA_IRQHandler+0x196>
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	4a24      	ldr	r2, [pc, #144]	; (80029dc <HAL_DMA_IRQHandler+0x1f8>)
 800294c:	4293      	cmp	r3, r2
 800294e:	d012      	beq.n	8002976 <HAL_DMA_IRQHandler+0x192>
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	4a22      	ldr	r2, [pc, #136]	; (80029e0 <HAL_DMA_IRQHandler+0x1fc>)
 8002956:	4293      	cmp	r3, r2
 8002958:	d00a      	beq.n	8002970 <HAL_DMA_IRQHandler+0x18c>
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	4a21      	ldr	r2, [pc, #132]	; (80029e4 <HAL_DMA_IRQHandler+0x200>)
 8002960:	4293      	cmp	r3, r2
 8002962:	d102      	bne.n	800296a <HAL_DMA_IRQHandler+0x186>
 8002964:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002968:	e01b      	b.n	80029a2 <HAL_DMA_IRQHandler+0x1be>
 800296a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800296e:	e018      	b.n	80029a2 <HAL_DMA_IRQHandler+0x1be>
 8002970:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002974:	e015      	b.n	80029a2 <HAL_DMA_IRQHandler+0x1be>
 8002976:	2340      	movs	r3, #64	; 0x40
 8002978:	e013      	b.n	80029a2 <HAL_DMA_IRQHandler+0x1be>
 800297a:	2304      	movs	r3, #4
 800297c:	e011      	b.n	80029a2 <HAL_DMA_IRQHandler+0x1be>
 800297e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002982:	e00e      	b.n	80029a2 <HAL_DMA_IRQHandler+0x1be>
 8002984:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002988:	e00b      	b.n	80029a2 <HAL_DMA_IRQHandler+0x1be>
 800298a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800298e:	e008      	b.n	80029a2 <HAL_DMA_IRQHandler+0x1be>
 8002990:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002994:	e005      	b.n	80029a2 <HAL_DMA_IRQHandler+0x1be>
 8002996:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800299a:	e002      	b.n	80029a2 <HAL_DMA_IRQHandler+0x1be>
 800299c:	2340      	movs	r3, #64	; 0x40
 800299e:	e000      	b.n	80029a2 <HAL_DMA_IRQHandler+0x1be>
 80029a0:	2304      	movs	r3, #4
 80029a2:	4a12      	ldr	r2, [pc, #72]	; (80029ec <HAL_DMA_IRQHandler+0x208>)
 80029a4:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	f000 8136 	beq.w	8002c1c <HAL_DMA_IRQHandler+0x438>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029b4:	6878      	ldr	r0, [r7, #4]
 80029b6:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80029b8:	e130      	b.n	8002c1c <HAL_DMA_IRQHandler+0x438>
 80029ba:	bf00      	nop
 80029bc:	40020080 	.word	0x40020080
 80029c0:	40020008 	.word	0x40020008
 80029c4:	4002001c 	.word	0x4002001c
 80029c8:	40020030 	.word	0x40020030
 80029cc:	40020044 	.word	0x40020044
 80029d0:	40020058 	.word	0x40020058
 80029d4:	4002006c 	.word	0x4002006c
 80029d8:	40020408 	.word	0x40020408
 80029dc:	4002041c 	.word	0x4002041c
 80029e0:	40020430 	.word	0x40020430
 80029e4:	40020444 	.word	0x40020444
 80029e8:	40020400 	.word	0x40020400
 80029ec:	40020000 	.word	0x40020000
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029f4:	2202      	movs	r2, #2
 80029f6:	409a      	lsls	r2, r3
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	4013      	ands	r3, r2
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	f000 80dd 	beq.w	8002bbc <HAL_DMA_IRQHandler+0x3d8>
 8002a02:	68bb      	ldr	r3, [r7, #8]
 8002a04:	f003 0302 	and.w	r3, r3, #2
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	f000 80d7 	beq.w	8002bbc <HAL_DMA_IRQHandler+0x3d8>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f003 0320 	and.w	r3, r3, #32
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d10b      	bne.n	8002a34 <HAL_DMA_IRQHandler+0x250>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	681a      	ldr	r2, [r3, #0]
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f022 020a 	bic.w	r2, r2, #10
 8002a2a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2201      	movs	r2, #1
 8002a30:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	461a      	mov	r2, r3
 8002a3a:	4b7b      	ldr	r3, [pc, #492]	; (8002c28 <HAL_DMA_IRQHandler+0x444>)
 8002a3c:	429a      	cmp	r2, r3
 8002a3e:	d958      	bls.n	8002af2 <HAL_DMA_IRQHandler+0x30e>
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	4a79      	ldr	r2, [pc, #484]	; (8002c2c <HAL_DMA_IRQHandler+0x448>)
 8002a46:	4293      	cmp	r3, r2
 8002a48:	d04f      	beq.n	8002aea <HAL_DMA_IRQHandler+0x306>
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	4a78      	ldr	r2, [pc, #480]	; (8002c30 <HAL_DMA_IRQHandler+0x44c>)
 8002a50:	4293      	cmp	r3, r2
 8002a52:	d048      	beq.n	8002ae6 <HAL_DMA_IRQHandler+0x302>
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4a76      	ldr	r2, [pc, #472]	; (8002c34 <HAL_DMA_IRQHandler+0x450>)
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d040      	beq.n	8002ae0 <HAL_DMA_IRQHandler+0x2fc>
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	4a75      	ldr	r2, [pc, #468]	; (8002c38 <HAL_DMA_IRQHandler+0x454>)
 8002a64:	4293      	cmp	r3, r2
 8002a66:	d038      	beq.n	8002ada <HAL_DMA_IRQHandler+0x2f6>
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	4a73      	ldr	r2, [pc, #460]	; (8002c3c <HAL_DMA_IRQHandler+0x458>)
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	d030      	beq.n	8002ad4 <HAL_DMA_IRQHandler+0x2f0>
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	4a72      	ldr	r2, [pc, #456]	; (8002c40 <HAL_DMA_IRQHandler+0x45c>)
 8002a78:	4293      	cmp	r3, r2
 8002a7a:	d028      	beq.n	8002ace <HAL_DMA_IRQHandler+0x2ea>
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	4a69      	ldr	r2, [pc, #420]	; (8002c28 <HAL_DMA_IRQHandler+0x444>)
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d020      	beq.n	8002ac8 <HAL_DMA_IRQHandler+0x2e4>
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	4a6e      	ldr	r2, [pc, #440]	; (8002c44 <HAL_DMA_IRQHandler+0x460>)
 8002a8c:	4293      	cmp	r3, r2
 8002a8e:	d019      	beq.n	8002ac4 <HAL_DMA_IRQHandler+0x2e0>
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	4a6c      	ldr	r2, [pc, #432]	; (8002c48 <HAL_DMA_IRQHandler+0x464>)
 8002a96:	4293      	cmp	r3, r2
 8002a98:	d012      	beq.n	8002ac0 <HAL_DMA_IRQHandler+0x2dc>
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	4a6b      	ldr	r2, [pc, #428]	; (8002c4c <HAL_DMA_IRQHandler+0x468>)
 8002aa0:	4293      	cmp	r3, r2
 8002aa2:	d00a      	beq.n	8002aba <HAL_DMA_IRQHandler+0x2d6>
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	4a69      	ldr	r2, [pc, #420]	; (8002c50 <HAL_DMA_IRQHandler+0x46c>)
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	d102      	bne.n	8002ab4 <HAL_DMA_IRQHandler+0x2d0>
 8002aae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002ab2:	e01b      	b.n	8002aec <HAL_DMA_IRQHandler+0x308>
 8002ab4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002ab8:	e018      	b.n	8002aec <HAL_DMA_IRQHandler+0x308>
 8002aba:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002abe:	e015      	b.n	8002aec <HAL_DMA_IRQHandler+0x308>
 8002ac0:	2320      	movs	r3, #32
 8002ac2:	e013      	b.n	8002aec <HAL_DMA_IRQHandler+0x308>
 8002ac4:	2302      	movs	r3, #2
 8002ac6:	e011      	b.n	8002aec <HAL_DMA_IRQHandler+0x308>
 8002ac8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002acc:	e00e      	b.n	8002aec <HAL_DMA_IRQHandler+0x308>
 8002ace:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002ad2:	e00b      	b.n	8002aec <HAL_DMA_IRQHandler+0x308>
 8002ad4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002ad8:	e008      	b.n	8002aec <HAL_DMA_IRQHandler+0x308>
 8002ada:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002ade:	e005      	b.n	8002aec <HAL_DMA_IRQHandler+0x308>
 8002ae0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002ae4:	e002      	b.n	8002aec <HAL_DMA_IRQHandler+0x308>
 8002ae6:	2320      	movs	r3, #32
 8002ae8:	e000      	b.n	8002aec <HAL_DMA_IRQHandler+0x308>
 8002aea:	2302      	movs	r3, #2
 8002aec:	4a59      	ldr	r2, [pc, #356]	; (8002c54 <HAL_DMA_IRQHandler+0x470>)
 8002aee:	6053      	str	r3, [r2, #4]
 8002af0:	e057      	b.n	8002ba2 <HAL_DMA_IRQHandler+0x3be>
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	4a4d      	ldr	r2, [pc, #308]	; (8002c2c <HAL_DMA_IRQHandler+0x448>)
 8002af8:	4293      	cmp	r3, r2
 8002afa:	d04f      	beq.n	8002b9c <HAL_DMA_IRQHandler+0x3b8>
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	4a4b      	ldr	r2, [pc, #300]	; (8002c30 <HAL_DMA_IRQHandler+0x44c>)
 8002b02:	4293      	cmp	r3, r2
 8002b04:	d048      	beq.n	8002b98 <HAL_DMA_IRQHandler+0x3b4>
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	4a4a      	ldr	r2, [pc, #296]	; (8002c34 <HAL_DMA_IRQHandler+0x450>)
 8002b0c:	4293      	cmp	r3, r2
 8002b0e:	d040      	beq.n	8002b92 <HAL_DMA_IRQHandler+0x3ae>
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	4a48      	ldr	r2, [pc, #288]	; (8002c38 <HAL_DMA_IRQHandler+0x454>)
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d038      	beq.n	8002b8c <HAL_DMA_IRQHandler+0x3a8>
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	4a47      	ldr	r2, [pc, #284]	; (8002c3c <HAL_DMA_IRQHandler+0x458>)
 8002b20:	4293      	cmp	r3, r2
 8002b22:	d030      	beq.n	8002b86 <HAL_DMA_IRQHandler+0x3a2>
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	4a45      	ldr	r2, [pc, #276]	; (8002c40 <HAL_DMA_IRQHandler+0x45c>)
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d028      	beq.n	8002b80 <HAL_DMA_IRQHandler+0x39c>
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	4a3d      	ldr	r2, [pc, #244]	; (8002c28 <HAL_DMA_IRQHandler+0x444>)
 8002b34:	4293      	cmp	r3, r2
 8002b36:	d020      	beq.n	8002b7a <HAL_DMA_IRQHandler+0x396>
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4a41      	ldr	r2, [pc, #260]	; (8002c44 <HAL_DMA_IRQHandler+0x460>)
 8002b3e:	4293      	cmp	r3, r2
 8002b40:	d019      	beq.n	8002b76 <HAL_DMA_IRQHandler+0x392>
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	4a40      	ldr	r2, [pc, #256]	; (8002c48 <HAL_DMA_IRQHandler+0x464>)
 8002b48:	4293      	cmp	r3, r2
 8002b4a:	d012      	beq.n	8002b72 <HAL_DMA_IRQHandler+0x38e>
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	4a3e      	ldr	r2, [pc, #248]	; (8002c4c <HAL_DMA_IRQHandler+0x468>)
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d00a      	beq.n	8002b6c <HAL_DMA_IRQHandler+0x388>
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	4a3d      	ldr	r2, [pc, #244]	; (8002c50 <HAL_DMA_IRQHandler+0x46c>)
 8002b5c:	4293      	cmp	r3, r2
 8002b5e:	d102      	bne.n	8002b66 <HAL_DMA_IRQHandler+0x382>
 8002b60:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002b64:	e01b      	b.n	8002b9e <HAL_DMA_IRQHandler+0x3ba>
 8002b66:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002b6a:	e018      	b.n	8002b9e <HAL_DMA_IRQHandler+0x3ba>
 8002b6c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002b70:	e015      	b.n	8002b9e <HAL_DMA_IRQHandler+0x3ba>
 8002b72:	2320      	movs	r3, #32
 8002b74:	e013      	b.n	8002b9e <HAL_DMA_IRQHandler+0x3ba>
 8002b76:	2302      	movs	r3, #2
 8002b78:	e011      	b.n	8002b9e <HAL_DMA_IRQHandler+0x3ba>
 8002b7a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002b7e:	e00e      	b.n	8002b9e <HAL_DMA_IRQHandler+0x3ba>
 8002b80:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002b84:	e00b      	b.n	8002b9e <HAL_DMA_IRQHandler+0x3ba>
 8002b86:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002b8a:	e008      	b.n	8002b9e <HAL_DMA_IRQHandler+0x3ba>
 8002b8c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002b90:	e005      	b.n	8002b9e <HAL_DMA_IRQHandler+0x3ba>
 8002b92:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002b96:	e002      	b.n	8002b9e <HAL_DMA_IRQHandler+0x3ba>
 8002b98:	2320      	movs	r3, #32
 8002b9a:	e000      	b.n	8002b9e <HAL_DMA_IRQHandler+0x3ba>
 8002b9c:	2302      	movs	r3, #2
 8002b9e:	4a2e      	ldr	r2, [pc, #184]	; (8002c58 <HAL_DMA_IRQHandler+0x474>)
 8002ba0:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d034      	beq.n	8002c1c <HAL_DMA_IRQHandler+0x438>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bb6:	6878      	ldr	r0, [r7, #4]
 8002bb8:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002bba:	e02f      	b.n	8002c1c <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bc0:	2208      	movs	r2, #8
 8002bc2:	409a      	lsls	r2, r3
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	4013      	ands	r3, r2
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d028      	beq.n	8002c1e <HAL_DMA_IRQHandler+0x43a>
 8002bcc:	68bb      	ldr	r3, [r7, #8]
 8002bce:	f003 0308 	and.w	r3, r3, #8
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d023      	beq.n	8002c1e <HAL_DMA_IRQHandler+0x43a>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	681a      	ldr	r2, [r3, #0]
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f022 020e 	bic.w	r2, r2, #14
 8002be4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bee:	2101      	movs	r1, #1
 8002bf0:	fa01 f202 	lsl.w	r2, r1, r2
 8002bf4:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	2201      	movs	r2, #1
 8002bfa:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2201      	movs	r2, #1
 8002c00:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2200      	movs	r2, #0
 8002c08:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d004      	beq.n	8002c1e <HAL_DMA_IRQHandler+0x43a>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c18:	6878      	ldr	r0, [r7, #4]
 8002c1a:	4798      	blx	r3
    }
  }
  return;
 8002c1c:	bf00      	nop
 8002c1e:	bf00      	nop
}
 8002c20:	3710      	adds	r7, #16
 8002c22:	46bd      	mov	sp, r7
 8002c24:	bd80      	pop	{r7, pc}
 8002c26:	bf00      	nop
 8002c28:	40020080 	.word	0x40020080
 8002c2c:	40020008 	.word	0x40020008
 8002c30:	4002001c 	.word	0x4002001c
 8002c34:	40020030 	.word	0x40020030
 8002c38:	40020044 	.word	0x40020044
 8002c3c:	40020058 	.word	0x40020058
 8002c40:	4002006c 	.word	0x4002006c
 8002c44:	40020408 	.word	0x40020408
 8002c48:	4002041c 	.word	0x4002041c
 8002c4c:	40020430 	.word	0x40020430
 8002c50:	40020444 	.word	0x40020444
 8002c54:	40020400 	.word	0x40020400
 8002c58:	40020000 	.word	0x40020000

08002c5c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002c5c:	b480      	push	{r7}
 8002c5e:	b085      	sub	sp, #20
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	60f8      	str	r0, [r7, #12]
 8002c64:	60b9      	str	r1, [r7, #8]
 8002c66:	607a      	str	r2, [r7, #4]
 8002c68:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c72:	2101      	movs	r1, #1
 8002c74:	fa01 f202 	lsl.w	r2, r1, r2
 8002c78:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	683a      	ldr	r2, [r7, #0]
 8002c80:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	685b      	ldr	r3, [r3, #4]
 8002c86:	2b10      	cmp	r3, #16
 8002c88:	d108      	bne.n	8002c9c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	687a      	ldr	r2, [r7, #4]
 8002c90:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	68ba      	ldr	r2, [r7, #8]
 8002c98:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002c9a:	e007      	b.n	8002cac <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	68ba      	ldr	r2, [r7, #8]
 8002ca2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	687a      	ldr	r2, [r7, #4]
 8002caa:	60da      	str	r2, [r3, #12]
}
 8002cac:	bf00      	nop
 8002cae:	3714      	adds	r7, #20
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	bc80      	pop	{r7}
 8002cb4:	4770      	bx	lr
	...

08002cb8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002cb8:	b480      	push	{r7}
 8002cba:	b08b      	sub	sp, #44	; 0x2c
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
 8002cc0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002cca:	e179      	b.n	8002fc0 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002ccc:	2201      	movs	r2, #1
 8002cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8002cd4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002cd6:	683b      	ldr	r3, [r7, #0]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	69fa      	ldr	r2, [r7, #28]
 8002cdc:	4013      	ands	r3, r2
 8002cde:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002ce0:	69ba      	ldr	r2, [r7, #24]
 8002ce2:	69fb      	ldr	r3, [r7, #28]
 8002ce4:	429a      	cmp	r2, r3
 8002ce6:	f040 8168 	bne.w	8002fba <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	685b      	ldr	r3, [r3, #4]
 8002cee:	4a96      	ldr	r2, [pc, #600]	; (8002f48 <HAL_GPIO_Init+0x290>)
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	d05e      	beq.n	8002db2 <HAL_GPIO_Init+0xfa>
 8002cf4:	4a94      	ldr	r2, [pc, #592]	; (8002f48 <HAL_GPIO_Init+0x290>)
 8002cf6:	4293      	cmp	r3, r2
 8002cf8:	d875      	bhi.n	8002de6 <HAL_GPIO_Init+0x12e>
 8002cfa:	4a94      	ldr	r2, [pc, #592]	; (8002f4c <HAL_GPIO_Init+0x294>)
 8002cfc:	4293      	cmp	r3, r2
 8002cfe:	d058      	beq.n	8002db2 <HAL_GPIO_Init+0xfa>
 8002d00:	4a92      	ldr	r2, [pc, #584]	; (8002f4c <HAL_GPIO_Init+0x294>)
 8002d02:	4293      	cmp	r3, r2
 8002d04:	d86f      	bhi.n	8002de6 <HAL_GPIO_Init+0x12e>
 8002d06:	4a92      	ldr	r2, [pc, #584]	; (8002f50 <HAL_GPIO_Init+0x298>)
 8002d08:	4293      	cmp	r3, r2
 8002d0a:	d052      	beq.n	8002db2 <HAL_GPIO_Init+0xfa>
 8002d0c:	4a90      	ldr	r2, [pc, #576]	; (8002f50 <HAL_GPIO_Init+0x298>)
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d869      	bhi.n	8002de6 <HAL_GPIO_Init+0x12e>
 8002d12:	4a90      	ldr	r2, [pc, #576]	; (8002f54 <HAL_GPIO_Init+0x29c>)
 8002d14:	4293      	cmp	r3, r2
 8002d16:	d04c      	beq.n	8002db2 <HAL_GPIO_Init+0xfa>
 8002d18:	4a8e      	ldr	r2, [pc, #568]	; (8002f54 <HAL_GPIO_Init+0x29c>)
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	d863      	bhi.n	8002de6 <HAL_GPIO_Init+0x12e>
 8002d1e:	4a8e      	ldr	r2, [pc, #568]	; (8002f58 <HAL_GPIO_Init+0x2a0>)
 8002d20:	4293      	cmp	r3, r2
 8002d22:	d046      	beq.n	8002db2 <HAL_GPIO_Init+0xfa>
 8002d24:	4a8c      	ldr	r2, [pc, #560]	; (8002f58 <HAL_GPIO_Init+0x2a0>)
 8002d26:	4293      	cmp	r3, r2
 8002d28:	d85d      	bhi.n	8002de6 <HAL_GPIO_Init+0x12e>
 8002d2a:	2b12      	cmp	r3, #18
 8002d2c:	d82a      	bhi.n	8002d84 <HAL_GPIO_Init+0xcc>
 8002d2e:	2b12      	cmp	r3, #18
 8002d30:	d859      	bhi.n	8002de6 <HAL_GPIO_Init+0x12e>
 8002d32:	a201      	add	r2, pc, #4	; (adr r2, 8002d38 <HAL_GPIO_Init+0x80>)
 8002d34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d38:	08002db3 	.word	0x08002db3
 8002d3c:	08002d8d 	.word	0x08002d8d
 8002d40:	08002d9f 	.word	0x08002d9f
 8002d44:	08002de1 	.word	0x08002de1
 8002d48:	08002de7 	.word	0x08002de7
 8002d4c:	08002de7 	.word	0x08002de7
 8002d50:	08002de7 	.word	0x08002de7
 8002d54:	08002de7 	.word	0x08002de7
 8002d58:	08002de7 	.word	0x08002de7
 8002d5c:	08002de7 	.word	0x08002de7
 8002d60:	08002de7 	.word	0x08002de7
 8002d64:	08002de7 	.word	0x08002de7
 8002d68:	08002de7 	.word	0x08002de7
 8002d6c:	08002de7 	.word	0x08002de7
 8002d70:	08002de7 	.word	0x08002de7
 8002d74:	08002de7 	.word	0x08002de7
 8002d78:	08002de7 	.word	0x08002de7
 8002d7c:	08002d95 	.word	0x08002d95
 8002d80:	08002da9 	.word	0x08002da9
 8002d84:	4a75      	ldr	r2, [pc, #468]	; (8002f5c <HAL_GPIO_Init+0x2a4>)
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d013      	beq.n	8002db2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002d8a:	e02c      	b.n	8002de6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	68db      	ldr	r3, [r3, #12]
 8002d90:	623b      	str	r3, [r7, #32]
          break;
 8002d92:	e029      	b.n	8002de8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	68db      	ldr	r3, [r3, #12]
 8002d98:	3304      	adds	r3, #4
 8002d9a:	623b      	str	r3, [r7, #32]
          break;
 8002d9c:	e024      	b.n	8002de8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	68db      	ldr	r3, [r3, #12]
 8002da2:	3308      	adds	r3, #8
 8002da4:	623b      	str	r3, [r7, #32]
          break;
 8002da6:	e01f      	b.n	8002de8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	68db      	ldr	r3, [r3, #12]
 8002dac:	330c      	adds	r3, #12
 8002dae:	623b      	str	r3, [r7, #32]
          break;
 8002db0:	e01a      	b.n	8002de8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	689b      	ldr	r3, [r3, #8]
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d102      	bne.n	8002dc0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002dba:	2304      	movs	r3, #4
 8002dbc:	623b      	str	r3, [r7, #32]
          break;
 8002dbe:	e013      	b.n	8002de8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	689b      	ldr	r3, [r3, #8]
 8002dc4:	2b01      	cmp	r3, #1
 8002dc6:	d105      	bne.n	8002dd4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002dc8:	2308      	movs	r3, #8
 8002dca:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	69fa      	ldr	r2, [r7, #28]
 8002dd0:	611a      	str	r2, [r3, #16]
          break;
 8002dd2:	e009      	b.n	8002de8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002dd4:	2308      	movs	r3, #8
 8002dd6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	69fa      	ldr	r2, [r7, #28]
 8002ddc:	615a      	str	r2, [r3, #20]
          break;
 8002dde:	e003      	b.n	8002de8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002de0:	2300      	movs	r3, #0
 8002de2:	623b      	str	r3, [r7, #32]
          break;
 8002de4:	e000      	b.n	8002de8 <HAL_GPIO_Init+0x130>
          break;
 8002de6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002de8:	69bb      	ldr	r3, [r7, #24]
 8002dea:	2bff      	cmp	r3, #255	; 0xff
 8002dec:	d801      	bhi.n	8002df2 <HAL_GPIO_Init+0x13a>
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	e001      	b.n	8002df6 <HAL_GPIO_Init+0x13e>
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	3304      	adds	r3, #4
 8002df6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002df8:	69bb      	ldr	r3, [r7, #24]
 8002dfa:	2bff      	cmp	r3, #255	; 0xff
 8002dfc:	d802      	bhi.n	8002e04 <HAL_GPIO_Init+0x14c>
 8002dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e00:	009b      	lsls	r3, r3, #2
 8002e02:	e002      	b.n	8002e0a <HAL_GPIO_Init+0x152>
 8002e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e06:	3b08      	subs	r3, #8
 8002e08:	009b      	lsls	r3, r3, #2
 8002e0a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002e0c:	697b      	ldr	r3, [r7, #20]
 8002e0e:	681a      	ldr	r2, [r3, #0]
 8002e10:	210f      	movs	r1, #15
 8002e12:	693b      	ldr	r3, [r7, #16]
 8002e14:	fa01 f303 	lsl.w	r3, r1, r3
 8002e18:	43db      	mvns	r3, r3
 8002e1a:	401a      	ands	r2, r3
 8002e1c:	6a39      	ldr	r1, [r7, #32]
 8002e1e:	693b      	ldr	r3, [r7, #16]
 8002e20:	fa01 f303 	lsl.w	r3, r1, r3
 8002e24:	431a      	orrs	r2, r3
 8002e26:	697b      	ldr	r3, [r7, #20]
 8002e28:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	685b      	ldr	r3, [r3, #4]
 8002e2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	f000 80c1 	beq.w	8002fba <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002e38:	4b49      	ldr	r3, [pc, #292]	; (8002f60 <HAL_GPIO_Init+0x2a8>)
 8002e3a:	699b      	ldr	r3, [r3, #24]
 8002e3c:	4a48      	ldr	r2, [pc, #288]	; (8002f60 <HAL_GPIO_Init+0x2a8>)
 8002e3e:	f043 0301 	orr.w	r3, r3, #1
 8002e42:	6193      	str	r3, [r2, #24]
 8002e44:	4b46      	ldr	r3, [pc, #280]	; (8002f60 <HAL_GPIO_Init+0x2a8>)
 8002e46:	699b      	ldr	r3, [r3, #24]
 8002e48:	f003 0301 	and.w	r3, r3, #1
 8002e4c:	60bb      	str	r3, [r7, #8]
 8002e4e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002e50:	4a44      	ldr	r2, [pc, #272]	; (8002f64 <HAL_GPIO_Init+0x2ac>)
 8002e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e54:	089b      	lsrs	r3, r3, #2
 8002e56:	3302      	adds	r3, #2
 8002e58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e5c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e60:	f003 0303 	and.w	r3, r3, #3
 8002e64:	009b      	lsls	r3, r3, #2
 8002e66:	220f      	movs	r2, #15
 8002e68:	fa02 f303 	lsl.w	r3, r2, r3
 8002e6c:	43db      	mvns	r3, r3
 8002e6e:	68fa      	ldr	r2, [r7, #12]
 8002e70:	4013      	ands	r3, r2
 8002e72:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	4a3c      	ldr	r2, [pc, #240]	; (8002f68 <HAL_GPIO_Init+0x2b0>)
 8002e78:	4293      	cmp	r3, r2
 8002e7a:	d01f      	beq.n	8002ebc <HAL_GPIO_Init+0x204>
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	4a3b      	ldr	r2, [pc, #236]	; (8002f6c <HAL_GPIO_Init+0x2b4>)
 8002e80:	4293      	cmp	r3, r2
 8002e82:	d019      	beq.n	8002eb8 <HAL_GPIO_Init+0x200>
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	4a3a      	ldr	r2, [pc, #232]	; (8002f70 <HAL_GPIO_Init+0x2b8>)
 8002e88:	4293      	cmp	r3, r2
 8002e8a:	d013      	beq.n	8002eb4 <HAL_GPIO_Init+0x1fc>
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	4a39      	ldr	r2, [pc, #228]	; (8002f74 <HAL_GPIO_Init+0x2bc>)
 8002e90:	4293      	cmp	r3, r2
 8002e92:	d00d      	beq.n	8002eb0 <HAL_GPIO_Init+0x1f8>
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	4a38      	ldr	r2, [pc, #224]	; (8002f78 <HAL_GPIO_Init+0x2c0>)
 8002e98:	4293      	cmp	r3, r2
 8002e9a:	d007      	beq.n	8002eac <HAL_GPIO_Init+0x1f4>
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	4a37      	ldr	r2, [pc, #220]	; (8002f7c <HAL_GPIO_Init+0x2c4>)
 8002ea0:	4293      	cmp	r3, r2
 8002ea2:	d101      	bne.n	8002ea8 <HAL_GPIO_Init+0x1f0>
 8002ea4:	2305      	movs	r3, #5
 8002ea6:	e00a      	b.n	8002ebe <HAL_GPIO_Init+0x206>
 8002ea8:	2306      	movs	r3, #6
 8002eaa:	e008      	b.n	8002ebe <HAL_GPIO_Init+0x206>
 8002eac:	2304      	movs	r3, #4
 8002eae:	e006      	b.n	8002ebe <HAL_GPIO_Init+0x206>
 8002eb0:	2303      	movs	r3, #3
 8002eb2:	e004      	b.n	8002ebe <HAL_GPIO_Init+0x206>
 8002eb4:	2302      	movs	r3, #2
 8002eb6:	e002      	b.n	8002ebe <HAL_GPIO_Init+0x206>
 8002eb8:	2301      	movs	r3, #1
 8002eba:	e000      	b.n	8002ebe <HAL_GPIO_Init+0x206>
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ec0:	f002 0203 	and.w	r2, r2, #3
 8002ec4:	0092      	lsls	r2, r2, #2
 8002ec6:	4093      	lsls	r3, r2
 8002ec8:	68fa      	ldr	r2, [r7, #12]
 8002eca:	4313      	orrs	r3, r2
 8002ecc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002ece:	4925      	ldr	r1, [pc, #148]	; (8002f64 <HAL_GPIO_Init+0x2ac>)
 8002ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ed2:	089b      	lsrs	r3, r3, #2
 8002ed4:	3302      	adds	r3, #2
 8002ed6:	68fa      	ldr	r2, [r7, #12]
 8002ed8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	685b      	ldr	r3, [r3, #4]
 8002ee0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d006      	beq.n	8002ef6 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002ee8:	4b25      	ldr	r3, [pc, #148]	; (8002f80 <HAL_GPIO_Init+0x2c8>)
 8002eea:	689a      	ldr	r2, [r3, #8]
 8002eec:	4924      	ldr	r1, [pc, #144]	; (8002f80 <HAL_GPIO_Init+0x2c8>)
 8002eee:	69bb      	ldr	r3, [r7, #24]
 8002ef0:	4313      	orrs	r3, r2
 8002ef2:	608b      	str	r3, [r1, #8]
 8002ef4:	e006      	b.n	8002f04 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002ef6:	4b22      	ldr	r3, [pc, #136]	; (8002f80 <HAL_GPIO_Init+0x2c8>)
 8002ef8:	689a      	ldr	r2, [r3, #8]
 8002efa:	69bb      	ldr	r3, [r7, #24]
 8002efc:	43db      	mvns	r3, r3
 8002efe:	4920      	ldr	r1, [pc, #128]	; (8002f80 <HAL_GPIO_Init+0x2c8>)
 8002f00:	4013      	ands	r3, r2
 8002f02:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	685b      	ldr	r3, [r3, #4]
 8002f08:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d006      	beq.n	8002f1e <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002f10:	4b1b      	ldr	r3, [pc, #108]	; (8002f80 <HAL_GPIO_Init+0x2c8>)
 8002f12:	68da      	ldr	r2, [r3, #12]
 8002f14:	491a      	ldr	r1, [pc, #104]	; (8002f80 <HAL_GPIO_Init+0x2c8>)
 8002f16:	69bb      	ldr	r3, [r7, #24]
 8002f18:	4313      	orrs	r3, r2
 8002f1a:	60cb      	str	r3, [r1, #12]
 8002f1c:	e006      	b.n	8002f2c <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002f1e:	4b18      	ldr	r3, [pc, #96]	; (8002f80 <HAL_GPIO_Init+0x2c8>)
 8002f20:	68da      	ldr	r2, [r3, #12]
 8002f22:	69bb      	ldr	r3, [r7, #24]
 8002f24:	43db      	mvns	r3, r3
 8002f26:	4916      	ldr	r1, [pc, #88]	; (8002f80 <HAL_GPIO_Init+0x2c8>)
 8002f28:	4013      	ands	r3, r2
 8002f2a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	685b      	ldr	r3, [r3, #4]
 8002f30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d025      	beq.n	8002f84 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002f38:	4b11      	ldr	r3, [pc, #68]	; (8002f80 <HAL_GPIO_Init+0x2c8>)
 8002f3a:	685a      	ldr	r2, [r3, #4]
 8002f3c:	4910      	ldr	r1, [pc, #64]	; (8002f80 <HAL_GPIO_Init+0x2c8>)
 8002f3e:	69bb      	ldr	r3, [r7, #24]
 8002f40:	4313      	orrs	r3, r2
 8002f42:	604b      	str	r3, [r1, #4]
 8002f44:	e025      	b.n	8002f92 <HAL_GPIO_Init+0x2da>
 8002f46:	bf00      	nop
 8002f48:	10320000 	.word	0x10320000
 8002f4c:	10310000 	.word	0x10310000
 8002f50:	10220000 	.word	0x10220000
 8002f54:	10210000 	.word	0x10210000
 8002f58:	10120000 	.word	0x10120000
 8002f5c:	10110000 	.word	0x10110000
 8002f60:	40021000 	.word	0x40021000
 8002f64:	40010000 	.word	0x40010000
 8002f68:	40010800 	.word	0x40010800
 8002f6c:	40010c00 	.word	0x40010c00
 8002f70:	40011000 	.word	0x40011000
 8002f74:	40011400 	.word	0x40011400
 8002f78:	40011800 	.word	0x40011800
 8002f7c:	40011c00 	.word	0x40011c00
 8002f80:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002f84:	4b15      	ldr	r3, [pc, #84]	; (8002fdc <HAL_GPIO_Init+0x324>)
 8002f86:	685a      	ldr	r2, [r3, #4]
 8002f88:	69bb      	ldr	r3, [r7, #24]
 8002f8a:	43db      	mvns	r3, r3
 8002f8c:	4913      	ldr	r1, [pc, #76]	; (8002fdc <HAL_GPIO_Init+0x324>)
 8002f8e:	4013      	ands	r3, r2
 8002f90:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	685b      	ldr	r3, [r3, #4]
 8002f96:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d006      	beq.n	8002fac <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002f9e:	4b0f      	ldr	r3, [pc, #60]	; (8002fdc <HAL_GPIO_Init+0x324>)
 8002fa0:	681a      	ldr	r2, [r3, #0]
 8002fa2:	490e      	ldr	r1, [pc, #56]	; (8002fdc <HAL_GPIO_Init+0x324>)
 8002fa4:	69bb      	ldr	r3, [r7, #24]
 8002fa6:	4313      	orrs	r3, r2
 8002fa8:	600b      	str	r3, [r1, #0]
 8002faa:	e006      	b.n	8002fba <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002fac:	4b0b      	ldr	r3, [pc, #44]	; (8002fdc <HAL_GPIO_Init+0x324>)
 8002fae:	681a      	ldr	r2, [r3, #0]
 8002fb0:	69bb      	ldr	r3, [r7, #24]
 8002fb2:	43db      	mvns	r3, r3
 8002fb4:	4909      	ldr	r1, [pc, #36]	; (8002fdc <HAL_GPIO_Init+0x324>)
 8002fb6:	4013      	ands	r3, r2
 8002fb8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fbc:	3301      	adds	r3, #1
 8002fbe:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002fc0:	683b      	ldr	r3, [r7, #0]
 8002fc2:	681a      	ldr	r2, [r3, #0]
 8002fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fc6:	fa22 f303 	lsr.w	r3, r2, r3
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	f47f ae7e 	bne.w	8002ccc <HAL_GPIO_Init+0x14>
  }
}
 8002fd0:	bf00      	nop
 8002fd2:	bf00      	nop
 8002fd4:	372c      	adds	r7, #44	; 0x2c
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	bc80      	pop	{r7}
 8002fda:	4770      	bx	lr
 8002fdc:	40010400 	.word	0x40010400

08002fe0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002fe0:	b480      	push	{r7}
 8002fe2:	b085      	sub	sp, #20
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
 8002fe8:	460b      	mov	r3, r1
 8002fea:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	689a      	ldr	r2, [r3, #8]
 8002ff0:	887b      	ldrh	r3, [r7, #2]
 8002ff2:	4013      	ands	r3, r2
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d002      	beq.n	8002ffe <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002ff8:	2301      	movs	r3, #1
 8002ffa:	73fb      	strb	r3, [r7, #15]
 8002ffc:	e001      	b.n	8003002 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002ffe:	2300      	movs	r3, #0
 8003000:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003002:	7bfb      	ldrb	r3, [r7, #15]
}
 8003004:	4618      	mov	r0, r3
 8003006:	3714      	adds	r7, #20
 8003008:	46bd      	mov	sp, r7
 800300a:	bc80      	pop	{r7}
 800300c:	4770      	bx	lr

0800300e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800300e:	b480      	push	{r7}
 8003010:	b083      	sub	sp, #12
 8003012:	af00      	add	r7, sp, #0
 8003014:	6078      	str	r0, [r7, #4]
 8003016:	460b      	mov	r3, r1
 8003018:	807b      	strh	r3, [r7, #2]
 800301a:	4613      	mov	r3, r2
 800301c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800301e:	787b      	ldrb	r3, [r7, #1]
 8003020:	2b00      	cmp	r3, #0
 8003022:	d003      	beq.n	800302c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003024:	887a      	ldrh	r2, [r7, #2]
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800302a:	e003      	b.n	8003034 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800302c:	887b      	ldrh	r3, [r7, #2]
 800302e:	041a      	lsls	r2, r3, #16
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	611a      	str	r2, [r3, #16]
}
 8003034:	bf00      	nop
 8003036:	370c      	adds	r7, #12
 8003038:	46bd      	mov	sp, r7
 800303a:	bc80      	pop	{r7}
 800303c:	4770      	bx	lr

0800303e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800303e:	b480      	push	{r7}
 8003040:	b085      	sub	sp, #20
 8003042:	af00      	add	r7, sp, #0
 8003044:	6078      	str	r0, [r7, #4]
 8003046:	460b      	mov	r3, r1
 8003048:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	68db      	ldr	r3, [r3, #12]
 800304e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003050:	887a      	ldrh	r2, [r7, #2]
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	4013      	ands	r3, r2
 8003056:	041a      	lsls	r2, r3, #16
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	43d9      	mvns	r1, r3
 800305c:	887b      	ldrh	r3, [r7, #2]
 800305e:	400b      	ands	r3, r1
 8003060:	431a      	orrs	r2, r3
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	611a      	str	r2, [r3, #16]
}
 8003066:	bf00      	nop
 8003068:	3714      	adds	r7, #20
 800306a:	46bd      	mov	sp, r7
 800306c:	bc80      	pop	{r7}
 800306e:	4770      	bx	lr

08003070 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	b086      	sub	sp, #24
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2b00      	cmp	r3, #0
 800307c:	d101      	bne.n	8003082 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800307e:	2301      	movs	r3, #1
 8003080:	e272      	b.n	8003568 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f003 0301 	and.w	r3, r3, #1
 800308a:	2b00      	cmp	r3, #0
 800308c:	f000 8087 	beq.w	800319e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003090:	4b92      	ldr	r3, [pc, #584]	; (80032dc <HAL_RCC_OscConfig+0x26c>)
 8003092:	685b      	ldr	r3, [r3, #4]
 8003094:	f003 030c 	and.w	r3, r3, #12
 8003098:	2b04      	cmp	r3, #4
 800309a:	d00c      	beq.n	80030b6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800309c:	4b8f      	ldr	r3, [pc, #572]	; (80032dc <HAL_RCC_OscConfig+0x26c>)
 800309e:	685b      	ldr	r3, [r3, #4]
 80030a0:	f003 030c 	and.w	r3, r3, #12
 80030a4:	2b08      	cmp	r3, #8
 80030a6:	d112      	bne.n	80030ce <HAL_RCC_OscConfig+0x5e>
 80030a8:	4b8c      	ldr	r3, [pc, #560]	; (80032dc <HAL_RCC_OscConfig+0x26c>)
 80030aa:	685b      	ldr	r3, [r3, #4]
 80030ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030b4:	d10b      	bne.n	80030ce <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030b6:	4b89      	ldr	r3, [pc, #548]	; (80032dc <HAL_RCC_OscConfig+0x26c>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d06c      	beq.n	800319c <HAL_RCC_OscConfig+0x12c>
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	685b      	ldr	r3, [r3, #4]
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d168      	bne.n	800319c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80030ca:	2301      	movs	r3, #1
 80030cc:	e24c      	b.n	8003568 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	685b      	ldr	r3, [r3, #4]
 80030d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030d6:	d106      	bne.n	80030e6 <HAL_RCC_OscConfig+0x76>
 80030d8:	4b80      	ldr	r3, [pc, #512]	; (80032dc <HAL_RCC_OscConfig+0x26c>)
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	4a7f      	ldr	r2, [pc, #508]	; (80032dc <HAL_RCC_OscConfig+0x26c>)
 80030de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030e2:	6013      	str	r3, [r2, #0]
 80030e4:	e02e      	b.n	8003144 <HAL_RCC_OscConfig+0xd4>
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	685b      	ldr	r3, [r3, #4]
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d10c      	bne.n	8003108 <HAL_RCC_OscConfig+0x98>
 80030ee:	4b7b      	ldr	r3, [pc, #492]	; (80032dc <HAL_RCC_OscConfig+0x26c>)
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	4a7a      	ldr	r2, [pc, #488]	; (80032dc <HAL_RCC_OscConfig+0x26c>)
 80030f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80030f8:	6013      	str	r3, [r2, #0]
 80030fa:	4b78      	ldr	r3, [pc, #480]	; (80032dc <HAL_RCC_OscConfig+0x26c>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	4a77      	ldr	r2, [pc, #476]	; (80032dc <HAL_RCC_OscConfig+0x26c>)
 8003100:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003104:	6013      	str	r3, [r2, #0]
 8003106:	e01d      	b.n	8003144 <HAL_RCC_OscConfig+0xd4>
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	685b      	ldr	r3, [r3, #4]
 800310c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003110:	d10c      	bne.n	800312c <HAL_RCC_OscConfig+0xbc>
 8003112:	4b72      	ldr	r3, [pc, #456]	; (80032dc <HAL_RCC_OscConfig+0x26c>)
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	4a71      	ldr	r2, [pc, #452]	; (80032dc <HAL_RCC_OscConfig+0x26c>)
 8003118:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800311c:	6013      	str	r3, [r2, #0]
 800311e:	4b6f      	ldr	r3, [pc, #444]	; (80032dc <HAL_RCC_OscConfig+0x26c>)
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	4a6e      	ldr	r2, [pc, #440]	; (80032dc <HAL_RCC_OscConfig+0x26c>)
 8003124:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003128:	6013      	str	r3, [r2, #0]
 800312a:	e00b      	b.n	8003144 <HAL_RCC_OscConfig+0xd4>
 800312c:	4b6b      	ldr	r3, [pc, #428]	; (80032dc <HAL_RCC_OscConfig+0x26c>)
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	4a6a      	ldr	r2, [pc, #424]	; (80032dc <HAL_RCC_OscConfig+0x26c>)
 8003132:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003136:	6013      	str	r3, [r2, #0]
 8003138:	4b68      	ldr	r3, [pc, #416]	; (80032dc <HAL_RCC_OscConfig+0x26c>)
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	4a67      	ldr	r2, [pc, #412]	; (80032dc <HAL_RCC_OscConfig+0x26c>)
 800313e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003142:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	685b      	ldr	r3, [r3, #4]
 8003148:	2b00      	cmp	r3, #0
 800314a:	d013      	beq.n	8003174 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800314c:	f7fe fef0 	bl	8001f30 <HAL_GetTick>
 8003150:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003152:	e008      	b.n	8003166 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003154:	f7fe feec 	bl	8001f30 <HAL_GetTick>
 8003158:	4602      	mov	r2, r0
 800315a:	693b      	ldr	r3, [r7, #16]
 800315c:	1ad3      	subs	r3, r2, r3
 800315e:	2b64      	cmp	r3, #100	; 0x64
 8003160:	d901      	bls.n	8003166 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003162:	2303      	movs	r3, #3
 8003164:	e200      	b.n	8003568 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003166:	4b5d      	ldr	r3, [pc, #372]	; (80032dc <HAL_RCC_OscConfig+0x26c>)
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800316e:	2b00      	cmp	r3, #0
 8003170:	d0f0      	beq.n	8003154 <HAL_RCC_OscConfig+0xe4>
 8003172:	e014      	b.n	800319e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003174:	f7fe fedc 	bl	8001f30 <HAL_GetTick>
 8003178:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800317a:	e008      	b.n	800318e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800317c:	f7fe fed8 	bl	8001f30 <HAL_GetTick>
 8003180:	4602      	mov	r2, r0
 8003182:	693b      	ldr	r3, [r7, #16]
 8003184:	1ad3      	subs	r3, r2, r3
 8003186:	2b64      	cmp	r3, #100	; 0x64
 8003188:	d901      	bls.n	800318e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800318a:	2303      	movs	r3, #3
 800318c:	e1ec      	b.n	8003568 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800318e:	4b53      	ldr	r3, [pc, #332]	; (80032dc <HAL_RCC_OscConfig+0x26c>)
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003196:	2b00      	cmp	r3, #0
 8003198:	d1f0      	bne.n	800317c <HAL_RCC_OscConfig+0x10c>
 800319a:	e000      	b.n	800319e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800319c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f003 0302 	and.w	r3, r3, #2
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d063      	beq.n	8003272 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80031aa:	4b4c      	ldr	r3, [pc, #304]	; (80032dc <HAL_RCC_OscConfig+0x26c>)
 80031ac:	685b      	ldr	r3, [r3, #4]
 80031ae:	f003 030c 	and.w	r3, r3, #12
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d00b      	beq.n	80031ce <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80031b6:	4b49      	ldr	r3, [pc, #292]	; (80032dc <HAL_RCC_OscConfig+0x26c>)
 80031b8:	685b      	ldr	r3, [r3, #4]
 80031ba:	f003 030c 	and.w	r3, r3, #12
 80031be:	2b08      	cmp	r3, #8
 80031c0:	d11c      	bne.n	80031fc <HAL_RCC_OscConfig+0x18c>
 80031c2:	4b46      	ldr	r3, [pc, #280]	; (80032dc <HAL_RCC_OscConfig+0x26c>)
 80031c4:	685b      	ldr	r3, [r3, #4]
 80031c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d116      	bne.n	80031fc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031ce:	4b43      	ldr	r3, [pc, #268]	; (80032dc <HAL_RCC_OscConfig+0x26c>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f003 0302 	and.w	r3, r3, #2
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d005      	beq.n	80031e6 <HAL_RCC_OscConfig+0x176>
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	691b      	ldr	r3, [r3, #16]
 80031de:	2b01      	cmp	r3, #1
 80031e0:	d001      	beq.n	80031e6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80031e2:	2301      	movs	r3, #1
 80031e4:	e1c0      	b.n	8003568 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031e6:	4b3d      	ldr	r3, [pc, #244]	; (80032dc <HAL_RCC_OscConfig+0x26c>)
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	695b      	ldr	r3, [r3, #20]
 80031f2:	00db      	lsls	r3, r3, #3
 80031f4:	4939      	ldr	r1, [pc, #228]	; (80032dc <HAL_RCC_OscConfig+0x26c>)
 80031f6:	4313      	orrs	r3, r2
 80031f8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031fa:	e03a      	b.n	8003272 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	691b      	ldr	r3, [r3, #16]
 8003200:	2b00      	cmp	r3, #0
 8003202:	d020      	beq.n	8003246 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003204:	4b36      	ldr	r3, [pc, #216]	; (80032e0 <HAL_RCC_OscConfig+0x270>)
 8003206:	2201      	movs	r2, #1
 8003208:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800320a:	f7fe fe91 	bl	8001f30 <HAL_GetTick>
 800320e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003210:	e008      	b.n	8003224 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003212:	f7fe fe8d 	bl	8001f30 <HAL_GetTick>
 8003216:	4602      	mov	r2, r0
 8003218:	693b      	ldr	r3, [r7, #16]
 800321a:	1ad3      	subs	r3, r2, r3
 800321c:	2b02      	cmp	r3, #2
 800321e:	d901      	bls.n	8003224 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003220:	2303      	movs	r3, #3
 8003222:	e1a1      	b.n	8003568 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003224:	4b2d      	ldr	r3, [pc, #180]	; (80032dc <HAL_RCC_OscConfig+0x26c>)
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f003 0302 	and.w	r3, r3, #2
 800322c:	2b00      	cmp	r3, #0
 800322e:	d0f0      	beq.n	8003212 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003230:	4b2a      	ldr	r3, [pc, #168]	; (80032dc <HAL_RCC_OscConfig+0x26c>)
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	695b      	ldr	r3, [r3, #20]
 800323c:	00db      	lsls	r3, r3, #3
 800323e:	4927      	ldr	r1, [pc, #156]	; (80032dc <HAL_RCC_OscConfig+0x26c>)
 8003240:	4313      	orrs	r3, r2
 8003242:	600b      	str	r3, [r1, #0]
 8003244:	e015      	b.n	8003272 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003246:	4b26      	ldr	r3, [pc, #152]	; (80032e0 <HAL_RCC_OscConfig+0x270>)
 8003248:	2200      	movs	r2, #0
 800324a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800324c:	f7fe fe70 	bl	8001f30 <HAL_GetTick>
 8003250:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003252:	e008      	b.n	8003266 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003254:	f7fe fe6c 	bl	8001f30 <HAL_GetTick>
 8003258:	4602      	mov	r2, r0
 800325a:	693b      	ldr	r3, [r7, #16]
 800325c:	1ad3      	subs	r3, r2, r3
 800325e:	2b02      	cmp	r3, #2
 8003260:	d901      	bls.n	8003266 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003262:	2303      	movs	r3, #3
 8003264:	e180      	b.n	8003568 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003266:	4b1d      	ldr	r3, [pc, #116]	; (80032dc <HAL_RCC_OscConfig+0x26c>)
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f003 0302 	and.w	r3, r3, #2
 800326e:	2b00      	cmp	r3, #0
 8003270:	d1f0      	bne.n	8003254 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f003 0308 	and.w	r3, r3, #8
 800327a:	2b00      	cmp	r3, #0
 800327c:	d03a      	beq.n	80032f4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	699b      	ldr	r3, [r3, #24]
 8003282:	2b00      	cmp	r3, #0
 8003284:	d019      	beq.n	80032ba <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003286:	4b17      	ldr	r3, [pc, #92]	; (80032e4 <HAL_RCC_OscConfig+0x274>)
 8003288:	2201      	movs	r2, #1
 800328a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800328c:	f7fe fe50 	bl	8001f30 <HAL_GetTick>
 8003290:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003292:	e008      	b.n	80032a6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003294:	f7fe fe4c 	bl	8001f30 <HAL_GetTick>
 8003298:	4602      	mov	r2, r0
 800329a:	693b      	ldr	r3, [r7, #16]
 800329c:	1ad3      	subs	r3, r2, r3
 800329e:	2b02      	cmp	r3, #2
 80032a0:	d901      	bls.n	80032a6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80032a2:	2303      	movs	r3, #3
 80032a4:	e160      	b.n	8003568 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032a6:	4b0d      	ldr	r3, [pc, #52]	; (80032dc <HAL_RCC_OscConfig+0x26c>)
 80032a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032aa:	f003 0302 	and.w	r3, r3, #2
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d0f0      	beq.n	8003294 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80032b2:	2001      	movs	r0, #1
 80032b4:	f000 fa9c 	bl	80037f0 <RCC_Delay>
 80032b8:	e01c      	b.n	80032f4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80032ba:	4b0a      	ldr	r3, [pc, #40]	; (80032e4 <HAL_RCC_OscConfig+0x274>)
 80032bc:	2200      	movs	r2, #0
 80032be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032c0:	f7fe fe36 	bl	8001f30 <HAL_GetTick>
 80032c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032c6:	e00f      	b.n	80032e8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80032c8:	f7fe fe32 	bl	8001f30 <HAL_GetTick>
 80032cc:	4602      	mov	r2, r0
 80032ce:	693b      	ldr	r3, [r7, #16]
 80032d0:	1ad3      	subs	r3, r2, r3
 80032d2:	2b02      	cmp	r3, #2
 80032d4:	d908      	bls.n	80032e8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80032d6:	2303      	movs	r3, #3
 80032d8:	e146      	b.n	8003568 <HAL_RCC_OscConfig+0x4f8>
 80032da:	bf00      	nop
 80032dc:	40021000 	.word	0x40021000
 80032e0:	42420000 	.word	0x42420000
 80032e4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032e8:	4b92      	ldr	r3, [pc, #584]	; (8003534 <HAL_RCC_OscConfig+0x4c4>)
 80032ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ec:	f003 0302 	and.w	r3, r3, #2
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d1e9      	bne.n	80032c8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f003 0304 	and.w	r3, r3, #4
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	f000 80a6 	beq.w	800344e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003302:	2300      	movs	r3, #0
 8003304:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003306:	4b8b      	ldr	r3, [pc, #556]	; (8003534 <HAL_RCC_OscConfig+0x4c4>)
 8003308:	69db      	ldr	r3, [r3, #28]
 800330a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800330e:	2b00      	cmp	r3, #0
 8003310:	d10d      	bne.n	800332e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003312:	4b88      	ldr	r3, [pc, #544]	; (8003534 <HAL_RCC_OscConfig+0x4c4>)
 8003314:	69db      	ldr	r3, [r3, #28]
 8003316:	4a87      	ldr	r2, [pc, #540]	; (8003534 <HAL_RCC_OscConfig+0x4c4>)
 8003318:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800331c:	61d3      	str	r3, [r2, #28]
 800331e:	4b85      	ldr	r3, [pc, #532]	; (8003534 <HAL_RCC_OscConfig+0x4c4>)
 8003320:	69db      	ldr	r3, [r3, #28]
 8003322:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003326:	60bb      	str	r3, [r7, #8]
 8003328:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800332a:	2301      	movs	r3, #1
 800332c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800332e:	4b82      	ldr	r3, [pc, #520]	; (8003538 <HAL_RCC_OscConfig+0x4c8>)
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003336:	2b00      	cmp	r3, #0
 8003338:	d118      	bne.n	800336c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800333a:	4b7f      	ldr	r3, [pc, #508]	; (8003538 <HAL_RCC_OscConfig+0x4c8>)
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	4a7e      	ldr	r2, [pc, #504]	; (8003538 <HAL_RCC_OscConfig+0x4c8>)
 8003340:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003344:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003346:	f7fe fdf3 	bl	8001f30 <HAL_GetTick>
 800334a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800334c:	e008      	b.n	8003360 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800334e:	f7fe fdef 	bl	8001f30 <HAL_GetTick>
 8003352:	4602      	mov	r2, r0
 8003354:	693b      	ldr	r3, [r7, #16]
 8003356:	1ad3      	subs	r3, r2, r3
 8003358:	2b64      	cmp	r3, #100	; 0x64
 800335a:	d901      	bls.n	8003360 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800335c:	2303      	movs	r3, #3
 800335e:	e103      	b.n	8003568 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003360:	4b75      	ldr	r3, [pc, #468]	; (8003538 <HAL_RCC_OscConfig+0x4c8>)
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003368:	2b00      	cmp	r3, #0
 800336a:	d0f0      	beq.n	800334e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	68db      	ldr	r3, [r3, #12]
 8003370:	2b01      	cmp	r3, #1
 8003372:	d106      	bne.n	8003382 <HAL_RCC_OscConfig+0x312>
 8003374:	4b6f      	ldr	r3, [pc, #444]	; (8003534 <HAL_RCC_OscConfig+0x4c4>)
 8003376:	6a1b      	ldr	r3, [r3, #32]
 8003378:	4a6e      	ldr	r2, [pc, #440]	; (8003534 <HAL_RCC_OscConfig+0x4c4>)
 800337a:	f043 0301 	orr.w	r3, r3, #1
 800337e:	6213      	str	r3, [r2, #32]
 8003380:	e02d      	b.n	80033de <HAL_RCC_OscConfig+0x36e>
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	68db      	ldr	r3, [r3, #12]
 8003386:	2b00      	cmp	r3, #0
 8003388:	d10c      	bne.n	80033a4 <HAL_RCC_OscConfig+0x334>
 800338a:	4b6a      	ldr	r3, [pc, #424]	; (8003534 <HAL_RCC_OscConfig+0x4c4>)
 800338c:	6a1b      	ldr	r3, [r3, #32]
 800338e:	4a69      	ldr	r2, [pc, #420]	; (8003534 <HAL_RCC_OscConfig+0x4c4>)
 8003390:	f023 0301 	bic.w	r3, r3, #1
 8003394:	6213      	str	r3, [r2, #32]
 8003396:	4b67      	ldr	r3, [pc, #412]	; (8003534 <HAL_RCC_OscConfig+0x4c4>)
 8003398:	6a1b      	ldr	r3, [r3, #32]
 800339a:	4a66      	ldr	r2, [pc, #408]	; (8003534 <HAL_RCC_OscConfig+0x4c4>)
 800339c:	f023 0304 	bic.w	r3, r3, #4
 80033a0:	6213      	str	r3, [r2, #32]
 80033a2:	e01c      	b.n	80033de <HAL_RCC_OscConfig+0x36e>
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	68db      	ldr	r3, [r3, #12]
 80033a8:	2b05      	cmp	r3, #5
 80033aa:	d10c      	bne.n	80033c6 <HAL_RCC_OscConfig+0x356>
 80033ac:	4b61      	ldr	r3, [pc, #388]	; (8003534 <HAL_RCC_OscConfig+0x4c4>)
 80033ae:	6a1b      	ldr	r3, [r3, #32]
 80033b0:	4a60      	ldr	r2, [pc, #384]	; (8003534 <HAL_RCC_OscConfig+0x4c4>)
 80033b2:	f043 0304 	orr.w	r3, r3, #4
 80033b6:	6213      	str	r3, [r2, #32]
 80033b8:	4b5e      	ldr	r3, [pc, #376]	; (8003534 <HAL_RCC_OscConfig+0x4c4>)
 80033ba:	6a1b      	ldr	r3, [r3, #32]
 80033bc:	4a5d      	ldr	r2, [pc, #372]	; (8003534 <HAL_RCC_OscConfig+0x4c4>)
 80033be:	f043 0301 	orr.w	r3, r3, #1
 80033c2:	6213      	str	r3, [r2, #32]
 80033c4:	e00b      	b.n	80033de <HAL_RCC_OscConfig+0x36e>
 80033c6:	4b5b      	ldr	r3, [pc, #364]	; (8003534 <HAL_RCC_OscConfig+0x4c4>)
 80033c8:	6a1b      	ldr	r3, [r3, #32]
 80033ca:	4a5a      	ldr	r2, [pc, #360]	; (8003534 <HAL_RCC_OscConfig+0x4c4>)
 80033cc:	f023 0301 	bic.w	r3, r3, #1
 80033d0:	6213      	str	r3, [r2, #32]
 80033d2:	4b58      	ldr	r3, [pc, #352]	; (8003534 <HAL_RCC_OscConfig+0x4c4>)
 80033d4:	6a1b      	ldr	r3, [r3, #32]
 80033d6:	4a57      	ldr	r2, [pc, #348]	; (8003534 <HAL_RCC_OscConfig+0x4c4>)
 80033d8:	f023 0304 	bic.w	r3, r3, #4
 80033dc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	68db      	ldr	r3, [r3, #12]
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d015      	beq.n	8003412 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033e6:	f7fe fda3 	bl	8001f30 <HAL_GetTick>
 80033ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033ec:	e00a      	b.n	8003404 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033ee:	f7fe fd9f 	bl	8001f30 <HAL_GetTick>
 80033f2:	4602      	mov	r2, r0
 80033f4:	693b      	ldr	r3, [r7, #16]
 80033f6:	1ad3      	subs	r3, r2, r3
 80033f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80033fc:	4293      	cmp	r3, r2
 80033fe:	d901      	bls.n	8003404 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003400:	2303      	movs	r3, #3
 8003402:	e0b1      	b.n	8003568 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003404:	4b4b      	ldr	r3, [pc, #300]	; (8003534 <HAL_RCC_OscConfig+0x4c4>)
 8003406:	6a1b      	ldr	r3, [r3, #32]
 8003408:	f003 0302 	and.w	r3, r3, #2
 800340c:	2b00      	cmp	r3, #0
 800340e:	d0ee      	beq.n	80033ee <HAL_RCC_OscConfig+0x37e>
 8003410:	e014      	b.n	800343c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003412:	f7fe fd8d 	bl	8001f30 <HAL_GetTick>
 8003416:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003418:	e00a      	b.n	8003430 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800341a:	f7fe fd89 	bl	8001f30 <HAL_GetTick>
 800341e:	4602      	mov	r2, r0
 8003420:	693b      	ldr	r3, [r7, #16]
 8003422:	1ad3      	subs	r3, r2, r3
 8003424:	f241 3288 	movw	r2, #5000	; 0x1388
 8003428:	4293      	cmp	r3, r2
 800342a:	d901      	bls.n	8003430 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800342c:	2303      	movs	r3, #3
 800342e:	e09b      	b.n	8003568 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003430:	4b40      	ldr	r3, [pc, #256]	; (8003534 <HAL_RCC_OscConfig+0x4c4>)
 8003432:	6a1b      	ldr	r3, [r3, #32]
 8003434:	f003 0302 	and.w	r3, r3, #2
 8003438:	2b00      	cmp	r3, #0
 800343a:	d1ee      	bne.n	800341a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800343c:	7dfb      	ldrb	r3, [r7, #23]
 800343e:	2b01      	cmp	r3, #1
 8003440:	d105      	bne.n	800344e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003442:	4b3c      	ldr	r3, [pc, #240]	; (8003534 <HAL_RCC_OscConfig+0x4c4>)
 8003444:	69db      	ldr	r3, [r3, #28]
 8003446:	4a3b      	ldr	r2, [pc, #236]	; (8003534 <HAL_RCC_OscConfig+0x4c4>)
 8003448:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800344c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	69db      	ldr	r3, [r3, #28]
 8003452:	2b00      	cmp	r3, #0
 8003454:	f000 8087 	beq.w	8003566 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003458:	4b36      	ldr	r3, [pc, #216]	; (8003534 <HAL_RCC_OscConfig+0x4c4>)
 800345a:	685b      	ldr	r3, [r3, #4]
 800345c:	f003 030c 	and.w	r3, r3, #12
 8003460:	2b08      	cmp	r3, #8
 8003462:	d061      	beq.n	8003528 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	69db      	ldr	r3, [r3, #28]
 8003468:	2b02      	cmp	r3, #2
 800346a:	d146      	bne.n	80034fa <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800346c:	4b33      	ldr	r3, [pc, #204]	; (800353c <HAL_RCC_OscConfig+0x4cc>)
 800346e:	2200      	movs	r2, #0
 8003470:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003472:	f7fe fd5d 	bl	8001f30 <HAL_GetTick>
 8003476:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003478:	e008      	b.n	800348c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800347a:	f7fe fd59 	bl	8001f30 <HAL_GetTick>
 800347e:	4602      	mov	r2, r0
 8003480:	693b      	ldr	r3, [r7, #16]
 8003482:	1ad3      	subs	r3, r2, r3
 8003484:	2b02      	cmp	r3, #2
 8003486:	d901      	bls.n	800348c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003488:	2303      	movs	r3, #3
 800348a:	e06d      	b.n	8003568 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800348c:	4b29      	ldr	r3, [pc, #164]	; (8003534 <HAL_RCC_OscConfig+0x4c4>)
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003494:	2b00      	cmp	r3, #0
 8003496:	d1f0      	bne.n	800347a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6a1b      	ldr	r3, [r3, #32]
 800349c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034a0:	d108      	bne.n	80034b4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80034a2:	4b24      	ldr	r3, [pc, #144]	; (8003534 <HAL_RCC_OscConfig+0x4c4>)
 80034a4:	685b      	ldr	r3, [r3, #4]
 80034a6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	689b      	ldr	r3, [r3, #8]
 80034ae:	4921      	ldr	r1, [pc, #132]	; (8003534 <HAL_RCC_OscConfig+0x4c4>)
 80034b0:	4313      	orrs	r3, r2
 80034b2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80034b4:	4b1f      	ldr	r3, [pc, #124]	; (8003534 <HAL_RCC_OscConfig+0x4c4>)
 80034b6:	685b      	ldr	r3, [r3, #4]
 80034b8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6a19      	ldr	r1, [r3, #32]
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034c4:	430b      	orrs	r3, r1
 80034c6:	491b      	ldr	r1, [pc, #108]	; (8003534 <HAL_RCC_OscConfig+0x4c4>)
 80034c8:	4313      	orrs	r3, r2
 80034ca:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80034cc:	4b1b      	ldr	r3, [pc, #108]	; (800353c <HAL_RCC_OscConfig+0x4cc>)
 80034ce:	2201      	movs	r2, #1
 80034d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034d2:	f7fe fd2d 	bl	8001f30 <HAL_GetTick>
 80034d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80034d8:	e008      	b.n	80034ec <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034da:	f7fe fd29 	bl	8001f30 <HAL_GetTick>
 80034de:	4602      	mov	r2, r0
 80034e0:	693b      	ldr	r3, [r7, #16]
 80034e2:	1ad3      	subs	r3, r2, r3
 80034e4:	2b02      	cmp	r3, #2
 80034e6:	d901      	bls.n	80034ec <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80034e8:	2303      	movs	r3, #3
 80034ea:	e03d      	b.n	8003568 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80034ec:	4b11      	ldr	r3, [pc, #68]	; (8003534 <HAL_RCC_OscConfig+0x4c4>)
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d0f0      	beq.n	80034da <HAL_RCC_OscConfig+0x46a>
 80034f8:	e035      	b.n	8003566 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034fa:	4b10      	ldr	r3, [pc, #64]	; (800353c <HAL_RCC_OscConfig+0x4cc>)
 80034fc:	2200      	movs	r2, #0
 80034fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003500:	f7fe fd16 	bl	8001f30 <HAL_GetTick>
 8003504:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003506:	e008      	b.n	800351a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003508:	f7fe fd12 	bl	8001f30 <HAL_GetTick>
 800350c:	4602      	mov	r2, r0
 800350e:	693b      	ldr	r3, [r7, #16]
 8003510:	1ad3      	subs	r3, r2, r3
 8003512:	2b02      	cmp	r3, #2
 8003514:	d901      	bls.n	800351a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003516:	2303      	movs	r3, #3
 8003518:	e026      	b.n	8003568 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800351a:	4b06      	ldr	r3, [pc, #24]	; (8003534 <HAL_RCC_OscConfig+0x4c4>)
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003522:	2b00      	cmp	r3, #0
 8003524:	d1f0      	bne.n	8003508 <HAL_RCC_OscConfig+0x498>
 8003526:	e01e      	b.n	8003566 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	69db      	ldr	r3, [r3, #28]
 800352c:	2b01      	cmp	r3, #1
 800352e:	d107      	bne.n	8003540 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003530:	2301      	movs	r3, #1
 8003532:	e019      	b.n	8003568 <HAL_RCC_OscConfig+0x4f8>
 8003534:	40021000 	.word	0x40021000
 8003538:	40007000 	.word	0x40007000
 800353c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003540:	4b0b      	ldr	r3, [pc, #44]	; (8003570 <HAL_RCC_OscConfig+0x500>)
 8003542:	685b      	ldr	r3, [r3, #4]
 8003544:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	6a1b      	ldr	r3, [r3, #32]
 8003550:	429a      	cmp	r2, r3
 8003552:	d106      	bne.n	8003562 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800355e:	429a      	cmp	r2, r3
 8003560:	d001      	beq.n	8003566 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003562:	2301      	movs	r3, #1
 8003564:	e000      	b.n	8003568 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003566:	2300      	movs	r3, #0
}
 8003568:	4618      	mov	r0, r3
 800356a:	3718      	adds	r7, #24
 800356c:	46bd      	mov	sp, r7
 800356e:	bd80      	pop	{r7, pc}
 8003570:	40021000 	.word	0x40021000

08003574 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003574:	b580      	push	{r7, lr}
 8003576:	b084      	sub	sp, #16
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
 800357c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	2b00      	cmp	r3, #0
 8003582:	d101      	bne.n	8003588 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003584:	2301      	movs	r3, #1
 8003586:	e0d0      	b.n	800372a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003588:	4b6a      	ldr	r3, [pc, #424]	; (8003734 <HAL_RCC_ClockConfig+0x1c0>)
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f003 0307 	and.w	r3, r3, #7
 8003590:	683a      	ldr	r2, [r7, #0]
 8003592:	429a      	cmp	r2, r3
 8003594:	d910      	bls.n	80035b8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003596:	4b67      	ldr	r3, [pc, #412]	; (8003734 <HAL_RCC_ClockConfig+0x1c0>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f023 0207 	bic.w	r2, r3, #7
 800359e:	4965      	ldr	r1, [pc, #404]	; (8003734 <HAL_RCC_ClockConfig+0x1c0>)
 80035a0:	683b      	ldr	r3, [r7, #0]
 80035a2:	4313      	orrs	r3, r2
 80035a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80035a6:	4b63      	ldr	r3, [pc, #396]	; (8003734 <HAL_RCC_ClockConfig+0x1c0>)
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f003 0307 	and.w	r3, r3, #7
 80035ae:	683a      	ldr	r2, [r7, #0]
 80035b0:	429a      	cmp	r2, r3
 80035b2:	d001      	beq.n	80035b8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80035b4:	2301      	movs	r3, #1
 80035b6:	e0b8      	b.n	800372a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f003 0302 	and.w	r3, r3, #2
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d020      	beq.n	8003606 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f003 0304 	and.w	r3, r3, #4
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d005      	beq.n	80035dc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80035d0:	4b59      	ldr	r3, [pc, #356]	; (8003738 <HAL_RCC_ClockConfig+0x1c4>)
 80035d2:	685b      	ldr	r3, [r3, #4]
 80035d4:	4a58      	ldr	r2, [pc, #352]	; (8003738 <HAL_RCC_ClockConfig+0x1c4>)
 80035d6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80035da:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f003 0308 	and.w	r3, r3, #8
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d005      	beq.n	80035f4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80035e8:	4b53      	ldr	r3, [pc, #332]	; (8003738 <HAL_RCC_ClockConfig+0x1c4>)
 80035ea:	685b      	ldr	r3, [r3, #4]
 80035ec:	4a52      	ldr	r2, [pc, #328]	; (8003738 <HAL_RCC_ClockConfig+0x1c4>)
 80035ee:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80035f2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80035f4:	4b50      	ldr	r3, [pc, #320]	; (8003738 <HAL_RCC_ClockConfig+0x1c4>)
 80035f6:	685b      	ldr	r3, [r3, #4]
 80035f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	689b      	ldr	r3, [r3, #8]
 8003600:	494d      	ldr	r1, [pc, #308]	; (8003738 <HAL_RCC_ClockConfig+0x1c4>)
 8003602:	4313      	orrs	r3, r2
 8003604:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f003 0301 	and.w	r3, r3, #1
 800360e:	2b00      	cmp	r3, #0
 8003610:	d040      	beq.n	8003694 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	685b      	ldr	r3, [r3, #4]
 8003616:	2b01      	cmp	r3, #1
 8003618:	d107      	bne.n	800362a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800361a:	4b47      	ldr	r3, [pc, #284]	; (8003738 <HAL_RCC_ClockConfig+0x1c4>)
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003622:	2b00      	cmp	r3, #0
 8003624:	d115      	bne.n	8003652 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003626:	2301      	movs	r3, #1
 8003628:	e07f      	b.n	800372a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	685b      	ldr	r3, [r3, #4]
 800362e:	2b02      	cmp	r3, #2
 8003630:	d107      	bne.n	8003642 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003632:	4b41      	ldr	r3, [pc, #260]	; (8003738 <HAL_RCC_ClockConfig+0x1c4>)
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800363a:	2b00      	cmp	r3, #0
 800363c:	d109      	bne.n	8003652 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800363e:	2301      	movs	r3, #1
 8003640:	e073      	b.n	800372a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003642:	4b3d      	ldr	r3, [pc, #244]	; (8003738 <HAL_RCC_ClockConfig+0x1c4>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f003 0302 	and.w	r3, r3, #2
 800364a:	2b00      	cmp	r3, #0
 800364c:	d101      	bne.n	8003652 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800364e:	2301      	movs	r3, #1
 8003650:	e06b      	b.n	800372a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003652:	4b39      	ldr	r3, [pc, #228]	; (8003738 <HAL_RCC_ClockConfig+0x1c4>)
 8003654:	685b      	ldr	r3, [r3, #4]
 8003656:	f023 0203 	bic.w	r2, r3, #3
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	685b      	ldr	r3, [r3, #4]
 800365e:	4936      	ldr	r1, [pc, #216]	; (8003738 <HAL_RCC_ClockConfig+0x1c4>)
 8003660:	4313      	orrs	r3, r2
 8003662:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003664:	f7fe fc64 	bl	8001f30 <HAL_GetTick>
 8003668:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800366a:	e00a      	b.n	8003682 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800366c:	f7fe fc60 	bl	8001f30 <HAL_GetTick>
 8003670:	4602      	mov	r2, r0
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	1ad3      	subs	r3, r2, r3
 8003676:	f241 3288 	movw	r2, #5000	; 0x1388
 800367a:	4293      	cmp	r3, r2
 800367c:	d901      	bls.n	8003682 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800367e:	2303      	movs	r3, #3
 8003680:	e053      	b.n	800372a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003682:	4b2d      	ldr	r3, [pc, #180]	; (8003738 <HAL_RCC_ClockConfig+0x1c4>)
 8003684:	685b      	ldr	r3, [r3, #4]
 8003686:	f003 020c 	and.w	r2, r3, #12
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	685b      	ldr	r3, [r3, #4]
 800368e:	009b      	lsls	r3, r3, #2
 8003690:	429a      	cmp	r2, r3
 8003692:	d1eb      	bne.n	800366c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003694:	4b27      	ldr	r3, [pc, #156]	; (8003734 <HAL_RCC_ClockConfig+0x1c0>)
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f003 0307 	and.w	r3, r3, #7
 800369c:	683a      	ldr	r2, [r7, #0]
 800369e:	429a      	cmp	r2, r3
 80036a0:	d210      	bcs.n	80036c4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036a2:	4b24      	ldr	r3, [pc, #144]	; (8003734 <HAL_RCC_ClockConfig+0x1c0>)
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f023 0207 	bic.w	r2, r3, #7
 80036aa:	4922      	ldr	r1, [pc, #136]	; (8003734 <HAL_RCC_ClockConfig+0x1c0>)
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	4313      	orrs	r3, r2
 80036b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80036b2:	4b20      	ldr	r3, [pc, #128]	; (8003734 <HAL_RCC_ClockConfig+0x1c0>)
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f003 0307 	and.w	r3, r3, #7
 80036ba:	683a      	ldr	r2, [r7, #0]
 80036bc:	429a      	cmp	r2, r3
 80036be:	d001      	beq.n	80036c4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80036c0:	2301      	movs	r3, #1
 80036c2:	e032      	b.n	800372a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f003 0304 	and.w	r3, r3, #4
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d008      	beq.n	80036e2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80036d0:	4b19      	ldr	r3, [pc, #100]	; (8003738 <HAL_RCC_ClockConfig+0x1c4>)
 80036d2:	685b      	ldr	r3, [r3, #4]
 80036d4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	68db      	ldr	r3, [r3, #12]
 80036dc:	4916      	ldr	r1, [pc, #88]	; (8003738 <HAL_RCC_ClockConfig+0x1c4>)
 80036de:	4313      	orrs	r3, r2
 80036e0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f003 0308 	and.w	r3, r3, #8
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d009      	beq.n	8003702 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80036ee:	4b12      	ldr	r3, [pc, #72]	; (8003738 <HAL_RCC_ClockConfig+0x1c4>)
 80036f0:	685b      	ldr	r3, [r3, #4]
 80036f2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	691b      	ldr	r3, [r3, #16]
 80036fa:	00db      	lsls	r3, r3, #3
 80036fc:	490e      	ldr	r1, [pc, #56]	; (8003738 <HAL_RCC_ClockConfig+0x1c4>)
 80036fe:	4313      	orrs	r3, r2
 8003700:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003702:	f000 f821 	bl	8003748 <HAL_RCC_GetSysClockFreq>
 8003706:	4602      	mov	r2, r0
 8003708:	4b0b      	ldr	r3, [pc, #44]	; (8003738 <HAL_RCC_ClockConfig+0x1c4>)
 800370a:	685b      	ldr	r3, [r3, #4]
 800370c:	091b      	lsrs	r3, r3, #4
 800370e:	f003 030f 	and.w	r3, r3, #15
 8003712:	490a      	ldr	r1, [pc, #40]	; (800373c <HAL_RCC_ClockConfig+0x1c8>)
 8003714:	5ccb      	ldrb	r3, [r1, r3]
 8003716:	fa22 f303 	lsr.w	r3, r2, r3
 800371a:	4a09      	ldr	r2, [pc, #36]	; (8003740 <HAL_RCC_ClockConfig+0x1cc>)
 800371c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800371e:	4b09      	ldr	r3, [pc, #36]	; (8003744 <HAL_RCC_ClockConfig+0x1d0>)
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	4618      	mov	r0, r3
 8003724:	f7fe fbc2 	bl	8001eac <HAL_InitTick>

  return HAL_OK;
 8003728:	2300      	movs	r3, #0
}
 800372a:	4618      	mov	r0, r3
 800372c:	3710      	adds	r7, #16
 800372e:	46bd      	mov	sp, r7
 8003730:	bd80      	pop	{r7, pc}
 8003732:	bf00      	nop
 8003734:	40022000 	.word	0x40022000
 8003738:	40021000 	.word	0x40021000
 800373c:	08004ec8 	.word	0x08004ec8
 8003740:	20000000 	.word	0x20000000
 8003744:	20000004 	.word	0x20000004

08003748 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003748:	b480      	push	{r7}
 800374a:	b087      	sub	sp, #28
 800374c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800374e:	2300      	movs	r3, #0
 8003750:	60fb      	str	r3, [r7, #12]
 8003752:	2300      	movs	r3, #0
 8003754:	60bb      	str	r3, [r7, #8]
 8003756:	2300      	movs	r3, #0
 8003758:	617b      	str	r3, [r7, #20]
 800375a:	2300      	movs	r3, #0
 800375c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800375e:	2300      	movs	r3, #0
 8003760:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003762:	4b1e      	ldr	r3, [pc, #120]	; (80037dc <HAL_RCC_GetSysClockFreq+0x94>)
 8003764:	685b      	ldr	r3, [r3, #4]
 8003766:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	f003 030c 	and.w	r3, r3, #12
 800376e:	2b04      	cmp	r3, #4
 8003770:	d002      	beq.n	8003778 <HAL_RCC_GetSysClockFreq+0x30>
 8003772:	2b08      	cmp	r3, #8
 8003774:	d003      	beq.n	800377e <HAL_RCC_GetSysClockFreq+0x36>
 8003776:	e027      	b.n	80037c8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003778:	4b19      	ldr	r3, [pc, #100]	; (80037e0 <HAL_RCC_GetSysClockFreq+0x98>)
 800377a:	613b      	str	r3, [r7, #16]
      break;
 800377c:	e027      	b.n	80037ce <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	0c9b      	lsrs	r3, r3, #18
 8003782:	f003 030f 	and.w	r3, r3, #15
 8003786:	4a17      	ldr	r2, [pc, #92]	; (80037e4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003788:	5cd3      	ldrb	r3, [r2, r3]
 800378a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003792:	2b00      	cmp	r3, #0
 8003794:	d010      	beq.n	80037b8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003796:	4b11      	ldr	r3, [pc, #68]	; (80037dc <HAL_RCC_GetSysClockFreq+0x94>)
 8003798:	685b      	ldr	r3, [r3, #4]
 800379a:	0c5b      	lsrs	r3, r3, #17
 800379c:	f003 0301 	and.w	r3, r3, #1
 80037a0:	4a11      	ldr	r2, [pc, #68]	; (80037e8 <HAL_RCC_GetSysClockFreq+0xa0>)
 80037a2:	5cd3      	ldrb	r3, [r2, r3]
 80037a4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	4a0d      	ldr	r2, [pc, #52]	; (80037e0 <HAL_RCC_GetSysClockFreq+0x98>)
 80037aa:	fb03 f202 	mul.w	r2, r3, r2
 80037ae:	68bb      	ldr	r3, [r7, #8]
 80037b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80037b4:	617b      	str	r3, [r7, #20]
 80037b6:	e004      	b.n	80037c2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	4a0c      	ldr	r2, [pc, #48]	; (80037ec <HAL_RCC_GetSysClockFreq+0xa4>)
 80037bc:	fb02 f303 	mul.w	r3, r2, r3
 80037c0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80037c2:	697b      	ldr	r3, [r7, #20]
 80037c4:	613b      	str	r3, [r7, #16]
      break;
 80037c6:	e002      	b.n	80037ce <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80037c8:	4b05      	ldr	r3, [pc, #20]	; (80037e0 <HAL_RCC_GetSysClockFreq+0x98>)
 80037ca:	613b      	str	r3, [r7, #16]
      break;
 80037cc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80037ce:	693b      	ldr	r3, [r7, #16]
}
 80037d0:	4618      	mov	r0, r3
 80037d2:	371c      	adds	r7, #28
 80037d4:	46bd      	mov	sp, r7
 80037d6:	bc80      	pop	{r7}
 80037d8:	4770      	bx	lr
 80037da:	bf00      	nop
 80037dc:	40021000 	.word	0x40021000
 80037e0:	007a1200 	.word	0x007a1200
 80037e4:	08004ed8 	.word	0x08004ed8
 80037e8:	08004ee8 	.word	0x08004ee8
 80037ec:	003d0900 	.word	0x003d0900

080037f0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80037f0:	b480      	push	{r7}
 80037f2:	b085      	sub	sp, #20
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80037f8:	4b0a      	ldr	r3, [pc, #40]	; (8003824 <RCC_Delay+0x34>)
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	4a0a      	ldr	r2, [pc, #40]	; (8003828 <RCC_Delay+0x38>)
 80037fe:	fba2 2303 	umull	r2, r3, r2, r3
 8003802:	0a5b      	lsrs	r3, r3, #9
 8003804:	687a      	ldr	r2, [r7, #4]
 8003806:	fb02 f303 	mul.w	r3, r2, r3
 800380a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800380c:	bf00      	nop
  }
  while (Delay --);
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	1e5a      	subs	r2, r3, #1
 8003812:	60fa      	str	r2, [r7, #12]
 8003814:	2b00      	cmp	r3, #0
 8003816:	d1f9      	bne.n	800380c <RCC_Delay+0x1c>
}
 8003818:	bf00      	nop
 800381a:	bf00      	nop
 800381c:	3714      	adds	r7, #20
 800381e:	46bd      	mov	sp, r7
 8003820:	bc80      	pop	{r7}
 8003822:	4770      	bx	lr
 8003824:	20000000 	.word	0x20000000
 8003828:	10624dd3 	.word	0x10624dd3

0800382c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800382c:	b580      	push	{r7, lr}
 800382e:	b082      	sub	sp, #8
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2b00      	cmp	r3, #0
 8003838:	d101      	bne.n	800383e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800383a:	2301      	movs	r3, #1
 800383c:	e041      	b.n	80038c2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003844:	b2db      	uxtb	r3, r3
 8003846:	2b00      	cmp	r3, #0
 8003848:	d106      	bne.n	8003858 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	2200      	movs	r2, #0
 800384e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003852:	6878      	ldr	r0, [r7, #4]
 8003854:	f7fe f97a 	bl	8001b4c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2202      	movs	r2, #2
 800385c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681a      	ldr	r2, [r3, #0]
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	3304      	adds	r3, #4
 8003868:	4619      	mov	r1, r3
 800386a:	4610      	mov	r0, r2
 800386c:	f000 fefa 	bl	8004664 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2201      	movs	r2, #1
 8003874:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2201      	movs	r2, #1
 800387c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2201      	movs	r2, #1
 8003884:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2201      	movs	r2, #1
 800388c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2201      	movs	r2, #1
 8003894:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2201      	movs	r2, #1
 800389c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2201      	movs	r2, #1
 80038a4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2201      	movs	r2, #1
 80038ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2201      	movs	r2, #1
 80038b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2201      	movs	r2, #1
 80038bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80038c0:	2300      	movs	r3, #0
}
 80038c2:	4618      	mov	r0, r3
 80038c4:	3708      	adds	r7, #8
 80038c6:	46bd      	mov	sp, r7
 80038c8:	bd80      	pop	{r7, pc}
	...

080038cc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80038cc:	b480      	push	{r7}
 80038ce:	b085      	sub	sp, #20
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038da:	b2db      	uxtb	r3, r3
 80038dc:	2b01      	cmp	r3, #1
 80038de:	d001      	beq.n	80038e4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80038e0:	2301      	movs	r3, #1
 80038e2:	e044      	b.n	800396e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2202      	movs	r2, #2
 80038e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	68da      	ldr	r2, [r3, #12]
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f042 0201 	orr.w	r2, r2, #1
 80038fa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	4a1d      	ldr	r2, [pc, #116]	; (8003978 <HAL_TIM_Base_Start_IT+0xac>)
 8003902:	4293      	cmp	r3, r2
 8003904:	d018      	beq.n	8003938 <HAL_TIM_Base_Start_IT+0x6c>
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	4a1c      	ldr	r2, [pc, #112]	; (800397c <HAL_TIM_Base_Start_IT+0xb0>)
 800390c:	4293      	cmp	r3, r2
 800390e:	d013      	beq.n	8003938 <HAL_TIM_Base_Start_IT+0x6c>
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003918:	d00e      	beq.n	8003938 <HAL_TIM_Base_Start_IT+0x6c>
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	4a18      	ldr	r2, [pc, #96]	; (8003980 <HAL_TIM_Base_Start_IT+0xb4>)
 8003920:	4293      	cmp	r3, r2
 8003922:	d009      	beq.n	8003938 <HAL_TIM_Base_Start_IT+0x6c>
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	4a16      	ldr	r2, [pc, #88]	; (8003984 <HAL_TIM_Base_Start_IT+0xb8>)
 800392a:	4293      	cmp	r3, r2
 800392c:	d004      	beq.n	8003938 <HAL_TIM_Base_Start_IT+0x6c>
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	4a15      	ldr	r2, [pc, #84]	; (8003988 <HAL_TIM_Base_Start_IT+0xbc>)
 8003934:	4293      	cmp	r3, r2
 8003936:	d111      	bne.n	800395c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	689b      	ldr	r3, [r3, #8]
 800393e:	f003 0307 	and.w	r3, r3, #7
 8003942:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	2b06      	cmp	r3, #6
 8003948:	d010      	beq.n	800396c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	681a      	ldr	r2, [r3, #0]
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f042 0201 	orr.w	r2, r2, #1
 8003958:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800395a:	e007      	b.n	800396c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	681a      	ldr	r2, [r3, #0]
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f042 0201 	orr.w	r2, r2, #1
 800396a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800396c:	2300      	movs	r3, #0
}
 800396e:	4618      	mov	r0, r3
 8003970:	3714      	adds	r7, #20
 8003972:	46bd      	mov	sp, r7
 8003974:	bc80      	pop	{r7}
 8003976:	4770      	bx	lr
 8003978:	40012c00 	.word	0x40012c00
 800397c:	40013400 	.word	0x40013400
 8003980:	40000400 	.word	0x40000400
 8003984:	40000800 	.word	0x40000800
 8003988:	40000c00 	.word	0x40000c00

0800398c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800398c:	b580      	push	{r7, lr}
 800398e:	b082      	sub	sp, #8
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2b00      	cmp	r3, #0
 8003998:	d101      	bne.n	800399e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800399a:	2301      	movs	r3, #1
 800399c:	e041      	b.n	8003a22 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039a4:	b2db      	uxtb	r3, r3
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d106      	bne.n	80039b8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	2200      	movs	r2, #0
 80039ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80039b2:	6878      	ldr	r0, [r7, #4]
 80039b4:	f7fd fee4 	bl	8001780 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2202      	movs	r2, #2
 80039bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681a      	ldr	r2, [r3, #0]
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	3304      	adds	r3, #4
 80039c8:	4619      	mov	r1, r3
 80039ca:	4610      	mov	r0, r2
 80039cc:	f000 fe4a 	bl	8004664 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2201      	movs	r2, #1
 80039d4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2201      	movs	r2, #1
 80039dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2201      	movs	r2, #1
 80039e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2201      	movs	r2, #1
 80039ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2201      	movs	r2, #1
 80039f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2201      	movs	r2, #1
 80039fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2201      	movs	r2, #1
 8003a04:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2201      	movs	r2, #1
 8003a0c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2201      	movs	r2, #1
 8003a14:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2201      	movs	r2, #1
 8003a1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003a20:	2300      	movs	r3, #0
}
 8003a22:	4618      	mov	r0, r3
 8003a24:	3708      	adds	r7, #8
 8003a26:	46bd      	mov	sp, r7
 8003a28:	bd80      	pop	{r7, pc}
	...

08003a2c <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b086      	sub	sp, #24
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	60f8      	str	r0, [r7, #12]
 8003a34:	60b9      	str	r1, [r7, #8]
 8003a36:	607a      	str	r2, [r7, #4]
 8003a38:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8003a3e:	68bb      	ldr	r3, [r7, #8]
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d109      	bne.n	8003a58 <HAL_TIM_PWM_Start_DMA+0x2c>
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003a4a:	b2db      	uxtb	r3, r3
 8003a4c:	2b02      	cmp	r3, #2
 8003a4e:	bf0c      	ite	eq
 8003a50:	2301      	moveq	r3, #1
 8003a52:	2300      	movne	r3, #0
 8003a54:	b2db      	uxtb	r3, r3
 8003a56:	e022      	b.n	8003a9e <HAL_TIM_PWM_Start_DMA+0x72>
 8003a58:	68bb      	ldr	r3, [r7, #8]
 8003a5a:	2b04      	cmp	r3, #4
 8003a5c:	d109      	bne.n	8003a72 <HAL_TIM_PWM_Start_DMA+0x46>
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003a64:	b2db      	uxtb	r3, r3
 8003a66:	2b02      	cmp	r3, #2
 8003a68:	bf0c      	ite	eq
 8003a6a:	2301      	moveq	r3, #1
 8003a6c:	2300      	movne	r3, #0
 8003a6e:	b2db      	uxtb	r3, r3
 8003a70:	e015      	b.n	8003a9e <HAL_TIM_PWM_Start_DMA+0x72>
 8003a72:	68bb      	ldr	r3, [r7, #8]
 8003a74:	2b08      	cmp	r3, #8
 8003a76:	d109      	bne.n	8003a8c <HAL_TIM_PWM_Start_DMA+0x60>
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003a7e:	b2db      	uxtb	r3, r3
 8003a80:	2b02      	cmp	r3, #2
 8003a82:	bf0c      	ite	eq
 8003a84:	2301      	moveq	r3, #1
 8003a86:	2300      	movne	r3, #0
 8003a88:	b2db      	uxtb	r3, r3
 8003a8a:	e008      	b.n	8003a9e <HAL_TIM_PWM_Start_DMA+0x72>
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a92:	b2db      	uxtb	r3, r3
 8003a94:	2b02      	cmp	r3, #2
 8003a96:	bf0c      	ite	eq
 8003a98:	2301      	moveq	r3, #1
 8003a9a:	2300      	movne	r3, #0
 8003a9c:	b2db      	uxtb	r3, r3
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d001      	beq.n	8003aa6 <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 8003aa2:	2302      	movs	r3, #2
 8003aa4:	e167      	b.n	8003d76 <HAL_TIM_PWM_Start_DMA+0x34a>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8003aa6:	68bb      	ldr	r3, [r7, #8]
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d109      	bne.n	8003ac0 <HAL_TIM_PWM_Start_DMA+0x94>
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003ab2:	b2db      	uxtb	r3, r3
 8003ab4:	2b01      	cmp	r3, #1
 8003ab6:	bf0c      	ite	eq
 8003ab8:	2301      	moveq	r3, #1
 8003aba:	2300      	movne	r3, #0
 8003abc:	b2db      	uxtb	r3, r3
 8003abe:	e022      	b.n	8003b06 <HAL_TIM_PWM_Start_DMA+0xda>
 8003ac0:	68bb      	ldr	r3, [r7, #8]
 8003ac2:	2b04      	cmp	r3, #4
 8003ac4:	d109      	bne.n	8003ada <HAL_TIM_PWM_Start_DMA+0xae>
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003acc:	b2db      	uxtb	r3, r3
 8003ace:	2b01      	cmp	r3, #1
 8003ad0:	bf0c      	ite	eq
 8003ad2:	2301      	moveq	r3, #1
 8003ad4:	2300      	movne	r3, #0
 8003ad6:	b2db      	uxtb	r3, r3
 8003ad8:	e015      	b.n	8003b06 <HAL_TIM_PWM_Start_DMA+0xda>
 8003ada:	68bb      	ldr	r3, [r7, #8]
 8003adc:	2b08      	cmp	r3, #8
 8003ade:	d109      	bne.n	8003af4 <HAL_TIM_PWM_Start_DMA+0xc8>
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003ae6:	b2db      	uxtb	r3, r3
 8003ae8:	2b01      	cmp	r3, #1
 8003aea:	bf0c      	ite	eq
 8003aec:	2301      	moveq	r3, #1
 8003aee:	2300      	movne	r3, #0
 8003af0:	b2db      	uxtb	r3, r3
 8003af2:	e008      	b.n	8003b06 <HAL_TIM_PWM_Start_DMA+0xda>
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003afa:	b2db      	uxtb	r3, r3
 8003afc:	2b01      	cmp	r3, #1
 8003afe:	bf0c      	ite	eq
 8003b00:	2301      	moveq	r3, #1
 8003b02:	2300      	movne	r3, #0
 8003b04:	b2db      	uxtb	r3, r3
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d024      	beq.n	8003b54 <HAL_TIM_PWM_Start_DMA+0x128>
  {
    if ((pData == NULL) || (Length == 0U))
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d002      	beq.n	8003b16 <HAL_TIM_PWM_Start_DMA+0xea>
 8003b10:	887b      	ldrh	r3, [r7, #2]
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d101      	bne.n	8003b1a <HAL_TIM_PWM_Start_DMA+0xee>
    {
      return HAL_ERROR;
 8003b16:	2301      	movs	r3, #1
 8003b18:	e12d      	b.n	8003d76 <HAL_TIM_PWM_Start_DMA+0x34a>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003b1a:	68bb      	ldr	r3, [r7, #8]
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d104      	bne.n	8003b2a <HAL_TIM_PWM_Start_DMA+0xfe>
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	2202      	movs	r2, #2
 8003b24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003b28:	e016      	b.n	8003b58 <HAL_TIM_PWM_Start_DMA+0x12c>
 8003b2a:	68bb      	ldr	r3, [r7, #8]
 8003b2c:	2b04      	cmp	r3, #4
 8003b2e:	d104      	bne.n	8003b3a <HAL_TIM_PWM_Start_DMA+0x10e>
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	2202      	movs	r2, #2
 8003b34:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003b38:	e00e      	b.n	8003b58 <HAL_TIM_PWM_Start_DMA+0x12c>
 8003b3a:	68bb      	ldr	r3, [r7, #8]
 8003b3c:	2b08      	cmp	r3, #8
 8003b3e:	d104      	bne.n	8003b4a <HAL_TIM_PWM_Start_DMA+0x11e>
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	2202      	movs	r2, #2
 8003b44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003b48:	e006      	b.n	8003b58 <HAL_TIM_PWM_Start_DMA+0x12c>
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	2202      	movs	r2, #2
 8003b4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003b52:	e001      	b.n	8003b58 <HAL_TIM_PWM_Start_DMA+0x12c>
    }
  }
  else
  {
    return HAL_ERROR;
 8003b54:	2301      	movs	r3, #1
 8003b56:	e10e      	b.n	8003d76 <HAL_TIM_PWM_Start_DMA+0x34a>
  }

  switch (Channel)
 8003b58:	68bb      	ldr	r3, [r7, #8]
 8003b5a:	2b0c      	cmp	r3, #12
 8003b5c:	f200 80ae 	bhi.w	8003cbc <HAL_TIM_PWM_Start_DMA+0x290>
 8003b60:	a201      	add	r2, pc, #4	; (adr r2, 8003b68 <HAL_TIM_PWM_Start_DMA+0x13c>)
 8003b62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b66:	bf00      	nop
 8003b68:	08003b9d 	.word	0x08003b9d
 8003b6c:	08003cbd 	.word	0x08003cbd
 8003b70:	08003cbd 	.word	0x08003cbd
 8003b74:	08003cbd 	.word	0x08003cbd
 8003b78:	08003be5 	.word	0x08003be5
 8003b7c:	08003cbd 	.word	0x08003cbd
 8003b80:	08003cbd 	.word	0x08003cbd
 8003b84:	08003cbd 	.word	0x08003cbd
 8003b88:	08003c2d 	.word	0x08003c2d
 8003b8c:	08003cbd 	.word	0x08003cbd
 8003b90:	08003cbd 	.word	0x08003cbd
 8003b94:	08003cbd 	.word	0x08003cbd
 8003b98:	08003c75 	.word	0x08003c75
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ba0:	4a77      	ldr	r2, [pc, #476]	; (8003d80 <HAL_TIM_PWM_Start_DMA+0x354>)
 8003ba2:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ba8:	4a76      	ldr	r2, [pc, #472]	; (8003d84 <HAL_TIM_PWM_Start_DMA+0x358>)
 8003baa:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bb0:	4a75      	ldr	r2, [pc, #468]	; (8003d88 <HAL_TIM_PWM_Start_DMA+0x35c>)
 8003bb2:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8003bb8:	6879      	ldr	r1, [r7, #4]
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	3334      	adds	r3, #52	; 0x34
 8003bc0:	461a      	mov	r2, r3
 8003bc2:	887b      	ldrh	r3, [r7, #2]
 8003bc4:	f7fe fca6 	bl	8002514 <HAL_DMA_Start_IT>
 8003bc8:	4603      	mov	r3, r0
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d001      	beq.n	8003bd2 <HAL_TIM_PWM_Start_DMA+0x1a6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003bce:	2301      	movs	r3, #1
 8003bd0:	e0d1      	b.n	8003d76 <HAL_TIM_PWM_Start_DMA+0x34a>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	68da      	ldr	r2, [r3, #12]
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003be0:	60da      	str	r2, [r3, #12]
      break;
 8003be2:	e06e      	b.n	8003cc2 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003be8:	4a65      	ldr	r2, [pc, #404]	; (8003d80 <HAL_TIM_PWM_Start_DMA+0x354>)
 8003bea:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bf0:	4a64      	ldr	r2, [pc, #400]	; (8003d84 <HAL_TIM_PWM_Start_DMA+0x358>)
 8003bf2:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bf8:	4a63      	ldr	r2, [pc, #396]	; (8003d88 <HAL_TIM_PWM_Start_DMA+0x35c>)
 8003bfa:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8003c00:	6879      	ldr	r1, [r7, #4]
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	3338      	adds	r3, #56	; 0x38
 8003c08:	461a      	mov	r2, r3
 8003c0a:	887b      	ldrh	r3, [r7, #2]
 8003c0c:	f7fe fc82 	bl	8002514 <HAL_DMA_Start_IT>
 8003c10:	4603      	mov	r3, r0
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d001      	beq.n	8003c1a <HAL_TIM_PWM_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003c16:	2301      	movs	r3, #1
 8003c18:	e0ad      	b.n	8003d76 <HAL_TIM_PWM_Start_DMA+0x34a>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	68da      	ldr	r2, [r3, #12]
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003c28:	60da      	str	r2, [r3, #12]
      break;
 8003c2a:	e04a      	b.n	8003cc2 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c30:	4a53      	ldr	r2, [pc, #332]	; (8003d80 <HAL_TIM_PWM_Start_DMA+0x354>)
 8003c32:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c38:	4a52      	ldr	r2, [pc, #328]	; (8003d84 <HAL_TIM_PWM_Start_DMA+0x358>)
 8003c3a:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c40:	4a51      	ldr	r2, [pc, #324]	; (8003d88 <HAL_TIM_PWM_Start_DMA+0x35c>)
 8003c42:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8003c48:	6879      	ldr	r1, [r7, #4]
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	333c      	adds	r3, #60	; 0x3c
 8003c50:	461a      	mov	r2, r3
 8003c52:	887b      	ldrh	r3, [r7, #2]
 8003c54:	f7fe fc5e 	bl	8002514 <HAL_DMA_Start_IT>
 8003c58:	4603      	mov	r3, r0
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d001      	beq.n	8003c62 <HAL_TIM_PWM_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003c5e:	2301      	movs	r3, #1
 8003c60:	e089      	b.n	8003d76 <HAL_TIM_PWM_Start_DMA+0x34a>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	68da      	ldr	r2, [r3, #12]
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003c70:	60da      	str	r2, [r3, #12]
      break;
 8003c72:	e026      	b.n	8003cc2 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c78:	4a41      	ldr	r2, [pc, #260]	; (8003d80 <HAL_TIM_PWM_Start_DMA+0x354>)
 8003c7a:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c80:	4a40      	ldr	r2, [pc, #256]	; (8003d84 <HAL_TIM_PWM_Start_DMA+0x358>)
 8003c82:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c88:	4a3f      	ldr	r2, [pc, #252]	; (8003d88 <HAL_TIM_PWM_Start_DMA+0x35c>)
 8003c8a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003c90:	6879      	ldr	r1, [r7, #4]
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	3340      	adds	r3, #64	; 0x40
 8003c98:	461a      	mov	r2, r3
 8003c9a:	887b      	ldrh	r3, [r7, #2]
 8003c9c:	f7fe fc3a 	bl	8002514 <HAL_DMA_Start_IT>
 8003ca0:	4603      	mov	r3, r0
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d001      	beq.n	8003caa <HAL_TIM_PWM_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003ca6:	2301      	movs	r3, #1
 8003ca8:	e065      	b.n	8003d76 <HAL_TIM_PWM_Start_DMA+0x34a>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	68da      	ldr	r2, [r3, #12]
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003cb8:	60da      	str	r2, [r3, #12]
      break;
 8003cba:	e002      	b.n	8003cc2 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    default:
      status = HAL_ERROR;
 8003cbc:	2301      	movs	r3, #1
 8003cbe:	75fb      	strb	r3, [r7, #23]
      break;
 8003cc0:	bf00      	nop
  }

  if (status == HAL_OK)
 8003cc2:	7dfb      	ldrb	r3, [r7, #23]
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d155      	bne.n	8003d74 <HAL_TIM_PWM_Start_DMA+0x348>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	2201      	movs	r2, #1
 8003cce:	68b9      	ldr	r1, [r7, #8]
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	f000 ff83 	bl	8004bdc <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	4a2c      	ldr	r2, [pc, #176]	; (8003d8c <HAL_TIM_PWM_Start_DMA+0x360>)
 8003cdc:	4293      	cmp	r3, r2
 8003cde:	d004      	beq.n	8003cea <HAL_TIM_PWM_Start_DMA+0x2be>
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	4a2a      	ldr	r2, [pc, #168]	; (8003d90 <HAL_TIM_PWM_Start_DMA+0x364>)
 8003ce6:	4293      	cmp	r3, r2
 8003ce8:	d101      	bne.n	8003cee <HAL_TIM_PWM_Start_DMA+0x2c2>
 8003cea:	2301      	movs	r3, #1
 8003cec:	e000      	b.n	8003cf0 <HAL_TIM_PWM_Start_DMA+0x2c4>
 8003cee:	2300      	movs	r3, #0
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d007      	beq.n	8003d04 <HAL_TIM_PWM_Start_DMA+0x2d8>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003d02:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	4a20      	ldr	r2, [pc, #128]	; (8003d8c <HAL_TIM_PWM_Start_DMA+0x360>)
 8003d0a:	4293      	cmp	r3, r2
 8003d0c:	d018      	beq.n	8003d40 <HAL_TIM_PWM_Start_DMA+0x314>
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	4a1f      	ldr	r2, [pc, #124]	; (8003d90 <HAL_TIM_PWM_Start_DMA+0x364>)
 8003d14:	4293      	cmp	r3, r2
 8003d16:	d013      	beq.n	8003d40 <HAL_TIM_PWM_Start_DMA+0x314>
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d20:	d00e      	beq.n	8003d40 <HAL_TIM_PWM_Start_DMA+0x314>
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	4a1b      	ldr	r2, [pc, #108]	; (8003d94 <HAL_TIM_PWM_Start_DMA+0x368>)
 8003d28:	4293      	cmp	r3, r2
 8003d2a:	d009      	beq.n	8003d40 <HAL_TIM_PWM_Start_DMA+0x314>
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	4a19      	ldr	r2, [pc, #100]	; (8003d98 <HAL_TIM_PWM_Start_DMA+0x36c>)
 8003d32:	4293      	cmp	r3, r2
 8003d34:	d004      	beq.n	8003d40 <HAL_TIM_PWM_Start_DMA+0x314>
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	4a18      	ldr	r2, [pc, #96]	; (8003d9c <HAL_TIM_PWM_Start_DMA+0x370>)
 8003d3c:	4293      	cmp	r3, r2
 8003d3e:	d111      	bne.n	8003d64 <HAL_TIM_PWM_Start_DMA+0x338>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	689b      	ldr	r3, [r3, #8]
 8003d46:	f003 0307 	and.w	r3, r3, #7
 8003d4a:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d4c:	693b      	ldr	r3, [r7, #16]
 8003d4e:	2b06      	cmp	r3, #6
 8003d50:	d010      	beq.n	8003d74 <HAL_TIM_PWM_Start_DMA+0x348>
      {
        __HAL_TIM_ENABLE(htim);
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	681a      	ldr	r2, [r3, #0]
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f042 0201 	orr.w	r2, r2, #1
 8003d60:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d62:	e007      	b.n	8003d74 <HAL_TIM_PWM_Start_DMA+0x348>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	681a      	ldr	r2, [r3, #0]
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f042 0201 	orr.w	r2, r2, #1
 8003d72:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8003d74:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d76:	4618      	mov	r0, r3
 8003d78:	3718      	adds	r7, #24
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	bd80      	pop	{r7, pc}
 8003d7e:	bf00      	nop
 8003d80:	08004553 	.word	0x08004553
 8003d84:	080045fb 	.word	0x080045fb
 8003d88:	080044c1 	.word	0x080044c1
 8003d8c:	40012c00 	.word	0x40012c00
 8003d90:	40013400 	.word	0x40013400
 8003d94:	40000400 	.word	0x40000400
 8003d98:	40000800 	.word	0x40000800
 8003d9c:	40000c00 	.word	0x40000c00

08003da0 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003da0:	b580      	push	{r7, lr}
 8003da2:	b084      	sub	sp, #16
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
 8003da8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003daa:	2300      	movs	r3, #0
 8003dac:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8003dae:	683b      	ldr	r3, [r7, #0]
 8003db0:	2b0c      	cmp	r3, #12
 8003db2:	d855      	bhi.n	8003e60 <HAL_TIM_PWM_Stop_DMA+0xc0>
 8003db4:	a201      	add	r2, pc, #4	; (adr r2, 8003dbc <HAL_TIM_PWM_Stop_DMA+0x1c>)
 8003db6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dba:	bf00      	nop
 8003dbc:	08003df1 	.word	0x08003df1
 8003dc0:	08003e61 	.word	0x08003e61
 8003dc4:	08003e61 	.word	0x08003e61
 8003dc8:	08003e61 	.word	0x08003e61
 8003dcc:	08003e0d 	.word	0x08003e0d
 8003dd0:	08003e61 	.word	0x08003e61
 8003dd4:	08003e61 	.word	0x08003e61
 8003dd8:	08003e61 	.word	0x08003e61
 8003ddc:	08003e29 	.word	0x08003e29
 8003de0:	08003e61 	.word	0x08003e61
 8003de4:	08003e61 	.word	0x08003e61
 8003de8:	08003e61 	.word	0x08003e61
 8003dec:	08003e45 	.word	0x08003e45
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	68da      	ldr	r2, [r3, #12]
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003dfe:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e04:	4618      	mov	r0, r3
 8003e06:	f7fe fbe5 	bl	80025d4 <HAL_DMA_Abort_IT>
      break;
 8003e0a:	e02c      	b.n	8003e66 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	68da      	ldr	r2, [r3, #12]
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e1a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e20:	4618      	mov	r0, r3
 8003e22:	f7fe fbd7 	bl	80025d4 <HAL_DMA_Abort_IT>
      break;
 8003e26:	e01e      	b.n	8003e66 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	68da      	ldr	r2, [r3, #12]
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003e36:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	f7fe fbc9 	bl	80025d4 <HAL_DMA_Abort_IT>
      break;
 8003e42:	e010      	b.n	8003e66 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	68da      	ldr	r2, [r3, #12]
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003e52:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e58:	4618      	mov	r0, r3
 8003e5a:	f7fe fbbb 	bl	80025d4 <HAL_DMA_Abort_IT>
      break;
 8003e5e:	e002      	b.n	8003e66 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 8003e60:	2301      	movs	r3, #1
 8003e62:	73fb      	strb	r3, [r7, #15]
      break;
 8003e64:	bf00      	nop
  }

  if (status == HAL_OK)
 8003e66:	7bfb      	ldrb	r3, [r7, #15]
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d161      	bne.n	8003f30 <HAL_TIM_PWM_Stop_DMA+0x190>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	2200      	movs	r2, #0
 8003e72:	6839      	ldr	r1, [r7, #0]
 8003e74:	4618      	mov	r0, r3
 8003e76:	f000 feb1 	bl	8004bdc <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	4a2f      	ldr	r2, [pc, #188]	; (8003f3c <HAL_TIM_PWM_Stop_DMA+0x19c>)
 8003e80:	4293      	cmp	r3, r2
 8003e82:	d004      	beq.n	8003e8e <HAL_TIM_PWM_Stop_DMA+0xee>
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	4a2d      	ldr	r2, [pc, #180]	; (8003f40 <HAL_TIM_PWM_Stop_DMA+0x1a0>)
 8003e8a:	4293      	cmp	r3, r2
 8003e8c:	d101      	bne.n	8003e92 <HAL_TIM_PWM_Stop_DMA+0xf2>
 8003e8e:	2301      	movs	r3, #1
 8003e90:	e000      	b.n	8003e94 <HAL_TIM_PWM_Stop_DMA+0xf4>
 8003e92:	2300      	movs	r3, #0
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d017      	beq.n	8003ec8 <HAL_TIM_PWM_Stop_DMA+0x128>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	6a1a      	ldr	r2, [r3, #32]
 8003e9e:	f241 1311 	movw	r3, #4369	; 0x1111
 8003ea2:	4013      	ands	r3, r2
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d10f      	bne.n	8003ec8 <HAL_TIM_PWM_Stop_DMA+0x128>
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	6a1a      	ldr	r2, [r3, #32]
 8003eae:	f240 4344 	movw	r3, #1092	; 0x444
 8003eb2:	4013      	ands	r3, r2
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d107      	bne.n	8003ec8 <HAL_TIM_PWM_Stop_DMA+0x128>
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003ec6:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	6a1a      	ldr	r2, [r3, #32]
 8003ece:	f241 1311 	movw	r3, #4369	; 0x1111
 8003ed2:	4013      	ands	r3, r2
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d10f      	bne.n	8003ef8 <HAL_TIM_PWM_Stop_DMA+0x158>
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	6a1a      	ldr	r2, [r3, #32]
 8003ede:	f240 4344 	movw	r3, #1092	; 0x444
 8003ee2:	4013      	ands	r3, r2
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d107      	bne.n	8003ef8 <HAL_TIM_PWM_Stop_DMA+0x158>
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	681a      	ldr	r2, [r3, #0]
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f022 0201 	bic.w	r2, r2, #1
 8003ef6:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8003ef8:	683b      	ldr	r3, [r7, #0]
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d104      	bne.n	8003f08 <HAL_TIM_PWM_Stop_DMA+0x168>
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	2201      	movs	r2, #1
 8003f02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003f06:	e013      	b.n	8003f30 <HAL_TIM_PWM_Stop_DMA+0x190>
 8003f08:	683b      	ldr	r3, [r7, #0]
 8003f0a:	2b04      	cmp	r3, #4
 8003f0c:	d104      	bne.n	8003f18 <HAL_TIM_PWM_Stop_DMA+0x178>
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	2201      	movs	r2, #1
 8003f12:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003f16:	e00b      	b.n	8003f30 <HAL_TIM_PWM_Stop_DMA+0x190>
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	2b08      	cmp	r3, #8
 8003f1c:	d104      	bne.n	8003f28 <HAL_TIM_PWM_Stop_DMA+0x188>
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	2201      	movs	r2, #1
 8003f22:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003f26:	e003      	b.n	8003f30 <HAL_TIM_PWM_Stop_DMA+0x190>
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	2201      	movs	r2, #1
 8003f2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 8003f30:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f32:	4618      	mov	r0, r3
 8003f34:	3710      	adds	r7, #16
 8003f36:	46bd      	mov	sp, r7
 8003f38:	bd80      	pop	{r7, pc}
 8003f3a:	bf00      	nop
 8003f3c:	40012c00 	.word	0x40012c00
 8003f40:	40013400 	.word	0x40013400

08003f44 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003f44:	b580      	push	{r7, lr}
 8003f46:	b082      	sub	sp, #8
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	691b      	ldr	r3, [r3, #16]
 8003f52:	f003 0302 	and.w	r3, r3, #2
 8003f56:	2b02      	cmp	r3, #2
 8003f58:	d122      	bne.n	8003fa0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	68db      	ldr	r3, [r3, #12]
 8003f60:	f003 0302 	and.w	r3, r3, #2
 8003f64:	2b02      	cmp	r3, #2
 8003f66:	d11b      	bne.n	8003fa0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f06f 0202 	mvn.w	r2, #2
 8003f70:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	2201      	movs	r2, #1
 8003f76:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	699b      	ldr	r3, [r3, #24]
 8003f7e:	f003 0303 	and.w	r3, r3, #3
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d003      	beq.n	8003f8e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003f86:	6878      	ldr	r0, [r7, #4]
 8003f88:	f000 fa76 	bl	8004478 <HAL_TIM_IC_CaptureCallback>
 8003f8c:	e005      	b.n	8003f9a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f8e:	6878      	ldr	r0, [r7, #4]
 8003f90:	f000 fa69 	bl	8004466 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f94:	6878      	ldr	r0, [r7, #4]
 8003f96:	f7fc fc5f 	bl	8000858 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	691b      	ldr	r3, [r3, #16]
 8003fa6:	f003 0304 	and.w	r3, r3, #4
 8003faa:	2b04      	cmp	r3, #4
 8003fac:	d122      	bne.n	8003ff4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	68db      	ldr	r3, [r3, #12]
 8003fb4:	f003 0304 	and.w	r3, r3, #4
 8003fb8:	2b04      	cmp	r3, #4
 8003fba:	d11b      	bne.n	8003ff4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f06f 0204 	mvn.w	r2, #4
 8003fc4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	2202      	movs	r2, #2
 8003fca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	699b      	ldr	r3, [r3, #24]
 8003fd2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d003      	beq.n	8003fe2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003fda:	6878      	ldr	r0, [r7, #4]
 8003fdc:	f000 fa4c 	bl	8004478 <HAL_TIM_IC_CaptureCallback>
 8003fe0:	e005      	b.n	8003fee <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003fe2:	6878      	ldr	r0, [r7, #4]
 8003fe4:	f000 fa3f 	bl	8004466 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003fe8:	6878      	ldr	r0, [r7, #4]
 8003fea:	f7fc fc35 	bl	8000858 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	691b      	ldr	r3, [r3, #16]
 8003ffa:	f003 0308 	and.w	r3, r3, #8
 8003ffe:	2b08      	cmp	r3, #8
 8004000:	d122      	bne.n	8004048 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	68db      	ldr	r3, [r3, #12]
 8004008:	f003 0308 	and.w	r3, r3, #8
 800400c:	2b08      	cmp	r3, #8
 800400e:	d11b      	bne.n	8004048 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f06f 0208 	mvn.w	r2, #8
 8004018:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	2204      	movs	r2, #4
 800401e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	69db      	ldr	r3, [r3, #28]
 8004026:	f003 0303 	and.w	r3, r3, #3
 800402a:	2b00      	cmp	r3, #0
 800402c:	d003      	beq.n	8004036 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800402e:	6878      	ldr	r0, [r7, #4]
 8004030:	f000 fa22 	bl	8004478 <HAL_TIM_IC_CaptureCallback>
 8004034:	e005      	b.n	8004042 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004036:	6878      	ldr	r0, [r7, #4]
 8004038:	f000 fa15 	bl	8004466 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800403c:	6878      	ldr	r0, [r7, #4]
 800403e:	f7fc fc0b 	bl	8000858 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	2200      	movs	r2, #0
 8004046:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	691b      	ldr	r3, [r3, #16]
 800404e:	f003 0310 	and.w	r3, r3, #16
 8004052:	2b10      	cmp	r3, #16
 8004054:	d122      	bne.n	800409c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	68db      	ldr	r3, [r3, #12]
 800405c:	f003 0310 	and.w	r3, r3, #16
 8004060:	2b10      	cmp	r3, #16
 8004062:	d11b      	bne.n	800409c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f06f 0210 	mvn.w	r2, #16
 800406c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	2208      	movs	r2, #8
 8004072:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	69db      	ldr	r3, [r3, #28]
 800407a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800407e:	2b00      	cmp	r3, #0
 8004080:	d003      	beq.n	800408a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004082:	6878      	ldr	r0, [r7, #4]
 8004084:	f000 f9f8 	bl	8004478 <HAL_TIM_IC_CaptureCallback>
 8004088:	e005      	b.n	8004096 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800408a:	6878      	ldr	r0, [r7, #4]
 800408c:	f000 f9eb 	bl	8004466 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004090:	6878      	ldr	r0, [r7, #4]
 8004092:	f7fc fbe1 	bl	8000858 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	2200      	movs	r2, #0
 800409a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	691b      	ldr	r3, [r3, #16]
 80040a2:	f003 0301 	and.w	r3, r3, #1
 80040a6:	2b01      	cmp	r3, #1
 80040a8:	d10e      	bne.n	80040c8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	68db      	ldr	r3, [r3, #12]
 80040b0:	f003 0301 	and.w	r3, r3, #1
 80040b4:	2b01      	cmp	r3, #1
 80040b6:	d107      	bne.n	80040c8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f06f 0201 	mvn.w	r2, #1
 80040c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80040c2:	6878      	ldr	r0, [r7, #4]
 80040c4:	f7fc fc0c 	bl	80008e0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	691b      	ldr	r3, [r3, #16]
 80040ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040d2:	2b80      	cmp	r3, #128	; 0x80
 80040d4:	d10e      	bne.n	80040f4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	68db      	ldr	r3, [r3, #12]
 80040dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040e0:	2b80      	cmp	r3, #128	; 0x80
 80040e2:	d107      	bne.n	80040f4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80040ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80040ee:	6878      	ldr	r0, [r7, #4]
 80040f0:	f000 fe5e 	bl	8004db0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	691b      	ldr	r3, [r3, #16]
 80040fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040fe:	2b40      	cmp	r3, #64	; 0x40
 8004100:	d10e      	bne.n	8004120 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	68db      	ldr	r3, [r3, #12]
 8004108:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800410c:	2b40      	cmp	r3, #64	; 0x40
 800410e:	d107      	bne.n	8004120 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004118:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800411a:	6878      	ldr	r0, [r7, #4]
 800411c:	f000 f9be 	bl	800449c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	691b      	ldr	r3, [r3, #16]
 8004126:	f003 0320 	and.w	r3, r3, #32
 800412a:	2b20      	cmp	r3, #32
 800412c:	d10e      	bne.n	800414c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	68db      	ldr	r3, [r3, #12]
 8004134:	f003 0320 	and.w	r3, r3, #32
 8004138:	2b20      	cmp	r3, #32
 800413a:	d107      	bne.n	800414c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f06f 0220 	mvn.w	r2, #32
 8004144:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004146:	6878      	ldr	r0, [r7, #4]
 8004148:	f000 fe29 	bl	8004d9e <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800414c:	bf00      	nop
 800414e:	3708      	adds	r7, #8
 8004150:	46bd      	mov	sp, r7
 8004152:	bd80      	pop	{r7, pc}

08004154 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004154:	b580      	push	{r7, lr}
 8004156:	b086      	sub	sp, #24
 8004158:	af00      	add	r7, sp, #0
 800415a:	60f8      	str	r0, [r7, #12]
 800415c:	60b9      	str	r1, [r7, #8]
 800415e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004160:	2300      	movs	r3, #0
 8004162:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800416a:	2b01      	cmp	r3, #1
 800416c:	d101      	bne.n	8004172 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800416e:	2302      	movs	r3, #2
 8004170:	e0ae      	b.n	80042d0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	2201      	movs	r2, #1
 8004176:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	2b0c      	cmp	r3, #12
 800417e:	f200 809f 	bhi.w	80042c0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004182:	a201      	add	r2, pc, #4	; (adr r2, 8004188 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004184:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004188:	080041bd 	.word	0x080041bd
 800418c:	080042c1 	.word	0x080042c1
 8004190:	080042c1 	.word	0x080042c1
 8004194:	080042c1 	.word	0x080042c1
 8004198:	080041fd 	.word	0x080041fd
 800419c:	080042c1 	.word	0x080042c1
 80041a0:	080042c1 	.word	0x080042c1
 80041a4:	080042c1 	.word	0x080042c1
 80041a8:	0800423f 	.word	0x0800423f
 80041ac:	080042c1 	.word	0x080042c1
 80041b0:	080042c1 	.word	0x080042c1
 80041b4:	080042c1 	.word	0x080042c1
 80041b8:	0800427f 	.word	0x0800427f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	68b9      	ldr	r1, [r7, #8]
 80041c2:	4618      	mov	r0, r3
 80041c4:	f000 fac8 	bl	8004758 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	699a      	ldr	r2, [r3, #24]
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f042 0208 	orr.w	r2, r2, #8
 80041d6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	699a      	ldr	r2, [r3, #24]
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f022 0204 	bic.w	r2, r2, #4
 80041e6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	6999      	ldr	r1, [r3, #24]
 80041ee:	68bb      	ldr	r3, [r7, #8]
 80041f0:	691a      	ldr	r2, [r3, #16]
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	430a      	orrs	r2, r1
 80041f8:	619a      	str	r2, [r3, #24]
      break;
 80041fa:	e064      	b.n	80042c6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	68b9      	ldr	r1, [r7, #8]
 8004202:	4618      	mov	r0, r3
 8004204:	f000 fb18 	bl	8004838 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	699a      	ldr	r2, [r3, #24]
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004216:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	699a      	ldr	r2, [r3, #24]
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004226:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	6999      	ldr	r1, [r3, #24]
 800422e:	68bb      	ldr	r3, [r7, #8]
 8004230:	691b      	ldr	r3, [r3, #16]
 8004232:	021a      	lsls	r2, r3, #8
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	430a      	orrs	r2, r1
 800423a:	619a      	str	r2, [r3, #24]
      break;
 800423c:	e043      	b.n	80042c6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	68b9      	ldr	r1, [r7, #8]
 8004244:	4618      	mov	r0, r3
 8004246:	f000 fb6b 	bl	8004920 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	69da      	ldr	r2, [r3, #28]
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f042 0208 	orr.w	r2, r2, #8
 8004258:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	69da      	ldr	r2, [r3, #28]
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f022 0204 	bic.w	r2, r2, #4
 8004268:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	69d9      	ldr	r1, [r3, #28]
 8004270:	68bb      	ldr	r3, [r7, #8]
 8004272:	691a      	ldr	r2, [r3, #16]
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	430a      	orrs	r2, r1
 800427a:	61da      	str	r2, [r3, #28]
      break;
 800427c:	e023      	b.n	80042c6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	68b9      	ldr	r1, [r7, #8]
 8004284:	4618      	mov	r0, r3
 8004286:	f000 fbbf 	bl	8004a08 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	69da      	ldr	r2, [r3, #28]
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004298:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	69da      	ldr	r2, [r3, #28]
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80042a8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	69d9      	ldr	r1, [r3, #28]
 80042b0:	68bb      	ldr	r3, [r7, #8]
 80042b2:	691b      	ldr	r3, [r3, #16]
 80042b4:	021a      	lsls	r2, r3, #8
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	430a      	orrs	r2, r1
 80042bc:	61da      	str	r2, [r3, #28]
      break;
 80042be:	e002      	b.n	80042c6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80042c0:	2301      	movs	r3, #1
 80042c2:	75fb      	strb	r3, [r7, #23]
      break;
 80042c4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	2200      	movs	r2, #0
 80042ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80042ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80042d0:	4618      	mov	r0, r3
 80042d2:	3718      	adds	r7, #24
 80042d4:	46bd      	mov	sp, r7
 80042d6:	bd80      	pop	{r7, pc}

080042d8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	b084      	sub	sp, #16
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
 80042e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80042e2:	2300      	movs	r3, #0
 80042e4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80042ec:	2b01      	cmp	r3, #1
 80042ee:	d101      	bne.n	80042f4 <HAL_TIM_ConfigClockSource+0x1c>
 80042f0:	2302      	movs	r3, #2
 80042f2:	e0b4      	b.n	800445e <HAL_TIM_ConfigClockSource+0x186>
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2201      	movs	r2, #1
 80042f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2202      	movs	r2, #2
 8004300:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	689b      	ldr	r3, [r3, #8]
 800430a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800430c:	68bb      	ldr	r3, [r7, #8]
 800430e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004312:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004314:	68bb      	ldr	r3, [r7, #8]
 8004316:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800431a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	68ba      	ldr	r2, [r7, #8]
 8004322:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800432c:	d03e      	beq.n	80043ac <HAL_TIM_ConfigClockSource+0xd4>
 800432e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004332:	f200 8087 	bhi.w	8004444 <HAL_TIM_ConfigClockSource+0x16c>
 8004336:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800433a:	f000 8086 	beq.w	800444a <HAL_TIM_ConfigClockSource+0x172>
 800433e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004342:	d87f      	bhi.n	8004444 <HAL_TIM_ConfigClockSource+0x16c>
 8004344:	2b70      	cmp	r3, #112	; 0x70
 8004346:	d01a      	beq.n	800437e <HAL_TIM_ConfigClockSource+0xa6>
 8004348:	2b70      	cmp	r3, #112	; 0x70
 800434a:	d87b      	bhi.n	8004444 <HAL_TIM_ConfigClockSource+0x16c>
 800434c:	2b60      	cmp	r3, #96	; 0x60
 800434e:	d050      	beq.n	80043f2 <HAL_TIM_ConfigClockSource+0x11a>
 8004350:	2b60      	cmp	r3, #96	; 0x60
 8004352:	d877      	bhi.n	8004444 <HAL_TIM_ConfigClockSource+0x16c>
 8004354:	2b50      	cmp	r3, #80	; 0x50
 8004356:	d03c      	beq.n	80043d2 <HAL_TIM_ConfigClockSource+0xfa>
 8004358:	2b50      	cmp	r3, #80	; 0x50
 800435a:	d873      	bhi.n	8004444 <HAL_TIM_ConfigClockSource+0x16c>
 800435c:	2b40      	cmp	r3, #64	; 0x40
 800435e:	d058      	beq.n	8004412 <HAL_TIM_ConfigClockSource+0x13a>
 8004360:	2b40      	cmp	r3, #64	; 0x40
 8004362:	d86f      	bhi.n	8004444 <HAL_TIM_ConfigClockSource+0x16c>
 8004364:	2b30      	cmp	r3, #48	; 0x30
 8004366:	d064      	beq.n	8004432 <HAL_TIM_ConfigClockSource+0x15a>
 8004368:	2b30      	cmp	r3, #48	; 0x30
 800436a:	d86b      	bhi.n	8004444 <HAL_TIM_ConfigClockSource+0x16c>
 800436c:	2b20      	cmp	r3, #32
 800436e:	d060      	beq.n	8004432 <HAL_TIM_ConfigClockSource+0x15a>
 8004370:	2b20      	cmp	r3, #32
 8004372:	d867      	bhi.n	8004444 <HAL_TIM_ConfigClockSource+0x16c>
 8004374:	2b00      	cmp	r3, #0
 8004376:	d05c      	beq.n	8004432 <HAL_TIM_ConfigClockSource+0x15a>
 8004378:	2b10      	cmp	r3, #16
 800437a:	d05a      	beq.n	8004432 <HAL_TIM_ConfigClockSource+0x15a>
 800437c:	e062      	b.n	8004444 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004382:	683b      	ldr	r3, [r7, #0]
 8004384:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004386:	683b      	ldr	r3, [r7, #0]
 8004388:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800438a:	683b      	ldr	r3, [r7, #0]
 800438c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800438e:	f000 fc06 	bl	8004b9e <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	689b      	ldr	r3, [r3, #8]
 8004398:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800439a:	68bb      	ldr	r3, [r7, #8]
 800439c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80043a0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	68ba      	ldr	r2, [r7, #8]
 80043a8:	609a      	str	r2, [r3, #8]
      break;
 80043aa:	e04f      	b.n	800444c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80043b4:	683b      	ldr	r3, [r7, #0]
 80043b6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80043b8:	683b      	ldr	r3, [r7, #0]
 80043ba:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80043bc:	f000 fbef 	bl	8004b9e <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	689a      	ldr	r2, [r3, #8]
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80043ce:	609a      	str	r2, [r3, #8]
      break;
 80043d0:	e03c      	b.n	800444c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80043da:	683b      	ldr	r3, [r7, #0]
 80043dc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80043de:	461a      	mov	r2, r3
 80043e0:	f000 fb66 	bl	8004ab0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	2150      	movs	r1, #80	; 0x50
 80043ea:	4618      	mov	r0, r3
 80043ec:	f000 fbbd 	bl	8004b6a <TIM_ITRx_SetConfig>
      break;
 80043f0:	e02c      	b.n	800444c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80043f6:	683b      	ldr	r3, [r7, #0]
 80043f8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80043fa:	683b      	ldr	r3, [r7, #0]
 80043fc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80043fe:	461a      	mov	r2, r3
 8004400:	f000 fb84 	bl	8004b0c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	2160      	movs	r1, #96	; 0x60
 800440a:	4618      	mov	r0, r3
 800440c:	f000 fbad 	bl	8004b6a <TIM_ITRx_SetConfig>
      break;
 8004410:	e01c      	b.n	800444c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800441a:	683b      	ldr	r3, [r7, #0]
 800441c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800441e:	461a      	mov	r2, r3
 8004420:	f000 fb46 	bl	8004ab0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	2140      	movs	r1, #64	; 0x40
 800442a:	4618      	mov	r0, r3
 800442c:	f000 fb9d 	bl	8004b6a <TIM_ITRx_SetConfig>
      break;
 8004430:	e00c      	b.n	800444c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681a      	ldr	r2, [r3, #0]
 8004436:	683b      	ldr	r3, [r7, #0]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	4619      	mov	r1, r3
 800443c:	4610      	mov	r0, r2
 800443e:	f000 fb94 	bl	8004b6a <TIM_ITRx_SetConfig>
      break;
 8004442:	e003      	b.n	800444c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004444:	2301      	movs	r3, #1
 8004446:	73fb      	strb	r3, [r7, #15]
      break;
 8004448:	e000      	b.n	800444c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800444a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2201      	movs	r2, #1
 8004450:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2200      	movs	r2, #0
 8004458:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800445c:	7bfb      	ldrb	r3, [r7, #15]
}
 800445e:	4618      	mov	r0, r3
 8004460:	3710      	adds	r7, #16
 8004462:	46bd      	mov	sp, r7
 8004464:	bd80      	pop	{r7, pc}

08004466 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004466:	b480      	push	{r7}
 8004468:	b083      	sub	sp, #12
 800446a:	af00      	add	r7, sp, #0
 800446c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800446e:	bf00      	nop
 8004470:	370c      	adds	r7, #12
 8004472:	46bd      	mov	sp, r7
 8004474:	bc80      	pop	{r7}
 8004476:	4770      	bx	lr

08004478 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004478:	b480      	push	{r7}
 800447a:	b083      	sub	sp, #12
 800447c:	af00      	add	r7, sp, #0
 800447e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004480:	bf00      	nop
 8004482:	370c      	adds	r7, #12
 8004484:	46bd      	mov	sp, r7
 8004486:	bc80      	pop	{r7}
 8004488:	4770      	bx	lr

0800448a <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800448a:	b480      	push	{r7}
 800448c:	b083      	sub	sp, #12
 800448e:	af00      	add	r7, sp, #0
 8004490:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8004492:	bf00      	nop
 8004494:	370c      	adds	r7, #12
 8004496:	46bd      	mov	sp, r7
 8004498:	bc80      	pop	{r7}
 800449a:	4770      	bx	lr

0800449c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800449c:	b480      	push	{r7}
 800449e:	b083      	sub	sp, #12
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80044a4:	bf00      	nop
 80044a6:	370c      	adds	r7, #12
 80044a8:	46bd      	mov	sp, r7
 80044aa:	bc80      	pop	{r7}
 80044ac:	4770      	bx	lr

080044ae <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 80044ae:	b480      	push	{r7}
 80044b0:	b083      	sub	sp, #12
 80044b2:	af00      	add	r7, sp, #0
 80044b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 80044b6:	bf00      	nop
 80044b8:	370c      	adds	r7, #12
 80044ba:	46bd      	mov	sp, r7
 80044bc:	bc80      	pop	{r7}
 80044be:	4770      	bx	lr

080044c0 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 80044c0:	b580      	push	{r7, lr}
 80044c2:	b084      	sub	sp, #16
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044cc:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044d2:	687a      	ldr	r2, [r7, #4]
 80044d4:	429a      	cmp	r2, r3
 80044d6:	d107      	bne.n	80044e8 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	2201      	movs	r2, #1
 80044dc:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	2201      	movs	r2, #1
 80044e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80044e6:	e02a      	b.n	800453e <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044ec:	687a      	ldr	r2, [r7, #4]
 80044ee:	429a      	cmp	r2, r3
 80044f0:	d107      	bne.n	8004502 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	2202      	movs	r2, #2
 80044f6:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	2201      	movs	r2, #1
 80044fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004500:	e01d      	b.n	800453e <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004506:	687a      	ldr	r2, [r7, #4]
 8004508:	429a      	cmp	r2, r3
 800450a:	d107      	bne.n	800451c <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	2204      	movs	r2, #4
 8004510:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	2201      	movs	r2, #1
 8004516:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800451a:	e010      	b.n	800453e <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004520:	687a      	ldr	r2, [r7, #4]
 8004522:	429a      	cmp	r2, r3
 8004524:	d107      	bne.n	8004536 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	2208      	movs	r2, #8
 800452a:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	2201      	movs	r2, #1
 8004530:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004534:	e003      	b.n	800453e <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	2201      	movs	r2, #1
 800453a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 800453e:	68f8      	ldr	r0, [r7, #12]
 8004540:	f7ff ffb5 	bl	80044ae <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	2200      	movs	r2, #0
 8004548:	771a      	strb	r2, [r3, #28]
}
 800454a:	bf00      	nop
 800454c:	3710      	adds	r7, #16
 800454e:	46bd      	mov	sp, r7
 8004550:	bd80      	pop	{r7, pc}

08004552 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8004552:	b580      	push	{r7, lr}
 8004554:	b084      	sub	sp, #16
 8004556:	af00      	add	r7, sp, #0
 8004558:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800455e:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004564:	687a      	ldr	r2, [r7, #4]
 8004566:	429a      	cmp	r2, r3
 8004568:	d10b      	bne.n	8004582 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	2201      	movs	r2, #1
 800456e:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	699b      	ldr	r3, [r3, #24]
 8004574:	2b00      	cmp	r3, #0
 8004576:	d136      	bne.n	80045e6 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	2201      	movs	r2, #1
 800457c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004580:	e031      	b.n	80045e6 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004586:	687a      	ldr	r2, [r7, #4]
 8004588:	429a      	cmp	r2, r3
 800458a:	d10b      	bne.n	80045a4 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	2202      	movs	r2, #2
 8004590:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	699b      	ldr	r3, [r3, #24]
 8004596:	2b00      	cmp	r3, #0
 8004598:	d125      	bne.n	80045e6 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	2201      	movs	r2, #1
 800459e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80045a2:	e020      	b.n	80045e6 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045a8:	687a      	ldr	r2, [r7, #4]
 80045aa:	429a      	cmp	r2, r3
 80045ac:	d10b      	bne.n	80045c6 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	2204      	movs	r2, #4
 80045b2:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	699b      	ldr	r3, [r3, #24]
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d114      	bne.n	80045e6 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	2201      	movs	r2, #1
 80045c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80045c4:	e00f      	b.n	80045e6 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045ca:	687a      	ldr	r2, [r7, #4]
 80045cc:	429a      	cmp	r2, r3
 80045ce:	d10a      	bne.n	80045e6 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	2208      	movs	r2, #8
 80045d4:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	699b      	ldr	r3, [r3, #24]
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d103      	bne.n	80045e6 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	2201      	movs	r2, #1
 80045e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045e6:	68f8      	ldr	r0, [r7, #12]
 80045e8:	f7fc f936 	bl	8000858 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	2200      	movs	r2, #0
 80045f0:	771a      	strb	r2, [r3, #28]
}
 80045f2:	bf00      	nop
 80045f4:	3710      	adds	r7, #16
 80045f6:	46bd      	mov	sp, r7
 80045f8:	bd80      	pop	{r7, pc}

080045fa <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 80045fa:	b580      	push	{r7, lr}
 80045fc:	b084      	sub	sp, #16
 80045fe:	af00      	add	r7, sp, #0
 8004600:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004606:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800460c:	687a      	ldr	r2, [r7, #4]
 800460e:	429a      	cmp	r2, r3
 8004610:	d103      	bne.n	800461a <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	2201      	movs	r2, #1
 8004616:	771a      	strb	r2, [r3, #28]
 8004618:	e019      	b.n	800464e <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800461e:	687a      	ldr	r2, [r7, #4]
 8004620:	429a      	cmp	r2, r3
 8004622:	d103      	bne.n	800462c <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	2202      	movs	r2, #2
 8004628:	771a      	strb	r2, [r3, #28]
 800462a:	e010      	b.n	800464e <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004630:	687a      	ldr	r2, [r7, #4]
 8004632:	429a      	cmp	r2, r3
 8004634:	d103      	bne.n	800463e <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	2204      	movs	r2, #4
 800463a:	771a      	strb	r2, [r3, #28]
 800463c:	e007      	b.n	800464e <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004642:	687a      	ldr	r2, [r7, #4]
 8004644:	429a      	cmp	r2, r3
 8004646:	d102      	bne.n	800464e <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	2208      	movs	r2, #8
 800464c:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 800464e:	68f8      	ldr	r0, [r7, #12]
 8004650:	f7ff ff1b 	bl	800448a <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	2200      	movs	r2, #0
 8004658:	771a      	strb	r2, [r3, #28]
}
 800465a:	bf00      	nop
 800465c:	3710      	adds	r7, #16
 800465e:	46bd      	mov	sp, r7
 8004660:	bd80      	pop	{r7, pc}
	...

08004664 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004664:	b480      	push	{r7}
 8004666:	b085      	sub	sp, #20
 8004668:	af00      	add	r7, sp, #0
 800466a:	6078      	str	r0, [r7, #4]
 800466c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	4a33      	ldr	r2, [pc, #204]	; (8004744 <TIM_Base_SetConfig+0xe0>)
 8004678:	4293      	cmp	r3, r2
 800467a:	d013      	beq.n	80046a4 <TIM_Base_SetConfig+0x40>
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	4a32      	ldr	r2, [pc, #200]	; (8004748 <TIM_Base_SetConfig+0xe4>)
 8004680:	4293      	cmp	r3, r2
 8004682:	d00f      	beq.n	80046a4 <TIM_Base_SetConfig+0x40>
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800468a:	d00b      	beq.n	80046a4 <TIM_Base_SetConfig+0x40>
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	4a2f      	ldr	r2, [pc, #188]	; (800474c <TIM_Base_SetConfig+0xe8>)
 8004690:	4293      	cmp	r3, r2
 8004692:	d007      	beq.n	80046a4 <TIM_Base_SetConfig+0x40>
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	4a2e      	ldr	r2, [pc, #184]	; (8004750 <TIM_Base_SetConfig+0xec>)
 8004698:	4293      	cmp	r3, r2
 800469a:	d003      	beq.n	80046a4 <TIM_Base_SetConfig+0x40>
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	4a2d      	ldr	r2, [pc, #180]	; (8004754 <TIM_Base_SetConfig+0xf0>)
 80046a0:	4293      	cmp	r3, r2
 80046a2:	d108      	bne.n	80046b6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046aa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	685b      	ldr	r3, [r3, #4]
 80046b0:	68fa      	ldr	r2, [r7, #12]
 80046b2:	4313      	orrs	r3, r2
 80046b4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	4a22      	ldr	r2, [pc, #136]	; (8004744 <TIM_Base_SetConfig+0xe0>)
 80046ba:	4293      	cmp	r3, r2
 80046bc:	d013      	beq.n	80046e6 <TIM_Base_SetConfig+0x82>
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	4a21      	ldr	r2, [pc, #132]	; (8004748 <TIM_Base_SetConfig+0xe4>)
 80046c2:	4293      	cmp	r3, r2
 80046c4:	d00f      	beq.n	80046e6 <TIM_Base_SetConfig+0x82>
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046cc:	d00b      	beq.n	80046e6 <TIM_Base_SetConfig+0x82>
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	4a1e      	ldr	r2, [pc, #120]	; (800474c <TIM_Base_SetConfig+0xe8>)
 80046d2:	4293      	cmp	r3, r2
 80046d4:	d007      	beq.n	80046e6 <TIM_Base_SetConfig+0x82>
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	4a1d      	ldr	r2, [pc, #116]	; (8004750 <TIM_Base_SetConfig+0xec>)
 80046da:	4293      	cmp	r3, r2
 80046dc:	d003      	beq.n	80046e6 <TIM_Base_SetConfig+0x82>
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	4a1c      	ldr	r2, [pc, #112]	; (8004754 <TIM_Base_SetConfig+0xf0>)
 80046e2:	4293      	cmp	r3, r2
 80046e4:	d108      	bne.n	80046f8 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	68db      	ldr	r3, [r3, #12]
 80046f2:	68fa      	ldr	r2, [r7, #12]
 80046f4:	4313      	orrs	r3, r2
 80046f6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80046fe:	683b      	ldr	r3, [r7, #0]
 8004700:	695b      	ldr	r3, [r3, #20]
 8004702:	4313      	orrs	r3, r2
 8004704:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	68fa      	ldr	r2, [r7, #12]
 800470a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800470c:	683b      	ldr	r3, [r7, #0]
 800470e:	689a      	ldr	r2, [r3, #8]
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004714:	683b      	ldr	r3, [r7, #0]
 8004716:	681a      	ldr	r2, [r3, #0]
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	4a09      	ldr	r2, [pc, #36]	; (8004744 <TIM_Base_SetConfig+0xe0>)
 8004720:	4293      	cmp	r3, r2
 8004722:	d003      	beq.n	800472c <TIM_Base_SetConfig+0xc8>
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	4a08      	ldr	r2, [pc, #32]	; (8004748 <TIM_Base_SetConfig+0xe4>)
 8004728:	4293      	cmp	r3, r2
 800472a:	d103      	bne.n	8004734 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800472c:	683b      	ldr	r3, [r7, #0]
 800472e:	691a      	ldr	r2, [r3, #16]
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2201      	movs	r2, #1
 8004738:	615a      	str	r2, [r3, #20]
}
 800473a:	bf00      	nop
 800473c:	3714      	adds	r7, #20
 800473e:	46bd      	mov	sp, r7
 8004740:	bc80      	pop	{r7}
 8004742:	4770      	bx	lr
 8004744:	40012c00 	.word	0x40012c00
 8004748:	40013400 	.word	0x40013400
 800474c:	40000400 	.word	0x40000400
 8004750:	40000800 	.word	0x40000800
 8004754:	40000c00 	.word	0x40000c00

08004758 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004758:	b480      	push	{r7}
 800475a:	b087      	sub	sp, #28
 800475c:	af00      	add	r7, sp, #0
 800475e:	6078      	str	r0, [r7, #4]
 8004760:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6a1b      	ldr	r3, [r3, #32]
 8004766:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	6a1b      	ldr	r3, [r3, #32]
 800476c:	f023 0201 	bic.w	r2, r3, #1
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	685b      	ldr	r3, [r3, #4]
 8004778:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	699b      	ldr	r3, [r3, #24]
 800477e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004786:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	f023 0303 	bic.w	r3, r3, #3
 800478e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004790:	683b      	ldr	r3, [r7, #0]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	68fa      	ldr	r2, [r7, #12]
 8004796:	4313      	orrs	r3, r2
 8004798:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800479a:	697b      	ldr	r3, [r7, #20]
 800479c:	f023 0302 	bic.w	r3, r3, #2
 80047a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80047a2:	683b      	ldr	r3, [r7, #0]
 80047a4:	689b      	ldr	r3, [r3, #8]
 80047a6:	697a      	ldr	r2, [r7, #20]
 80047a8:	4313      	orrs	r3, r2
 80047aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	4a20      	ldr	r2, [pc, #128]	; (8004830 <TIM_OC1_SetConfig+0xd8>)
 80047b0:	4293      	cmp	r3, r2
 80047b2:	d003      	beq.n	80047bc <TIM_OC1_SetConfig+0x64>
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	4a1f      	ldr	r2, [pc, #124]	; (8004834 <TIM_OC1_SetConfig+0xdc>)
 80047b8:	4293      	cmp	r3, r2
 80047ba:	d10c      	bne.n	80047d6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80047bc:	697b      	ldr	r3, [r7, #20]
 80047be:	f023 0308 	bic.w	r3, r3, #8
 80047c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80047c4:	683b      	ldr	r3, [r7, #0]
 80047c6:	68db      	ldr	r3, [r3, #12]
 80047c8:	697a      	ldr	r2, [r7, #20]
 80047ca:	4313      	orrs	r3, r2
 80047cc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80047ce:	697b      	ldr	r3, [r7, #20]
 80047d0:	f023 0304 	bic.w	r3, r3, #4
 80047d4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	4a15      	ldr	r2, [pc, #84]	; (8004830 <TIM_OC1_SetConfig+0xd8>)
 80047da:	4293      	cmp	r3, r2
 80047dc:	d003      	beq.n	80047e6 <TIM_OC1_SetConfig+0x8e>
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	4a14      	ldr	r2, [pc, #80]	; (8004834 <TIM_OC1_SetConfig+0xdc>)
 80047e2:	4293      	cmp	r3, r2
 80047e4:	d111      	bne.n	800480a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80047e6:	693b      	ldr	r3, [r7, #16]
 80047e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80047ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80047ee:	693b      	ldr	r3, [r7, #16]
 80047f0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80047f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80047f6:	683b      	ldr	r3, [r7, #0]
 80047f8:	695b      	ldr	r3, [r3, #20]
 80047fa:	693a      	ldr	r2, [r7, #16]
 80047fc:	4313      	orrs	r3, r2
 80047fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004800:	683b      	ldr	r3, [r7, #0]
 8004802:	699b      	ldr	r3, [r3, #24]
 8004804:	693a      	ldr	r2, [r7, #16]
 8004806:	4313      	orrs	r3, r2
 8004808:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	693a      	ldr	r2, [r7, #16]
 800480e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	68fa      	ldr	r2, [r7, #12]
 8004814:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004816:	683b      	ldr	r3, [r7, #0]
 8004818:	685a      	ldr	r2, [r3, #4]
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	697a      	ldr	r2, [r7, #20]
 8004822:	621a      	str	r2, [r3, #32]
}
 8004824:	bf00      	nop
 8004826:	371c      	adds	r7, #28
 8004828:	46bd      	mov	sp, r7
 800482a:	bc80      	pop	{r7}
 800482c:	4770      	bx	lr
 800482e:	bf00      	nop
 8004830:	40012c00 	.word	0x40012c00
 8004834:	40013400 	.word	0x40013400

08004838 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004838:	b480      	push	{r7}
 800483a:	b087      	sub	sp, #28
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]
 8004840:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	6a1b      	ldr	r3, [r3, #32]
 8004846:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	6a1b      	ldr	r3, [r3, #32]
 800484c:	f023 0210 	bic.w	r2, r3, #16
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	685b      	ldr	r3, [r3, #4]
 8004858:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	699b      	ldr	r3, [r3, #24]
 800485e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004866:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800486e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004870:	683b      	ldr	r3, [r7, #0]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	021b      	lsls	r3, r3, #8
 8004876:	68fa      	ldr	r2, [r7, #12]
 8004878:	4313      	orrs	r3, r2
 800487a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800487c:	697b      	ldr	r3, [r7, #20]
 800487e:	f023 0320 	bic.w	r3, r3, #32
 8004882:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004884:	683b      	ldr	r3, [r7, #0]
 8004886:	689b      	ldr	r3, [r3, #8]
 8004888:	011b      	lsls	r3, r3, #4
 800488a:	697a      	ldr	r2, [r7, #20]
 800488c:	4313      	orrs	r3, r2
 800488e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	4a21      	ldr	r2, [pc, #132]	; (8004918 <TIM_OC2_SetConfig+0xe0>)
 8004894:	4293      	cmp	r3, r2
 8004896:	d003      	beq.n	80048a0 <TIM_OC2_SetConfig+0x68>
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	4a20      	ldr	r2, [pc, #128]	; (800491c <TIM_OC2_SetConfig+0xe4>)
 800489c:	4293      	cmp	r3, r2
 800489e:	d10d      	bne.n	80048bc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80048a0:	697b      	ldr	r3, [r7, #20]
 80048a2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80048a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80048a8:	683b      	ldr	r3, [r7, #0]
 80048aa:	68db      	ldr	r3, [r3, #12]
 80048ac:	011b      	lsls	r3, r3, #4
 80048ae:	697a      	ldr	r2, [r7, #20]
 80048b0:	4313      	orrs	r3, r2
 80048b2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80048b4:	697b      	ldr	r3, [r7, #20]
 80048b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80048ba:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	4a16      	ldr	r2, [pc, #88]	; (8004918 <TIM_OC2_SetConfig+0xe0>)
 80048c0:	4293      	cmp	r3, r2
 80048c2:	d003      	beq.n	80048cc <TIM_OC2_SetConfig+0x94>
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	4a15      	ldr	r2, [pc, #84]	; (800491c <TIM_OC2_SetConfig+0xe4>)
 80048c8:	4293      	cmp	r3, r2
 80048ca:	d113      	bne.n	80048f4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80048cc:	693b      	ldr	r3, [r7, #16]
 80048ce:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80048d2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80048d4:	693b      	ldr	r3, [r7, #16]
 80048d6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80048da:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80048dc:	683b      	ldr	r3, [r7, #0]
 80048de:	695b      	ldr	r3, [r3, #20]
 80048e0:	009b      	lsls	r3, r3, #2
 80048e2:	693a      	ldr	r2, [r7, #16]
 80048e4:	4313      	orrs	r3, r2
 80048e6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80048e8:	683b      	ldr	r3, [r7, #0]
 80048ea:	699b      	ldr	r3, [r3, #24]
 80048ec:	009b      	lsls	r3, r3, #2
 80048ee:	693a      	ldr	r2, [r7, #16]
 80048f0:	4313      	orrs	r3, r2
 80048f2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	693a      	ldr	r2, [r7, #16]
 80048f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	68fa      	ldr	r2, [r7, #12]
 80048fe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	685a      	ldr	r2, [r3, #4]
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	697a      	ldr	r2, [r7, #20]
 800490c:	621a      	str	r2, [r3, #32]
}
 800490e:	bf00      	nop
 8004910:	371c      	adds	r7, #28
 8004912:	46bd      	mov	sp, r7
 8004914:	bc80      	pop	{r7}
 8004916:	4770      	bx	lr
 8004918:	40012c00 	.word	0x40012c00
 800491c:	40013400 	.word	0x40013400

08004920 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004920:	b480      	push	{r7}
 8004922:	b087      	sub	sp, #28
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]
 8004928:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	6a1b      	ldr	r3, [r3, #32]
 800492e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	6a1b      	ldr	r3, [r3, #32]
 8004934:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	685b      	ldr	r3, [r3, #4]
 8004940:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	69db      	ldr	r3, [r3, #28]
 8004946:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800494e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	f023 0303 	bic.w	r3, r3, #3
 8004956:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004958:	683b      	ldr	r3, [r7, #0]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	68fa      	ldr	r2, [r7, #12]
 800495e:	4313      	orrs	r3, r2
 8004960:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004962:	697b      	ldr	r3, [r7, #20]
 8004964:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004968:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800496a:	683b      	ldr	r3, [r7, #0]
 800496c:	689b      	ldr	r3, [r3, #8]
 800496e:	021b      	lsls	r3, r3, #8
 8004970:	697a      	ldr	r2, [r7, #20]
 8004972:	4313      	orrs	r3, r2
 8004974:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	4a21      	ldr	r2, [pc, #132]	; (8004a00 <TIM_OC3_SetConfig+0xe0>)
 800497a:	4293      	cmp	r3, r2
 800497c:	d003      	beq.n	8004986 <TIM_OC3_SetConfig+0x66>
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	4a20      	ldr	r2, [pc, #128]	; (8004a04 <TIM_OC3_SetConfig+0xe4>)
 8004982:	4293      	cmp	r3, r2
 8004984:	d10d      	bne.n	80049a2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004986:	697b      	ldr	r3, [r7, #20]
 8004988:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800498c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800498e:	683b      	ldr	r3, [r7, #0]
 8004990:	68db      	ldr	r3, [r3, #12]
 8004992:	021b      	lsls	r3, r3, #8
 8004994:	697a      	ldr	r2, [r7, #20]
 8004996:	4313      	orrs	r3, r2
 8004998:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800499a:	697b      	ldr	r3, [r7, #20]
 800499c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80049a0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	4a16      	ldr	r2, [pc, #88]	; (8004a00 <TIM_OC3_SetConfig+0xe0>)
 80049a6:	4293      	cmp	r3, r2
 80049a8:	d003      	beq.n	80049b2 <TIM_OC3_SetConfig+0x92>
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	4a15      	ldr	r2, [pc, #84]	; (8004a04 <TIM_OC3_SetConfig+0xe4>)
 80049ae:	4293      	cmp	r3, r2
 80049b0:	d113      	bne.n	80049da <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80049b2:	693b      	ldr	r3, [r7, #16]
 80049b4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80049b8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80049ba:	693b      	ldr	r3, [r7, #16]
 80049bc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80049c0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80049c2:	683b      	ldr	r3, [r7, #0]
 80049c4:	695b      	ldr	r3, [r3, #20]
 80049c6:	011b      	lsls	r3, r3, #4
 80049c8:	693a      	ldr	r2, [r7, #16]
 80049ca:	4313      	orrs	r3, r2
 80049cc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80049ce:	683b      	ldr	r3, [r7, #0]
 80049d0:	699b      	ldr	r3, [r3, #24]
 80049d2:	011b      	lsls	r3, r3, #4
 80049d4:	693a      	ldr	r2, [r7, #16]
 80049d6:	4313      	orrs	r3, r2
 80049d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	693a      	ldr	r2, [r7, #16]
 80049de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	68fa      	ldr	r2, [r7, #12]
 80049e4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80049e6:	683b      	ldr	r3, [r7, #0]
 80049e8:	685a      	ldr	r2, [r3, #4]
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	697a      	ldr	r2, [r7, #20]
 80049f2:	621a      	str	r2, [r3, #32]
}
 80049f4:	bf00      	nop
 80049f6:	371c      	adds	r7, #28
 80049f8:	46bd      	mov	sp, r7
 80049fa:	bc80      	pop	{r7}
 80049fc:	4770      	bx	lr
 80049fe:	bf00      	nop
 8004a00:	40012c00 	.word	0x40012c00
 8004a04:	40013400 	.word	0x40013400

08004a08 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004a08:	b480      	push	{r7}
 8004a0a:	b087      	sub	sp, #28
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	6078      	str	r0, [r7, #4]
 8004a10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	6a1b      	ldr	r3, [r3, #32]
 8004a16:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	6a1b      	ldr	r3, [r3, #32]
 8004a1c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	685b      	ldr	r3, [r3, #4]
 8004a28:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	69db      	ldr	r3, [r3, #28]
 8004a2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a3e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004a40:	683b      	ldr	r3, [r7, #0]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	021b      	lsls	r3, r3, #8
 8004a46:	68fa      	ldr	r2, [r7, #12]
 8004a48:	4313      	orrs	r3, r2
 8004a4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004a4c:	693b      	ldr	r3, [r7, #16]
 8004a4e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004a52:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004a54:	683b      	ldr	r3, [r7, #0]
 8004a56:	689b      	ldr	r3, [r3, #8]
 8004a58:	031b      	lsls	r3, r3, #12
 8004a5a:	693a      	ldr	r2, [r7, #16]
 8004a5c:	4313      	orrs	r3, r2
 8004a5e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	4a11      	ldr	r2, [pc, #68]	; (8004aa8 <TIM_OC4_SetConfig+0xa0>)
 8004a64:	4293      	cmp	r3, r2
 8004a66:	d003      	beq.n	8004a70 <TIM_OC4_SetConfig+0x68>
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	4a10      	ldr	r2, [pc, #64]	; (8004aac <TIM_OC4_SetConfig+0xa4>)
 8004a6c:	4293      	cmp	r3, r2
 8004a6e:	d109      	bne.n	8004a84 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004a70:	697b      	ldr	r3, [r7, #20]
 8004a72:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004a76:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004a78:	683b      	ldr	r3, [r7, #0]
 8004a7a:	695b      	ldr	r3, [r3, #20]
 8004a7c:	019b      	lsls	r3, r3, #6
 8004a7e:	697a      	ldr	r2, [r7, #20]
 8004a80:	4313      	orrs	r3, r2
 8004a82:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	697a      	ldr	r2, [r7, #20]
 8004a88:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	68fa      	ldr	r2, [r7, #12]
 8004a8e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004a90:	683b      	ldr	r3, [r7, #0]
 8004a92:	685a      	ldr	r2, [r3, #4]
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	693a      	ldr	r2, [r7, #16]
 8004a9c:	621a      	str	r2, [r3, #32]
}
 8004a9e:	bf00      	nop
 8004aa0:	371c      	adds	r7, #28
 8004aa2:	46bd      	mov	sp, r7
 8004aa4:	bc80      	pop	{r7}
 8004aa6:	4770      	bx	lr
 8004aa8:	40012c00 	.word	0x40012c00
 8004aac:	40013400 	.word	0x40013400

08004ab0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004ab0:	b480      	push	{r7}
 8004ab2:	b087      	sub	sp, #28
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	60f8      	str	r0, [r7, #12]
 8004ab8:	60b9      	str	r1, [r7, #8]
 8004aba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	6a1b      	ldr	r3, [r3, #32]
 8004ac0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	6a1b      	ldr	r3, [r3, #32]
 8004ac6:	f023 0201 	bic.w	r2, r3, #1
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	699b      	ldr	r3, [r3, #24]
 8004ad2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004ad4:	693b      	ldr	r3, [r7, #16]
 8004ad6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004ada:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	011b      	lsls	r3, r3, #4
 8004ae0:	693a      	ldr	r2, [r7, #16]
 8004ae2:	4313      	orrs	r3, r2
 8004ae4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004ae6:	697b      	ldr	r3, [r7, #20]
 8004ae8:	f023 030a 	bic.w	r3, r3, #10
 8004aec:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004aee:	697a      	ldr	r2, [r7, #20]
 8004af0:	68bb      	ldr	r3, [r7, #8]
 8004af2:	4313      	orrs	r3, r2
 8004af4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	693a      	ldr	r2, [r7, #16]
 8004afa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	697a      	ldr	r2, [r7, #20]
 8004b00:	621a      	str	r2, [r3, #32]
}
 8004b02:	bf00      	nop
 8004b04:	371c      	adds	r7, #28
 8004b06:	46bd      	mov	sp, r7
 8004b08:	bc80      	pop	{r7}
 8004b0a:	4770      	bx	lr

08004b0c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004b0c:	b480      	push	{r7}
 8004b0e:	b087      	sub	sp, #28
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	60f8      	str	r0, [r7, #12]
 8004b14:	60b9      	str	r1, [r7, #8]
 8004b16:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	6a1b      	ldr	r3, [r3, #32]
 8004b1c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	6a1b      	ldr	r3, [r3, #32]
 8004b22:	f023 0210 	bic.w	r2, r3, #16
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	699b      	ldr	r3, [r3, #24]
 8004b2e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004b30:	693b      	ldr	r3, [r7, #16]
 8004b32:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004b36:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	031b      	lsls	r3, r3, #12
 8004b3c:	693a      	ldr	r2, [r7, #16]
 8004b3e:	4313      	orrs	r3, r2
 8004b40:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004b42:	697b      	ldr	r3, [r7, #20]
 8004b44:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004b48:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004b4a:	68bb      	ldr	r3, [r7, #8]
 8004b4c:	011b      	lsls	r3, r3, #4
 8004b4e:	697a      	ldr	r2, [r7, #20]
 8004b50:	4313      	orrs	r3, r2
 8004b52:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	693a      	ldr	r2, [r7, #16]
 8004b58:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	697a      	ldr	r2, [r7, #20]
 8004b5e:	621a      	str	r2, [r3, #32]
}
 8004b60:	bf00      	nop
 8004b62:	371c      	adds	r7, #28
 8004b64:	46bd      	mov	sp, r7
 8004b66:	bc80      	pop	{r7}
 8004b68:	4770      	bx	lr

08004b6a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004b6a:	b480      	push	{r7}
 8004b6c:	b085      	sub	sp, #20
 8004b6e:	af00      	add	r7, sp, #0
 8004b70:	6078      	str	r0, [r7, #4]
 8004b72:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	689b      	ldr	r3, [r3, #8]
 8004b78:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b80:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004b82:	683a      	ldr	r2, [r7, #0]
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	4313      	orrs	r3, r2
 8004b88:	f043 0307 	orr.w	r3, r3, #7
 8004b8c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	68fa      	ldr	r2, [r7, #12]
 8004b92:	609a      	str	r2, [r3, #8]
}
 8004b94:	bf00      	nop
 8004b96:	3714      	adds	r7, #20
 8004b98:	46bd      	mov	sp, r7
 8004b9a:	bc80      	pop	{r7}
 8004b9c:	4770      	bx	lr

08004b9e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004b9e:	b480      	push	{r7}
 8004ba0:	b087      	sub	sp, #28
 8004ba2:	af00      	add	r7, sp, #0
 8004ba4:	60f8      	str	r0, [r7, #12]
 8004ba6:	60b9      	str	r1, [r7, #8]
 8004ba8:	607a      	str	r2, [r7, #4]
 8004baa:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	689b      	ldr	r3, [r3, #8]
 8004bb0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004bb2:	697b      	ldr	r3, [r7, #20]
 8004bb4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004bb8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004bba:	683b      	ldr	r3, [r7, #0]
 8004bbc:	021a      	lsls	r2, r3, #8
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	431a      	orrs	r2, r3
 8004bc2:	68bb      	ldr	r3, [r7, #8]
 8004bc4:	4313      	orrs	r3, r2
 8004bc6:	697a      	ldr	r2, [r7, #20]
 8004bc8:	4313      	orrs	r3, r2
 8004bca:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	697a      	ldr	r2, [r7, #20]
 8004bd0:	609a      	str	r2, [r3, #8]
}
 8004bd2:	bf00      	nop
 8004bd4:	371c      	adds	r7, #28
 8004bd6:	46bd      	mov	sp, r7
 8004bd8:	bc80      	pop	{r7}
 8004bda:	4770      	bx	lr

08004bdc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004bdc:	b480      	push	{r7}
 8004bde:	b087      	sub	sp, #28
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	60f8      	str	r0, [r7, #12]
 8004be4:	60b9      	str	r1, [r7, #8]
 8004be6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004be8:	68bb      	ldr	r3, [r7, #8]
 8004bea:	f003 031f 	and.w	r3, r3, #31
 8004bee:	2201      	movs	r2, #1
 8004bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8004bf4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	6a1a      	ldr	r2, [r3, #32]
 8004bfa:	697b      	ldr	r3, [r7, #20]
 8004bfc:	43db      	mvns	r3, r3
 8004bfe:	401a      	ands	r2, r3
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	6a1a      	ldr	r2, [r3, #32]
 8004c08:	68bb      	ldr	r3, [r7, #8]
 8004c0a:	f003 031f 	and.w	r3, r3, #31
 8004c0e:	6879      	ldr	r1, [r7, #4]
 8004c10:	fa01 f303 	lsl.w	r3, r1, r3
 8004c14:	431a      	orrs	r2, r3
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	621a      	str	r2, [r3, #32]
}
 8004c1a:	bf00      	nop
 8004c1c:	371c      	adds	r7, #28
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	bc80      	pop	{r7}
 8004c22:	4770      	bx	lr

08004c24 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004c24:	b480      	push	{r7}
 8004c26:	b085      	sub	sp, #20
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	6078      	str	r0, [r7, #4]
 8004c2c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c34:	2b01      	cmp	r3, #1
 8004c36:	d101      	bne.n	8004c3c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004c38:	2302      	movs	r3, #2
 8004c3a:	e050      	b.n	8004cde <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2201      	movs	r2, #1
 8004c40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2202      	movs	r2, #2
 8004c48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	685b      	ldr	r3, [r3, #4]
 8004c52:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	689b      	ldr	r3, [r3, #8]
 8004c5a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c62:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004c64:	683b      	ldr	r3, [r7, #0]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	68fa      	ldr	r2, [r7, #12]
 8004c6a:	4313      	orrs	r3, r2
 8004c6c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	68fa      	ldr	r2, [r7, #12]
 8004c74:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	4a1b      	ldr	r2, [pc, #108]	; (8004ce8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8004c7c:	4293      	cmp	r3, r2
 8004c7e:	d018      	beq.n	8004cb2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	4a19      	ldr	r2, [pc, #100]	; (8004cec <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004c86:	4293      	cmp	r3, r2
 8004c88:	d013      	beq.n	8004cb2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c92:	d00e      	beq.n	8004cb2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	4a15      	ldr	r2, [pc, #84]	; (8004cf0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004c9a:	4293      	cmp	r3, r2
 8004c9c:	d009      	beq.n	8004cb2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	4a14      	ldr	r2, [pc, #80]	; (8004cf4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004ca4:	4293      	cmp	r3, r2
 8004ca6:	d004      	beq.n	8004cb2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	4a12      	ldr	r2, [pc, #72]	; (8004cf8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004cae:	4293      	cmp	r3, r2
 8004cb0:	d10c      	bne.n	8004ccc <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004cb2:	68bb      	ldr	r3, [r7, #8]
 8004cb4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004cb8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004cba:	683b      	ldr	r3, [r7, #0]
 8004cbc:	685b      	ldr	r3, [r3, #4]
 8004cbe:	68ba      	ldr	r2, [r7, #8]
 8004cc0:	4313      	orrs	r3, r2
 8004cc2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	68ba      	ldr	r2, [r7, #8]
 8004cca:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2201      	movs	r2, #1
 8004cd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2200      	movs	r2, #0
 8004cd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004cdc:	2300      	movs	r3, #0
}
 8004cde:	4618      	mov	r0, r3
 8004ce0:	3714      	adds	r7, #20
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	bc80      	pop	{r7}
 8004ce6:	4770      	bx	lr
 8004ce8:	40012c00 	.word	0x40012c00
 8004cec:	40013400 	.word	0x40013400
 8004cf0:	40000400 	.word	0x40000400
 8004cf4:	40000800 	.word	0x40000800
 8004cf8:	40000c00 	.word	0x40000c00

08004cfc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004cfc:	b480      	push	{r7}
 8004cfe:	b085      	sub	sp, #20
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	6078      	str	r0, [r7, #4]
 8004d04:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004d06:	2300      	movs	r3, #0
 8004d08:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d10:	2b01      	cmp	r3, #1
 8004d12:	d101      	bne.n	8004d18 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004d14:	2302      	movs	r3, #2
 8004d16:	e03d      	b.n	8004d94 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2201      	movs	r2, #1
 8004d1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004d26:	683b      	ldr	r3, [r7, #0]
 8004d28:	68db      	ldr	r3, [r3, #12]
 8004d2a:	4313      	orrs	r3, r2
 8004d2c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004d34:	683b      	ldr	r3, [r7, #0]
 8004d36:	689b      	ldr	r3, [r3, #8]
 8004d38:	4313      	orrs	r3, r2
 8004d3a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004d42:	683b      	ldr	r3, [r7, #0]
 8004d44:	685b      	ldr	r3, [r3, #4]
 8004d46:	4313      	orrs	r3, r2
 8004d48:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004d50:	683b      	ldr	r3, [r7, #0]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	4313      	orrs	r3, r2
 8004d56:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004d5e:	683b      	ldr	r3, [r7, #0]
 8004d60:	691b      	ldr	r3, [r3, #16]
 8004d62:	4313      	orrs	r3, r2
 8004d64:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004d6c:	683b      	ldr	r3, [r7, #0]
 8004d6e:	695b      	ldr	r3, [r3, #20]
 8004d70:	4313      	orrs	r3, r2
 8004d72:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004d7a:	683b      	ldr	r3, [r7, #0]
 8004d7c:	69db      	ldr	r3, [r3, #28]
 8004d7e:	4313      	orrs	r3, r2
 8004d80:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	68fa      	ldr	r2, [r7, #12]
 8004d88:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	2200      	movs	r2, #0
 8004d8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004d92:	2300      	movs	r3, #0
}
 8004d94:	4618      	mov	r0, r3
 8004d96:	3714      	adds	r7, #20
 8004d98:	46bd      	mov	sp, r7
 8004d9a:	bc80      	pop	{r7}
 8004d9c:	4770      	bx	lr

08004d9e <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004d9e:	b480      	push	{r7}
 8004da0:	b083      	sub	sp, #12
 8004da2:	af00      	add	r7, sp, #0
 8004da4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004da6:	bf00      	nop
 8004da8:	370c      	adds	r7, #12
 8004daa:	46bd      	mov	sp, r7
 8004dac:	bc80      	pop	{r7}
 8004dae:	4770      	bx	lr

08004db0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004db0:	b480      	push	{r7}
 8004db2:	b083      	sub	sp, #12
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004db8:	bf00      	nop
 8004dba:	370c      	adds	r7, #12
 8004dbc:	46bd      	mov	sp, r7
 8004dbe:	bc80      	pop	{r7}
 8004dc0:	4770      	bx	lr

08004dc2 <memset>:
 8004dc2:	4603      	mov	r3, r0
 8004dc4:	4402      	add	r2, r0
 8004dc6:	4293      	cmp	r3, r2
 8004dc8:	d100      	bne.n	8004dcc <memset+0xa>
 8004dca:	4770      	bx	lr
 8004dcc:	f803 1b01 	strb.w	r1, [r3], #1
 8004dd0:	e7f9      	b.n	8004dc6 <memset+0x4>
	...

08004dd4 <__libc_init_array>:
 8004dd4:	b570      	push	{r4, r5, r6, lr}
 8004dd6:	2600      	movs	r6, #0
 8004dd8:	4d0c      	ldr	r5, [pc, #48]	; (8004e0c <__libc_init_array+0x38>)
 8004dda:	4c0d      	ldr	r4, [pc, #52]	; (8004e10 <__libc_init_array+0x3c>)
 8004ddc:	1b64      	subs	r4, r4, r5
 8004dde:	10a4      	asrs	r4, r4, #2
 8004de0:	42a6      	cmp	r6, r4
 8004de2:	d109      	bne.n	8004df8 <__libc_init_array+0x24>
 8004de4:	f000 f81a 	bl	8004e1c <_init>
 8004de8:	2600      	movs	r6, #0
 8004dea:	4d0a      	ldr	r5, [pc, #40]	; (8004e14 <__libc_init_array+0x40>)
 8004dec:	4c0a      	ldr	r4, [pc, #40]	; (8004e18 <__libc_init_array+0x44>)
 8004dee:	1b64      	subs	r4, r4, r5
 8004df0:	10a4      	asrs	r4, r4, #2
 8004df2:	42a6      	cmp	r6, r4
 8004df4:	d105      	bne.n	8004e02 <__libc_init_array+0x2e>
 8004df6:	bd70      	pop	{r4, r5, r6, pc}
 8004df8:	f855 3b04 	ldr.w	r3, [r5], #4
 8004dfc:	4798      	blx	r3
 8004dfe:	3601      	adds	r6, #1
 8004e00:	e7ee      	b.n	8004de0 <__libc_init_array+0xc>
 8004e02:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e06:	4798      	blx	r3
 8004e08:	3601      	adds	r6, #1
 8004e0a:	e7f2      	b.n	8004df2 <__libc_init_array+0x1e>
 8004e0c:	08004eec 	.word	0x08004eec
 8004e10:	08004eec 	.word	0x08004eec
 8004e14:	08004eec 	.word	0x08004eec
 8004e18:	08004ef0 	.word	0x08004ef0

08004e1c <_init>:
 8004e1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e1e:	bf00      	nop
 8004e20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e22:	bc08      	pop	{r3}
 8004e24:	469e      	mov	lr, r3
 8004e26:	4770      	bx	lr

08004e28 <_fini>:
 8004e28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e2a:	bf00      	nop
 8004e2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e2e:	bc08      	pop	{r3}
 8004e30:	469e      	mov	lr, r3
 8004e32:	4770      	bx	lr
